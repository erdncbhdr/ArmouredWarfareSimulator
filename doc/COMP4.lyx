#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\begin_modules
theorems-bytype
theorems-sec-bytype
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family rmdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 0.2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 1cm
\headheight 2cm
\headsep 2cm
\footskip 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
COMP4
\end_layout

\begin_layout Title
Armoured Warfare Simulator 2D 2014
\end_layout

\begin_layout Author
Harry Ward
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Analysis
\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
In 2013, a study by The NPD group showed that 68% of all PC owners used
 their computer for online gaming 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

, making it the largest user base in the PC market.
 The problem comes with the fact that high-powered gaming machines are costly,
 and most users cannot play triple-A, high-fidelity releases on their home
 PC.
 This fact means that popular multiplayer games often leave some players
 unable to join in.
 
\end_layout

\begin_layout Standard
My client is Slick Muffin Studios
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset

, a small game developer who specialise in creating 2D games.
 I have worked with the client in the past, making small scale games.
 They have approached me to produce a multiplayer game in their style that
 can run on all machines made in the last 10 years in order to answer a
 growing request from the userbase for a game they can play with friends.
 My point of contact to the company is the creative director Jessie Canfer
 who has been with the company since it's founding in 2012.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
My user group includes those who cannot play the full release of a game
 due to the machine specifications required to run it at a reasonable frame
 per second count.
 These potential consumers vary greatly in technical knowledge, from expert
 to beginner, although all know how to use a basic program.
\end_layout

\begin_layout Standard
In short, my aim is to produce a well-optimised 2D multiplayer game able
 to run on most systems.
\end_layout

\begin_layout Subsection
Investigation of User Needs and Acceptable Limitations
\end_layout

\begin_layout Subsubsection
The Current System Analysis
\end_layout

\begin_layout Standard
The problem that I am solving is that there is no current system- the user
 cannot play multiplayer games on their PC at a reasonable FPS.
 As such there is no current system to analyse.
\end_layout

\begin_layout Subsubsection
Questionnaire
\end_layout

\begin_layout Standard
I asked various PC owners about their computer usage and specifications
 of their machines.
 This will help me set my limitations.
 Due to my user group, some may have lower specification PCs than others;
 In order to provide to all users, I will need to establish to lowest specificat
ion.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="6">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Question
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User 1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User 2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User 3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User 4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User 5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Do you own a PC?
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Do you play online games?
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Do you have a dedicated graphics card?
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Can you play new releases?
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
N/A
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes(barely)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Are graphics important to you?
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
What operating system do you use?
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GNU/Linux
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Win8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Win7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Win8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
WinVista
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
From this I have found out that graphics are not an issue in the games my
 users play, I expected this as the users want to play the games and cannot
 normally, as shown by the fact that 3/4 users have trouble playing new
 releases.
 I have also found that my system will have to be compatable with windows
 versions Vista onwards, as everyone interviewed uses windows, as well as
 other major operating systems including GNU/Linux.
 
\end_layout

\begin_layout Subsubsection
The Proposed New System Analysis
\end_layout

\begin_layout Standard
I will interview a potential user of my solution, from it I hope to figure
 out what the average user enjoys and wants from a multiplayer game.
 I also hope to find out what style of game is enjoyable on low-end computers,
 to give me direction designing my solution.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Interview with Fuego Gitano, low-end PC user
\end_layout

\begin_layout Standard
Q: What is most important to you in a multiplayer game?
\end_layout

\begin_layout Standard
A: I want fun mechanics with a small-ish team size, also a reliable connection
 - it's not fun having lots of lag.
 There should be end-game content to keep players interested as well.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Q: End-game content? What do you mean?
\end_layout

\begin_layout Standard
A: I rather like progression, working up to gradually better things, but
 once you reach the top there is nothing else to do.
 More content when you reach this end keeps me interested and playing.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Q: What graphics do you expect from a multiplayer game?
\end_layout

\begin_layout Standard
A: From my machine, I expect at least a detailed or stylised 2d environment,
 3d isn't always reliable as my FPS can drop quite a bit.
 Other than that, a simple style works quite well.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Q:
\emph on
 
\emph default
What genres of game do you think work well for multiplayer?
\end_layout

\begin_layout Standard
A: I enjoy shooters and games involving individual skill.
 I also like fast-paced gameplay.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Q: Do you like luck being a mechanic of the game?
\end_layout

\begin_layout Standard
A: No, that ruins it for me.
 I like predictable gameplay .
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Q: Is there anything else you enjoy in multiplayer games?
\end_layout

\begin_layout Standard
A: I enjoy an element of customisation, visual mainly.
 Strategy is also fun, quick decisions leading to either victory or defeat
 can be really good.
 Also winning should be secondary to having fun, and the game should allow
 for this by not focusing too much on victory.
 That is everything, I think.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
From this interview I have found that my typical user puts empasis on mechanics
 over graphics, which I expected as my user group does not have dedicated
 graphics cards, so have come to appreciate good mechanics.
 The user also wants there to be reason to carry on playing, to progress
 and to have something to work towards, this works nicely as the user enjoys
 shooters and progression is a mainstay in this genre.
 This combined with the user wanting a strategic game leads me to propose
 a top-down 2D armoured warfare game.
 It's will comprise of small-sized teams of perhaps 4 and an element of
 customisation as per the user's answers from the interview.
\end_layout

\begin_layout Section*
Level 0 Data Flow Diagram
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Level0Data.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Section*
Level 1 Data Flow Diagram
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Level1Data.pdf
	scale 50

\end_inset


\end_layout

\begin_layout Standard
There is only one entity in my data flow diagram, as information is both
 taken from and given to the client.
 There are to be multiple clients entities connected to the server at one
 point, up to 8.
 The server will act as a data source, holding data for all connected clients
 and sending it to them on request.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Data will be stored on the server for user accounts, this will be a <10MiB
 database, and on the client side player sprites will be stored in PNG format
 for transparency, whilst the maps will likely be stored in JPG format along
 with a text file to store map collision data, i.e.
 where building are.
 These sprites could take up between 10 and 20 MiB of data, and the client/serve
r collection will be under 30MiB.
 It will be able to be stored on any medium due to this size.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset

 
\end_layout

\begin_layout Subsubsection
Data dictonaries
\end_layout

\begin_layout Standard
Below are the data dictonaries for my proposed system
\end_layout

\begin_layout Standard
Login database
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="5">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Field name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Field purpose
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Field Type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Example Data
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Validation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Username
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
To store the users alias
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FloatingGhost
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Not null
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Password
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
To enable secure login
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String/Hashed
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
640ab2bae07bedc
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Not null
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
XP
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
To store the user's progress
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Int
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Not null
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tanks
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
To store the user's unlocked tanks
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PanzerIV,Maus
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Not null
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wins
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
To store the users number of wins
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Not null
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Server variables
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="5">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Field name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Field purpose
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Field Type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Example Data
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Validation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Id
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
To determine which client is connected
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Int
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Not null
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x_pos
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
To store the clients x position
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List of floats
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[7.7,7.7]
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Not null
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y_pos
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
To store the clients y positions
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List of floats
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[7.7,7.7]
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Not null
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
angles
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
To store the clients angles
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List of floats
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[77,77]
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Not null
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
turret_angles
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
To store the clients turret angles
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List of floats
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[77,77]
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Not null
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Client variables
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="5">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Field name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Field purpose
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Field Type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Example Data
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Validation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Id
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
To tell the server who you are
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Int
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x_pos
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
To draw every player on the screen
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List of floats
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[7.7,7.7]
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y_pos
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
To draw every player on the screen
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List of floats
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[7,7,7.7]
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
angles
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
To draw every player on the screen
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List of floats
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[77,77]
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
turret_angles
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
To draw every player on the screen
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List of floats
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[77,77]
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
networkComms
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
To communicate with the server
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Custom class
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
((
\begin_inset Quotes eld
\end_inset

localhost
\begin_inset Quotes erd
\end_inset

,9999))
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Database design
\end_layout

\begin_layout Standard
Main database design
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename DatabaseAnaly.pdf

\end_inset


\end_layout

\begin_layout Standard
User(
\bar under
UserID
\bar default
, username, hashedPassword, panzerIVProgress, churchillProgress, ...
 , [Tank]Progress, xp)
\end_layout

\begin_layout Standard
Tank(
\bar under
TankID
\bar default
, name, speed, hp, traverseSpeed, turretTraverseSpeed, damage, rateOfFire,
 armour, penetration)
\end_layout

\begin_layout Subsubsection
Proposed objects
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename SpriteInheritence.pdf

\end_inset


\end_layout

\begin_layout Subsubsection
Data Sources and Destinations
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sources
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destinations
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Player send client information
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Server stored updates client information
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Server send all player information
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Player updates the network players, output in form of drawing players on
 the screen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tank Database gives the tank stats
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Client takes it's stats to correctly update it's own information, no output
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Player gives input to the client
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Outputted to the server in the form of updates client information
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Constraints
\end_layout

\begin_layout Subsubsection
Hardware
\end_layout

\begin_layout Standard
This is the main constraint of my proposed system as the problem I am solving
 is due to low-powered hardware.
 My solution will have to run on low-end integrated graphics systems at
 >30 FPS to fit with the client's request as expressed in the interview.
 It must also be able to host the server on both WiFi and Ethernet LAN to
 cover every possible machine.
\end_layout

\begin_layout Standard
Another possible hardware constraint is network interfaces - as the game
 will run over a network, it will need low latency to give a pleasant experience.
 Low-speed network interfaces are an issue due to the time taken for the
 client to send and recieve requests and responses respectivelty from the
 server.
\end_layout

\begin_layout Subsubsection
Software
\end_layout

\begin_layout Standard
My proposed system is to be cross-platform, so it must use a programming
 language that is also cross-platform as well as any external libraries.
 
\end_layout

\begin_layout Subsubsection
Time
\end_layout

\begin_layout Standard
The project must be finished by the deadline, easter 2014.
\end_layout

\begin_layout Subsubsection
User's Knowledge Of Information Technology
\end_layout

\begin_layout Standard
As my user group mainly plays games online, they are familliar with how
 to use a program.
 But to ensure that everyone on all systems can use my solution, I will
 keep the program as jargon-free as possible and as simplistic as I can
 make it.
\end_layout

\begin_layout Subsubsection
Who will be allowed to use the system?
\end_layout

\begin_layout Standard
The client can be used by anyone, whilst the running server can only be
 accessed by the owner of the PC running it.
 User accounts can only be accessed by their respective owners, so there
 will have to be some way to log in to ensure security.
\end_layout

\begin_layout Subsection
Objectives
\end_layout

\begin_layout Subsubsection
General Objectives
\end_layout

\begin_layout Standard
My client's overall objective is to create a fun, multiplayer armoured warfare
 game that has depth and end-game content.
 My client wants it to run on any system, regardless of computer specification,
 whilst making the game to the users satisfaction.
\end_layout

\begin_layout Subsubsection
Specific Objectives
\end_layout

\begin_layout Enumerate
By deadline day, my game client must be able to communicate across the network
 with low latency.
\end_layout

\begin_layout Enumerate
By deadline day, it must also be able to run on a low-power PC at more than
 30 Frames Per Second.
\end_layout

\begin_layout Enumerate
By deadline day, it must also have user accounts with progression.
\end_layout

\begin_layout Enumerate
By deadline day, it must also support up to 8 players.
\end_layout

\begin_layout Enumerate
By deadline day, it must also be supported on Windows and Linux with less
 than a 5 minute installation time.
\end_layout

\begin_layout Subsection
Consideration of Alternative Solutions
\end_layout

\begin_layout Itemize
I could use an alternative language such as Java as it is in common use,
 installed on almost all PCs and is cross platform.
 This would fit my specification as the language is compiled, making it
 run more effectively on low-end computers.
 I am also familliar with the language and how to create games in it, although
 networking is one of the hardest features of Java.
\end_layout

\begin_layout Itemize
I could use a WYSIWYG game creator such as gamemaker as it is simple to
 use and speeds up production significantly.
 It is also easy to learn and has networking extensions to allow for ease
 of creation.
 
\end_layout

\begin_layout Subsection
Justification of Chosen Solution
\end_layout

\begin_layout Standard
I have chosen to use Python with PyGame for the client and pure Python for
 the server, whilst using wxPython for the GUI forms, such as the server
 configuration form.
 This is due to my knowledge of the language and the ease of networks with
 inbuilt modules.
 PyGame also makes game design more intuitive and efficient, making it able
 to run on most any PC.
 wxPython is a cross-platform GUI toolkit that includes a WYSIWYG designer
 and python modules, making the creation of GUI forms simpler.
\end_layout

\begin_layout Section
Design
\end_layout

\begin_layout Standard
In this section I shall outline my proposed system and its components, and
 explain how I shall implement each part of the solution.
\end_layout

\begin_layout Standard
I shall start with an overall system overview, then go into more depth on
 the different parts of the system.
\end_layout

\begin_layout Subsection
Overall System Design
\end_layout

\begin_layout Standard
Client Side
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ClientFlow - MainClient.pdf

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Server Side
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ClientFlow - ServerSide.pdf

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Login Server
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ClientFlow - Login.pdf

\end_inset


\end_layout

\begin_layout Subsection
Description of Modular Structure of System
\end_layout

\begin_layout Standard
Top-down design for the system
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ModularDesign.pdf

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
IPSO Table for the proposed system, server-side:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Inputs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Processes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Username
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sign in player
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Password
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Search for player in database
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tank Choice
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Process the client request
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X position
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Calculate bullet trajectories
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Y position
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Calculate if the bullet penetrates
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hull angle
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Calculate the HP of hit tanks
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Turret angle
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Update all connected players
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bullet creation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Update bullet position
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Client Request
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Calculate angle of bullet impact
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Client connection
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Outputs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Stores
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Client positions
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Client information
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bullet positions
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bullet information
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Client HP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User information (stats)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Client XP and progress
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Network response
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Local server information
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Definition of data requirements
\end_layout

\begin_layout Standard
A table of a database is used to store the details of the users.
 It uses this structure:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
UserID: Integer
\end_layout

\begin_layout Standard
Username: String[20]
\end_layout

\begin_layout Standard
HashedPassword: String[100]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Another table is used to store the user progress on every tank, with the
 following structure:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
UserID: Integer
\end_layout

\begin_layout Standard
PanzerIVProgress: String[30]
\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Standard
ChurchillProgress: String[30]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The various tanks are stored in a third table with this structure:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
TankID: Integer
\end_layout

\begin_layout Standard
Name: String[10]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The stats for these tanks are stored in a final table with structure:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
TankID: Integer
\end_layout

\begin_layout Standard
speed: Float
\end_layout

\begin_layout Standard
hp: Integer
\end_layout

\begin_layout Standard
traverseSpeed: Float
\end_layout

\begin_layout Standard
turretTraverseSpeed: Float
\end_layout

\begin_layout Standard
damage: Integer
\end_layout

\begin_layout Standard
reload: Integer
\end_layout

\begin_layout Standard
armour: Integer
\end_layout

\begin_layout Standard
penetration: Integer
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The user tables will hold approximately 200 records based on the current
 user base of Slick Muffin, my client, and the tank tables will hold around
 20 records.
\end_layout

\begin_layout Subsection
Database Design
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename DatabaseDiag.pdf

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
UserAccounts(
\bar under
UserID
\bar default
, Username, HashedPassword)
\end_layout

\begin_layout Standard
UserProgress(
\bar under
UserID
\bar default
, PanzerIVProgress, ChurchillProgress, (etc) [Tank]Progress)
\end_layout

\begin_layout Standard
Tanks(
\bar under
TankID
\bar default
, Name)
\end_layout

\begin_layout Standard
TankStats(
\bar under
TankID
\bar default
, speed, hp, traverseSpeed, turretTraverseSpeed, damage, reload, armour,
 penetration)
\end_layout

\begin_layout Subsection
Storage
\end_layout

\begin_layout Subsubsection
File Organisation and Processing
\end_layout

\begin_layout Standard
From my data dictionary, my database will likely require less than 5 MiB
 of storage space based on 200 users, although this could scale if the game
 is more popular than expected.
 As such I shall estimate the absolute maximum size to be 10 MiB.
 The game resources (pictures, sound etc.) will take up quite a bit more
 room.
 Going on 20 tanks, I predict the total resources size to be approximately
 30-50 MiB dependant on the quality of sound used.
\end_layout

\begin_layout Standard
An estimate for the final program file size would be around 60 MiB for absolutel
y everything.
\end_layout

\begin_layout Subsubsection
Identification of Storage Media
\end_layout

\begin_layout Standard
My files will be stored on a hard drive, with data written and read in the
 working directory to avoid permission complications with Windows.
 I will use a complete backup on the server side, every day the server is
 online it will be copied to make a new file in the users home directory.
\end_layout

\begin_layout Subsection
Identification of suitable algorithms
\end_layout

\begin_layout Standard
A large part of my game revolves around armour penetration mechanics, I.E
 if the bullet damages the vehicle or not.
 This is largely dependant on the bullet's angle of impact to the surface
 of the tank.
\end_layout

\begin_layout Definition
\begin_inset CommandInset label
LatexCommand label
name "Def2.1"

\end_inset

Henceforth, 
\series bold
A.B 
\series default
shall be used to denote the dot product of vectors a A and B, where the
 dot product is defined as
\end_layout

\begin_layout Definition
\begin_inset Formula 
\[
A.B\:=A_{1}B_{1}+A_{2}B_{2}\:=|A||B|cos\theta
\]

\end_inset


\end_layout

\begin_layout Definition
Where 
\begin_inset Formula $\theta$
\end_inset

 is the angle between the 2 vectors, and |A| is the modulus or length of
 the vector given by:
\end_layout

\begin_layout Definition
\begin_inset Formula 
\[
|A|\:=\sqrt{A_{1}^{2}+A_{2}^{2}}
\]

\end_inset


\end_layout

\begin_layout Definition
Hence:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Definition
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

DotProduct:
\end_layout

\begin_layout Plain Layout

	VecA <- Input VectorA
\end_layout

\begin_layout Plain Layout

	VecB <- Input VectorB
\end_layout

\begin_layout Plain Layout

	xComponent <- VecA.x * VecB.x
\end_layout

\begin_layout Plain Layout

	yComponent <- VecA.y * VecB.y
\end_layout

\begin_layout Plain Layout

	output xComponent + yComponent
\end_layout

\end_inset


\end_layout

\begin_layout Definition
Suppose we have a tank at angle 
\begin_inset Formula $\alpha_{2}$
\end_inset

 and the velocity vector of the bullet hitting it, with the angle of the
 velocity vector 
\begin_inset Formula $\alpha_{1}$
\end_inset

, I.E:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Definition
\begin_inset Graphics
	filename Collision.pdf

\end_inset


\end_layout

\begin_layout Definition
\begin_inset Formula $n$
\end_inset

 is the normal to the surface of impact, and it's angle is dependant on
 the bullet's location.
 
\end_layout

\begin_layout Definition
\begin_inset Graphics
	filename Angular.pdf

\end_inset


\end_layout

\begin_layout Definition
Consider the above diagram, from it we can create an algorithm that will
 return the angle of the normal to the surface.
 From the diagram, it is shown that the angle from the line PQ and the line
 running perpendicular through the tank is 
\begin_inset Formula $180-\theta+\alpha$
\end_inset

 where 
\begin_inset Formula $\theta$
\end_inset

 is the angle of the bullet from the positive x-axis and 
\begin_inset Formula $\alpha$
\end_inset

 is the angle of the tank from the same axis.
\end_layout

\begin_layout Definition
From this we want to find what angle the normal is in reference to the bullet,
 as if it hits the top surface it is at a different angle to if it hits
 the side.
\end_layout

\begin_layout Definition
This angle will differ based on the size of the tank's hit box, so henceforth
 I will use 
\begin_inset Formula $TW$
\end_inset

 to denote tank width and 
\begin_inset Formula $TH$
\end_inset

 to represent tank height, with the horizontal on the above diagram running
 through the 
\begin_inset Formula $TW$
\end_inset

 side.
\end_layout

\begin_layout Definition
We will need to find where the corners of the tank are in order to have
 any reference to the bullet, 
\begin_inset Formula $a$
\end_inset

 will be used below to denote the angle the tank is facing.
\end_layout

\begin_layout Itemize
Corner Z is given by 
\begin_inset Formula $\arctan[(TW/2)/(TH/2)]$
\end_inset

+
\begin_inset Formula $a$
\end_inset


\end_layout

\begin_layout Itemize
Corner Y is given by 
\begin_inset Formula $\arctan[(TH/2)/(TW/2)]$
\end_inset

 +
\begin_inset Formula $a$
\end_inset


\end_layout

\begin_layout Itemize
Corner X is equal to the angle to corner Z + 180
\end_layout

\begin_layout Itemize
Corner W is equal to the angle to corner Y + 180
\end_layout

\begin_layout Standard
So, finally, the angle of the normal is this:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Normal:
\end_layout

\begin_layout Plain Layout

	angleOfTank <- Input Tank.Angle
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	angleOfBullet <- Input Bullet.Angle
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	angleBetween <- 180 - angleOfBullet + angleOfTank
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	toCornerZ <- arctan[(TW/2) / (TH/2)]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	toCornerY <- arctan[(TH/2) / (TW/2)]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	if angleBetween < toCornerZ
\end_layout

\begin_layout Plain Layout

		output angleOfTank
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	else if angleBetween < toCornerY
\end_layout

\begin_layout Plain Layout

		output 90 + angleOfTank
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	else if angleBetween < toCornerZ + 180
\end_layout

\begin_layout Plain Layout

		output 180+ angleOfTank
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	else
\end_layout

\begin_layout Plain Layout

		output 270 + angleOfTank
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Definition
So if we consider finding the general angle of impact, taking into account
 the angle of the normal, we can use the following algorithm:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Definition
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

AngleOfImpact:
\end_layout

\begin_layout Plain Layout

	Bullet <- Input bullet
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	BulletXComp <- Bullet.Velocity * cos(Bullet.angle)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	BulletYComp <- Bullet.Velocity * sin(Bullet.angle)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	BulletVector <- Bullet.Velocity * Bullet.angle
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	NormalLine <- Normal(Input Tank)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	NormalLength <- 2
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	NormalXComp <- NormalLength * cos(NormalLine)
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	NormalYComp <- NormalLength * sin(NormalLine)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Dot <- DotProduct(BulletVector, NormalLine)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	ModA <- sqrt[(BulletXComp^2) + BulletYComp^2)]
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	ModB <- sqrt[(NormalXComp^2) + (NormalYComp^2)]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	CosTheta <- Dot / (ModA * ModB)
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	Output arccos(90 - CosTheta)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Class definitions
\end_layout

\begin_layout Standard
In this section I will use diagrams to explain my planned class structures.
\end_layout

\begin_layout Subsubsection
Sprite Classes
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename spriteClasses.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsubsection
Server Classes
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename serverClasses.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
User Interface Rationale
\end_layout

\begin_layout Standard
For my GUI, I shall be using as simplistic a graphics scheme as possible
 as the client wants the program to run on very low-powered computers and
 a complex GUI could possibly not run as well as intended.
 As such, I shall be using the default graphics scheme of the wx toolkit
 as it is the best optimised.
 I shall use a sans-serif font that can be rendered on all operating systems,
 the font will be Open Sans due to its clarity on smaller displays.
\end_layout

\begin_layout Standard
For multiple choice options I shall use drop-down lists as they save space,
 allowing for more to be on one form.
\end_layout

\begin_layout Standard
The main game shall be in 1024x768 resolution, it is universally supported
 which the client has said is a requirement.
 The other forms shall be no larger then 600x400 to avoid lack of screen
 space if multiple forms need to be displayed at once.
\end_layout

\begin_layout Subsection
UI Sample of Planned Data Capture and Entry Designs 
\end_layout

\begin_layout Standard
The main tank selection window:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename GUIdesign.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Subsection
Description of measures planned for security and integrity of data 
\end_layout

\begin_layout Standard
As this project is network-based, the majority of the errors come from the
 connection between client and server.
 As such user input much be validated to ensure the network connections
 can be carried out without error, and the 
\begin_inset Quotes eld
\end_inset

Server join
\begin_inset Quotes erd
\end_inset

 box will run a check on the input to make sure that there is a server address
 and that this address is reachable.
\end_layout

\begin_layout Standard
Error messages resulting from the connection will look like this:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename HostError.pdf

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ClientError.pdf

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename QuitError.pdf

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename InputError.pdf

\end_inset


\end_layout

\begin_layout Standard
All of these errors are not recoverable directly by the program and will
 put the user back at the main GUI for either the server or the client for
 reconnection or the erronious data to be modified, in the case of the HOST:PORT
 error.
\end_layout

\begin_layout Subsection
Description of measures planned for systems security 
\end_layout

\begin_layout Standard
The client has specified that they would like user accounts, and as such
 these must be secure to avoid tampering.
 The user database will be stored on a central server with passwords hashed
 using SHA-1 which is inaccessable to anyone except for the owner of the
 login server, the client.
 This ensures security of user data and progress whilst providing a central
 data storage location for the program to use.
\end_layout

\begin_layout Standard
Security of client-hacking is carried out through mainly server-side calculation
s, meaning that any modification of local code will not affect the game
 experience for anyone else.
\end_layout

\begin_layout Subsection
Overall Test Strategy
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Series
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Purpose of Test Series
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Population of the GUI - client data and network interfaces.
 (System Testing)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Network connection, do the client and server connect and stay connected?
 (Integration testing)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Database information transfer, does the client recieve the correct information?
 (System Testing)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Physics of bullets - do armour penetration calculations work? (White box
 testing) 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Client draws the game correctly - do the graphics appear the same on all
 clients? (System testing)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
System Maintainance Document
\end_layout

\begin_layout Standard
In this section I will overview how my system works, first generally, then
 per-algorithm.
\end_layout

\begin_layout Subsection
System Overview
\end_layout

\begin_layout Standard
Armoured Warfare Simulator 2014 is an online multiplayer game that takes
 simple shooting mechanics and turns them into a strategic game of angles.
 It is run over a peer-to-peer network with anyone able to host a server
 and start playing with their accounts which are handled on a unified login
 server, keeping track of progress on each account.
\end_layout

\begin_layout Standard
I have designed the system to only have trivial tasks for the end-user,
 as this allows anyone to use the system.
 The only non-trivial task in my program is the 
\begin_inset Quotes eld
\end_inset

updateAllSettings.py
\begin_inset Quotes erd
\end_inset

 script for moving login server location.
 The client/server settings can be updated by entering the new login server
 IP address (string) and the port (integer) into the terminal.
 
\end_layout

\begin_layout Standard
The data in my system is stored in 2 sqlite3 databases, one is clientside
 and holds the base tank statistics and the other is serverside, holding
 all user information and progress made.
\end_layout

\begin_layout Subsection
Sample algorithms
\end_layout

\begin_layout Subsubsection
Angle of Intersection
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def getAngleOfIntersection(vecA, vecB):
\end_layout

\begin_layout Plain Layout

    """a dot b / mag(a) mag(b)"""
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        # Set numerator and denom
\end_layout

\begin_layout Plain Layout

        num = vecA.dotProduct(vecB) 
\end_layout

\begin_layout Plain Layout

        denom = vecA.getMagnitude() * vecB.getMagnitude()
\end_layout

\begin_layout Plain Layout

        # Angle is cos-1(A,B / |A||B|)
\end_layout

\begin_layout Plain Layout

        ang = math.degrees(math.acos(num / denom))
\end_layout

\begin_layout Plain Layout

        return ang
\end_layout

\begin_layout Plain Layout

    except Exception as ex:
\end_layout

\begin_layout Plain Layout

        print "Exception in getangleofintersection: " + str(ex)
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Line by line explanation of the algorithm
\end_layout

\begin_layout Standard
1.
 Define algorithm getAngleOfIntersection, taking parameters vector A and
 vector B
\end_layout

\begin_layout Standard
2.
 The documentation for the algorithm, describes the use.
\end_layout

\begin_layout Standard
3.
 Try the below code and check for errors
\end_layout

\begin_layout Standard
4.
 Set num to be the dot product of vector A and vector B (See 
\begin_inset CommandInset ref
LatexCommand ref
reference "Def2.1"

\end_inset

)
\end_layout

\begin_layout Standard
5.
 Set denom to be the magnitude of A multiplied by the magnitude of B
\end_layout

\begin_layout Standard
6.
 Comment explaining that the angle is the inverse cosine of num/denom
\end_layout

\begin_layout Standard
7.
 Calculate the angle of intersection
\end_layout

\begin_layout Standard
8.
 Return the result.
\end_layout

\begin_layout Subsubsection
Login Procedure
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def login(self, dat):     
\end_layout

\begin_layout Plain Layout

	"""Compare the users credentials to the database and login if they match"""
     
\end_layout

\begin_layout Plain Layout

	#Check if these credentials are in the database     
\end_layout

\begin_layout Plain Layout

	if len(LogServer.cur.execute("""SELECT  UserInfo.UserName FROM UserInfo  
                                     						   INNER JOIN UserPass ON UserInfo.Use
rId=UserPass.UserId                                                     
 WHERE UserInfo.Username=? AND UserPass.HashPass=?""", dat).fetchall()) > 0:
      	userId = LogServer.cur.execute("SELECT UserId FROM UserInfo 
\end_layout

\begin_layout Plain Layout

									  WHERE Username = ?;", [dat[0]]).fetchone()[0]         
\end_layout

\begin_layout Plain Layout

       print "ID LOGGING IN: " + str(userId)         
\end_layout

\begin_layout Plain Layout

      a = (LogServer.cur.execute("""SELECT UserInfo.Username, UserProgress.*,
 UserOwned.* From UserInfo                                      INNER JOIN
 UserProgress, UserOwned 
\end_layout

\begin_layout Plain Layout

                                ON UserInfo.UserId = UserProgress.UserId 
                                                                    AND
 UserInfo.UserId = UserOwned.UserId 
\end_layout

\begin_layout Plain Layout

              				  WHERE UserInfo.Username = ?;""", [dat[0]]).fetchone())
  
\end_layout

\begin_layout Plain Layout

      self.request.sendall(pickle.dumps(a))     
\end_layout

\begin_layout Plain Layout

   else:         
\end_layout

\begin_layout Plain Layout

      print "Login failed"         
\end_layout

\begin_layout Plain Layout

      self.request.sendall(pickle.dumps("LoginFailure"))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
1.
 Define a new function, login that takes argument dat
\end_layout

\begin_layout Standard
2.
 Documentation string
\end_layout

\begin_layout Standard
3.
 Comment
\end_layout

\begin_layout Standard
4.
 Query the database for matching credentials
\end_layout

\begin_layout Standard
5.
 Set userId as the database stored unique identifier associated to the username
\end_layout

\begin_layout Standard
6.
 Print a message logging that a login attempt has been succesful
\end_layout

\begin_layout Standard
7.
 Set a as the database stored info for the user's progress
\end_layout

\begin_layout Standard
8.
 Send the user progress back to the client
\end_layout

\begin_layout Standard
9.
 If there are no matching credentials:
\end_layout

\begin_layout Standard
10.
 Log that a failed login attempt has been made
\end_layout

\begin_layout Standard
11.
 Tell the client that login was unsuccessful.
\end_layout

\begin_layout Subsubsection
Get rebound angle
\end_layout

\begin_layout Standard
This is an excerpt from get() in server.py
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#If bullets don't pen, they should rebound
\end_layout

\begin_layout Plain Layout

if len(req[4]) > 0:
\end_layout

\begin_layout Plain Layout

	for bid in req[4]:
\end_layout

\begin_layout Plain Layout

		id = bid[0]
\end_layout

\begin_layout Plain Layout

		angleOfImpact = bid[1]
\end_layout

\begin_layout Plain Layout

		angleOfNormal = bid[2]
\end_layout

\begin_layout Plain Layout

		angleOfBullet = bid[11]
\end_layout

\begin_layout Plain Layout

		anglePointingAway=(angleOfBullet + 180) % 360
\end_layout

\begin_layout Plain Layout

		angleToNormal = math.fabs((angleOfNormal - anglePointingAway) % 360)
\end_layout

\begin_layout Plain Layout

		newAngle = (anglePointingAway + (2 * angleToNormal)) % 360
\end_layout

\begin_layout Plain Layout

		for b in TankServer.Bullets:
\end_layout

\begin_layout Plain Layout

			if b.bulletID == id:
\end_layout

\begin_layout Plain Layout

				toEdit = b
\end_layout

\begin_layout Plain Layout

				toEdit.angle = newAngle
\end_layout

\end_inset


\end_layout

\begin_layout Standard
1.
 Comment for documentation
\end_layout

\begin_layout Standard
2.
 If req[4] (list of bullets the client has said should rebound) has elements:
\end_layout

\begin_layout Standard
3.
 the bullet identifier is stored to ID
\end_layout

\begin_layout Standard
4.
 The client calculated angle of impact is stored
\end_layout

\begin_layout Standard
5.
 The client's normal angle is stored
\end_layout

\begin_layout Standard
6.
 The angle the bullet is pointing is stored
\end_layout

\begin_layout Standard
7.
 For calculations, we store the opposite angle of the bullet, i.e.
 it's angle - 180
\end_layout

\begin_layout Standard
8.
 We calculate the absolute angle from the normal to the angle of the bullet
\end_layout

\begin_layout Standard
9.
 We use this calculated difference to find the new angle of the rebounded
 bullet
\end_layout

\begin_layout Standard
10.
 Iterate through the bullet array
\end_layout

\begin_layout Standard
11.
 If we've found the right one, do something
\end_layout

\begin_layout Standard
12.
 Save the needed bullet entity
\end_layout

\begin_layout Standard
13.
 Change the angle of the bullet.
\end_layout

\begin_layout Subsubsection
Map Generation
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

def generateMap(width, height):
\end_layout

\begin_layout Plain Layout

	"""Generate an array that represent a map"""
\end_layout

\begin_layout Plain Layout

	#Split the screen into 50px blocks
\end_layout

\begin_layout Plain Layout

	toplefts_x = [x for x in range(0, width + 1, 100)]
\end_layout

\begin_layout Plain Layout

	toplefts_y = [x for x in range(150, (height + 1) - 150, 100)]
\end_layout

\begin_layout Plain Layout

	numX = len(toplefts_x)
\end_layout

\begin_layout Plain Layout

	numY = len(toplefts_y)
\end_layout

\begin_layout Plain Layout

	#Initialise map array
\end_layout

\begin_layout Plain Layout

	Map = []
\end_layout

\begin_layout Plain Layout

    #We want to have some buildings here and there
\end_layout

\begin_layout Plain Layout

    #But we cannot put them over the tanks
\end_layout

\begin_layout Plain Layout

	#Tanks spawn in the top and bottom, y=100 and y=700
\end_layout

\begin_layout Plain Layout

	#So we cut out ranges 0>y>150 and height-150 > y > height
\end_layout

\begin_layout Plain Layout

    #We now want a small chance for a building to gen, and perhaps a tiny
 chance of a 2x2
\end_layout

\begin_layout Plain Layout

	possibleBlocks = len(toplefts_x)
\end_layout

\begin_layout Plain Layout

	for i in range(possibleBlocks):
\end_layout

\begin_layout Plain Layout

		#Random number generator picks the fill for the block
\end_layout

\begin_layout Plain Layout

		toSpawn = random.randint(0, 60)
\end_layout

\begin_layout Plain Layout

		#Add a single building
\end_layout

\begin_layout Plain Layout

		if toSpawn > 50:
\end_layout

\begin_layout Plain Layout

			xPos = i % numX
\end_layout

\begin_layout Plain Layout

			yPos = i % numY
\end_layout

\begin_layout Plain Layout

			Map.append([xPos, yPos, 1])
\end_layout

\begin_layout Plain Layout

		#Add a 2x2
\end_layout

\begin_layout Plain Layout

		elif toSpawn == 30:
\end_layout

\begin_layout Plain Layout

			xPos = i % numX
\end_layout

\begin_layout Plain Layout

			yPos = i % numY
\end_layout

\begin_layout Plain Layout

			Map.append([xPos, yPos, 2])
\end_layout

\begin_layout Plain Layout

	return Map
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This procedure is pretty well documented, so I'll spare you the line-by-line
 explanation.
 I will expand on these lines though:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

xPos = i % numX
\end_layout

\begin_layout Plain Layout

yPos = i % numY
\end_layout

\end_inset


\end_layout

\begin_layout Standard
These find the x and y block positions from the current iteration in order
 to allow the client recreate the map after transmission.
\end_layout

\begin_layout Subsubsection
Modified Game Rendering Engine
\end_layout

\begin_layout Standard
In a fast-paced game, pygame with a livewires wrapper just doesn't cut it;
 It's not meant for fast rendering and hence I had to make it comply.
 After digging around the source I found the rendering method.
 These are the changes I made.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

while not self._exit:
\end_layout

\begin_layout Plain Layout

	self._wait_frame()
\end_layout

\begin_layout Plain Layout

    for object in self._objects:
\end_layout

\begin_layout Plain Layout

	object._erase()
\end_layout

\begin_layout Plain Layout

    self._display.fill(color.white)
\end_layout

\begin_layout Plain Layout

	self._display.blit(self._background, (0, 0))
\end_layout

\begin_layout Plain Layout

	# Take a copy of the _objects list as it may get changed in place.
\end_layout

\begin_layout Plain Layout

	for object in self._objects[:]:
\end_layout

\begin_layout Plain Layout

	if object._tickable:
\end_layout

\begin_layout Plain Layout

		object._tick()
\end_layout

\begin_layout Plain Layout

        self.tick()
\end_layout

\begin_layout Plain Layout

    for object in self._objects:
\end_layout

\begin_layout Plain Layout

        object._draw()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The important lines here are those that reference self._display.
 I modified this engine to fill the screen with colour between ticks to
 stop the sprites flickering.
 The first line fills the screen and the second draws the current background
 on the screen.
\end_layout

\begin_layout Subsubsection
Network Communication Method
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

def send(self, message):
\end_layout

\begin_layout Plain Layout

        """Send a specified message to the server (pickled)"""
\end_layout

\begin_layout Plain Layout

        #Dial the 9th circle of hell and ask for lucifer to process our
 request
\end_layout

\begin_layout Plain Layout

		self.toSend = pickle.dumps(message)
\end_layout

\begin_layout Plain Layout

		try:
\end_layout

\begin_layout Plain Layout

			self.sock.sendall(self.toSend)
\end_layout

\begin_layout Plain Layout

			self.recieved = pickle.loads(self.sock.recv(2048))
\end_layout

\begin_layout Plain Layout

			if self.last != self.recieved:
\end_layout

\begin_layout Plain Layout

				self.last = self.recieved
\end_layout

\begin_layout Plain Layout

			else:
\end_layout

\begin_layout Plain Layout

				self.lastRetries += 1
\end_layout

\begin_layout Plain Layout

				if self.lastRetries == 1000:
\end_layout

\begin_layout Plain Layout

					raise HostDisconnectedException()
\end_layout

\begin_layout Plain Layout

			self.retries = 0
\end_layout

\begin_layout Plain Layout

    	except Exception as e:
\end_layout

\begin_layout Plain Layout

			del self.sock
\end_layout

\begin_layout Plain Layout

			self.sock = socket.create_connection((self.ip, self.port))
\end_layout

\begin_layout Plain Layout

			self.retries += 1
\end_layout

\begin_layout Plain Layout

            if self.retries == 5:
\end_layout

\begin_layout Plain Layout

                raise HostDisconnectedException()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
1.
 Define a new method send that takes argument message
\end_layout

\begin_layout Standard
2.
 Documentation string
\end_layout

\begin_layout Standard
3.
 Nothing to see here, moving on.
\end_layout

\begin_layout Standard
4.
 make a pickle (binary format) object from the specified message.
\end_layout

\begin_layout Standard
5.
 Try to do the following:
\end_layout

\begin_layout Standard
6.
 Send the pickle object over the network
\end_layout

\begin_layout Standard
7.
 Try to decode the server's response which is read as a maximum of 2048
 bytes
\end_layout

\begin_layout Standard
8.
 Check if the recieved data is different from the last recieved
\end_layout

\begin_layout Standard
9.
 If it is different, store this new data for furture reference
\end_layout

\begin_layout Standard
10.
 If it isn't different, do the following
\end_layout

\begin_layout Standard
11.
 Increment 
\begin_inset Quotes eld
\end_inset

retries
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
12.
 After a set number of retries...
\end_layout

\begin_layout Standard
13.
 Timeout.
\end_layout

\begin_layout Standard
14.
 If the data is different, reset retries
\end_layout

\begin_layout Standard
15.
 If there is an error:
\end_layout

\begin_layout Standard
16.
 Delete the connection object
\end_layout

\begin_layout Standard
17.
 Try to reconnect
\end_layout

\begin_layout Standard
18.
 Add 1 to retries
\end_layout

\begin_layout Standard
19.
 If 5 connections fail:
\end_layout

\begin_layout Standard
20.
 Timeout.
\end_layout

\begin_layout Subsubsection
Effective Armour Calculations
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def doesPenetrate(self, angle, bullet):
\end_layout

\begin_layout Plain Layout

	"""Returns true if the bullet has enough penetration, false otherwise"""
\end_layout

\begin_layout Plain Layout

	#This is the critical angle at which any bullet will auto-bounce
\end_layout

\begin_layout Plain Layout

	if angle < 50 or angle > 180:
\end_layout

\begin_layout Plain Layout

		return False
\end_layout

\begin_layout Plain Layout

   #Calculate effective armour via trigonometry.
\end_layout

\begin_layout Plain Layout

	armourValue = self.client.armour
\end_layout

\begin_layout Plain Layout

	effectiveArmour = armourValue / math.sin(math.radians(angle))
\end_layout

\begin_layout Plain Layout

	#Check if the bullet has enough penetration and return
\end_layout

\begin_layout Plain Layout

	if bullet.penetration > effectiveArmour:
\end_layout

\begin_layout Plain Layout

		self.damageDone.append([bullet.damage, bullet.ownerId])
\end_layout

\begin_layout Plain Layout

		return True
\end_layout

\begin_layout Plain Layout

	else:
\end_layout

\begin_layout Plain Layout

		return False
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Again, this function is pretty well commented, but I shall expand.
\end_layout

\begin_layout Standard
1.
 Define a new function, doesPenetrate that takes arguments angle and a bullet
 object
\end_layout

\begin_layout Standard
2.
 Documentation string
\end_layout

\begin_layout Standard
3.
 Comment
\end_layout

\begin_layout Standard
4.
 Check whether the bullet is at an autobounce angle
\end_layout

\begin_layout Standard
5.
 If it is at autobounce, say that the bullet does not penetrate
\end_layout

\begin_layout Standard
6.
 If it is not autobounce, retrieve the client's armour thickness
\end_layout

\begin_layout Standard
7.
 Find the actual armour thickness at the specified angle
\end_layout

\begin_layout Standard
8.
 Check if the bullet is able to penetrate
\end_layout

\begin_layout Standard
9.
 If it does, put it in an array to let the server know, and say 
\begin_inset Quotes eld
\end_inset

yes, it penetrates
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
10.
 If not, return false
\end_layout

\begin_layout Subsection
Procedure and Variable lists
\end_layout

\begin_layout Standard
In this section I will list ever function and variable used throughout my
 project.
\end_layout

\begin_layout Subsubsection
Clientside procedure list
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="83" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Procedure
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vector.update
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Update the vector with new co-ordinates
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vector.useAngle
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Create a new vector using a magnitude and angle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vector.add
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return the resultant vector of this vector added to another
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vector.getMagnitude
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the absolute length of the vector
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vector.getDx
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gets the X length of the vector
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vector.getDy
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gets the Y length of the vector
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vector.dotProduct
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the scalar product of this and another vector
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vector.collides
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Finds whether this vector collides with another
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
getAngleOfIntersection
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the acute angle of vector intersection
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
getPoints
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns a list of pixels along a given vector
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
intersect
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Checks whether 2 vectors collide or not
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
getConfiguration
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reads the config file and returns the option required
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Login.createAccount
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Asks the login server to add the account
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Login.process
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Processes the server response
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Login.readConfig
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reads the configuration file for ip address and port
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Login.suchSending
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Send the login credentials to the server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Login.soClear
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clear the username/password boxes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Login.doCreate
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Start the account creation window
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Login.loginComplete
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Server has logged us in, proceed to next screen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
startLogin
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The main method for starting the login GUI
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YesNo
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Brings up a simple yes or no dialog
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Info
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Brings up an information box
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Warn
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Brings up a warning box
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
netComms.send
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Send a specified message to the server (pickled)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
netComms.close
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Close the active connection
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BuyTank.populate
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Put the tank names into the list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BuyTank.changeTankPrice
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Show the correct price of the selected tank
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BuyTank.buyTank
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Button press event to send the command to buy the tank
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BuyTank.cancel
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Close the GUI
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UpgradeTank.populateBoxes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Put the selected tank stats into the boxes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UpgradeTank.upHP
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Button press event to upgrade HP
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UpgradeTank.upDam
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Button press event to upgrade damage
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UpgradeTank.upArm
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Button press event to upgrade armour
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UpgradeTank.upPen
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Button press event to upgrade penetration
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UpgradeTank.upHTr
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Button press event to upgrade hull traverse
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UpgradeTank.upTTr
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Button press event to upgrade turret traverse
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UpgradeTank.upRel
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Button press event to upgrade reload
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UpgradeTank.upSp
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Button press event to upgrade speed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UpgradeTank.convertToString
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Convert a list of stats into a string
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UpgradeTank.getNewStats
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Put the upgraded stats into a server-readable format
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UpgradeTank.confirmEdit
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ask the user if they are really sure they want to upgrade
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UpgradeTank.cancelEdit
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Close the GUI without changing anything
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UpgradeTank.toInt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Convert a list of floats to ints
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SelectATank.battleThread
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set up the client to launch the game engine and then run the game
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SelectATank.setHost
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Take the user input of the host and store it
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SelectATank.getStats
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Get the users stats for that specific tank
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SelectATank.doStats
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Update the text box with the tanks stats
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SelectATank.getAllTanks
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return all possible tanks
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SelectATank.doBuy
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Open the tank purchase GUI
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SelectATank.getAllXP
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Get the users progress on all tanks from the server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SelectATank.getXP
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Get the users progress on one specific tank from the server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SelectATank.doUpgrade
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Open the upgrade GUI
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SelectATank.refresh
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reloads all components
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
main
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Main method to open the SelectATank GUI
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tank.updatePos
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Update the tanks position based on server info
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tank.update
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A method to update the tank
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bullet.getBulletVector
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the ballistic vector for this bullet
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bullet.getx1x2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the endpoints of the vector
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bullet.returnValues
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the attributes of the bullet
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LocalTank.update
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A method to update the tank
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LocalTank.getBulletValues
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the values of the bullet to spawn
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LocalTank.getBulletOffsetX
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Get the offset for the bullet, making it spawn at the gun muzzle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LocalTank.getBulletOffsetY
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Get the offset for the bullet, making it spawn at the gun muzzle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Building.setBounds
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sets the bounding vectors of the building
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Building.isCollided
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Checks if a vector collides with this building
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameController.setupGame
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A method to load in all resources and set the game in motion
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameController.drawMap
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Read in the map and render buildings
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameController.countingDown
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Start the pre-match countdown on-screen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameController.close
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Close the game
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameController.update
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The main gameloop
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameController.doUpdating
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
This occurs on every gameloop, updates the local client and sends data to
 server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameController.drawVectors
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
For debugging, draws all vectors on screen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameController.setBuildingVectors
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
resets all building bounding vectors
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameController.doBulletSpawnDespawn
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Main method to make the local bullets equal the server bullets
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameController.checkBulletCollisions
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A general bullet collision method to check vector intersection
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameController.vectorsIntersect
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Checks if 2 vectors intersect, calls game_calcs
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameController.setVectors
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
This sets vectors around the edge of the image
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameController.doesPenetrate
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns true if the bullet has enough penetration, false otherwise
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameController.resyncClient
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reload all serverside variables
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameController.checkBuildings
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Check if the tank is collided with any buildings
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameController.endGame
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Close the server connection and return to the tank selection screen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mainGame
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Called to run the client, requires data for the tank and the host/port
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Serverside procedure list
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="51" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Procedure
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
getDeltaT
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the difference between 2 time.time instances
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
getPoints
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns a list of pixels on the line joining (x1,y1) to (x2, y2)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LoginServer.handle
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Handle the client request
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LoginServer.buy
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dd a tank to the users account
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LoginServer.allXP
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the amount of XP the user has earned on each tank
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LoginServer.costs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return the amount that each tank costs
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LoginServer.login
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Compare the users credentials to the database and login if they match
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LoginServer.create
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Add a new user to the database
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LoginServer.get
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Get the stats on the tank requested by the user
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LoginServer.convertToString
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Self-explanatory, converts a list to a string
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LoginServer.createNewAccount
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
insert all data into the database
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LoginServer.xp
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gets the users XP
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LoginServer.makeListSane
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Make the list how I need it - all strings
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LoginServer.openCloseConn
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Close and reopen the database connection
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LoginServer.update
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Update all of the data in the database
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LoginServer.owned
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return the tanks owned by the user
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
start
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Start the login server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
main
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Run game server from another file
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
superMain
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Run game server without checking the login server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
generateMap
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Generate an array that represent a map
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Player.returnValues
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return player values in a list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Player.set
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set all the players data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bullet.update
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Update the bullet based on a time difference
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameServer.ServerUpdatingThread
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A thread to keep the server up-to-date
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameServer.finish
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
End the request process
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameServer.getVictor
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Count the players and see who won the game
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameServer.stringRequest
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Takes a string and outputs accordingly
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameServer.listRequest
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Redirect method for requests in the form of a list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameServer.isEndOfGame
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Looks at all players and decides if the game is over
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameServer.convertToList
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
This will take Player objects and shove the x,y,angle,turret angle data
 into a list"
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameServer.doHandshake
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Add the new player to arrays and get going
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameServer.countdown
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Create a 30 second timer at the start of the game
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameServer.convertToListHandshake
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initial return value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameServer.get
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Acts as a 'getter', returns every other player's information and sends it
 in a handy list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameServer.getBuildingRanges
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gets the pixel ranges of the buildings for collision testing
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameServer.isCollidedWithMap
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Checks if the bullet is collided with any buildings
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GameServer.endgame
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Closes the server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ServerSetupForm.stopEvent
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
In case the user wants to cancel the startup at the last moment
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ServerSetupForm.loginThread
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A thread to start the login server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ServerSetupForm.getOperatingSystem
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gets the OS of the server machine to bind to IP address
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ServerSetupForm.changeInterface
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gets the IP of interface (i.e.
 wlan, ethernet etc)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ServerSetupForm.startServer
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Button press event to start the server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ServerSetupForm.stopServer
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Button press event to stop the server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ServerSetupForm.beginTheSatanHailing
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Begin to handle requests
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ServerSetupForm.watchtheServerIntently
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A thread to say if the server should stop
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ServerSetupForm.updateTheBulletsThread
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A thread that will update all bullets every 0.05 seconds
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ServerSetupForm.startServerThread
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A thread to handle the server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ServerSetupForm.filler
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Confirm the start of the server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ServerSetupForm.processEndOfGame
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Take the end of game results and process them, send to main login server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
main
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Main method to run the server
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Clientside Variable list
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="70" columns="3">
<features rotate="true" tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Variable name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Main Data Type
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
message
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
What to send to the server
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pickle object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A sprite's x position
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A sprite's y position
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
One end of a vector
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
One end of a vector
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The other end of a vector
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The other end of a vector
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
angle
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The angle of a vector
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
float
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
myVectors
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The vectors surrounding an image
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parent
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The parent window for the GUI
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Form
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ipAddr
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The IP address of the server
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
port
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The port of the server
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
conn
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The connection to the server
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Connection object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
toSend
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The message to pass to netComms
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
recieved
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The response from the server
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pickle object/String
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
alltanks
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Every tank in game
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
xp
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The amount of XP on a specific tank
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
owner
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Who owns the opened form
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Form
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hp
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The HP of the tank
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
damage
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The damage of the tank
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
penetration
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The penetration of the tanks gun
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reload
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The time for the gun to reload
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
float
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Armour
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The amount of armour the tank has
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HullTraverse
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
How fast the tank turns
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
float
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TurretTraverse
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
How fast the turret turns
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
float
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Speed
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
How fast the tank goes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
float
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
owned
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The tanks the user owns
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
username
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The username of the current player
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
team
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The team the user is fighting for
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
userTag
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The username floating above the tank
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
text object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nametag
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The tank name floating above the tank
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
text object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
maxHP
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The maximum health of the tank
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
state
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Is the tank damaged?
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
image
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The tank's sprite
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
image
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ownerID
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Who fired the bullet?
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bulletID
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unique ID for the bullet
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
damage
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
how much damage will the bullet do?
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ded
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Do we update the bullet?
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Boolean
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
newBullets
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bullets to spawn in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fire
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the sound effect of firing
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sound
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
idle
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the engine sound
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sound
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reload_counter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tells the user their reload
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Text object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
last_x
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Holds the last x value for the tank
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
last_y
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Holds the last y value for the tank 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
last_a
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Holds the last angle of the tank 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
connection
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The connection to the server
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
netComms object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stats
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The Statistics of the tank 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
moskau
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Song.
 
\begin_inset Quotes eld
\end_inset

Moskau
\begin_inset Quotes erd
\end_inset

 by Dchinghis Khan
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sound
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
loadingSongs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resources of songs to play whilst loading
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
battleSongs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resources of sounds to play in battle
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
despawnToServer
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bullets to despawn
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
damageDone
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The amount of damage caused by the player
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bg
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The background image
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
image
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
serverPlayers
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The players as reported by the server
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
countdown
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The amount of time until game start
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
timerTop
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The top of the countdown timer
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
text object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
timerMain
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The main section of the countdown timer
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
text object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
map
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
An array representing the map
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
clientTurret
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The client's turret
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
turret object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
client 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The client's tank
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tank object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
countdownThread
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A thread that counts down
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Thread
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
serverInstances
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Non-local players
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
serverInstancesTurret
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Non-local turrets
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
toDespawn
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bullets that need to be despawned
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
toRebound
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bullets that need to rebound
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
buildings
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A collection of all buildings
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
recvPlayers
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The recieved information about players
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
recvBullets
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The recieved information about bullets
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vectors
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The vectors bounding the local tank
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Serverside variable list
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="23" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Variable name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Main Data Type
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
message
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
What to send to the client
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
pickle object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The X position of an object
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The Y position of an object
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The name of the user's tank 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
username
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The user's username
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
id
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The user's ID
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hp
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The HP of the tank 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
isOnWinning
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Is the user on the winning team?
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Boolean
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
xpGained
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The amount of XP earnt from the game
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
damage
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The amount of damage done by the user 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ownerID
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The ID of the bullet owner
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
kills
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The number of kills by the user
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
angle
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The angle of the user's tank 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
turret_angle
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The angle of the user's turret
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ded
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Is the bullet 
\begin_inset Quotes eld
\end_inset

alive
\begin_inset Quotes erd
\end_inset

?
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
boolean
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
penetration
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The level of penetration the bullet has
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
cur 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the database cursor
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
cursor object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
data 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The data to push to the database
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
newID
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The ID of a new user account
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
countdownThread
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A thread to keep track of countdown
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Thread
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
opSys
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The operating system the server is running on
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
toClose
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shall we close the server?
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Boolean
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Annotated Samples of GUI & System Outputs
\end_layout

\begin_layout Subsubsection
Tank selection screen
\end_layout

\begin_layout Standard
This screen is for selecting a tank and giving server information, it also
 shows the stats for the currently selected tank.
 When the 
\begin_inset Quotes eld
\end_inset

TankBox
\begin_inset Quotes erd
\end_inset

 is clicked, it will give a list of available tanks.
 The 
\begin_inset Quotes eld
\end_inset

Upgrade Tank
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

Buy a tank
\begin_inset Quotes erd
\end_inset

 open the respective screens.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename GUIOutput.png

\end_inset


\end_layout

\begin_layout Subsubsection
Tank upgrade screen
\end_layout

\begin_layout Standard
This screen on the clientside allows for the upgrading of tank stats.
 The text boxes are read-only.
 If 
\begin_inset Quotes eld
\end_inset

Upgrade
\begin_inset Quotes erd
\end_inset

 is clicked on any row, the relavent stat will update, but nothing will
 be sent to the server until 
\begin_inset Quotes eld
\end_inset

Confirm
\begin_inset Quotes erd
\end_inset

 is clicked.
 If 
\begin_inset Quotes eld
\end_inset

Cancel
\begin_inset Quotes erd
\end_inset

 is clicked, the box will close to leave the main tank selection screen.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename tankupgrade.png

\end_inset


\end_layout

\begin_layout Subsubsection
Server setup screen
\end_layout

\begin_layout Standard
This screen is on the serverside, it allows for the server operator to select
 an interface and port on which to run the game server.
 If the InterfaceBox is clicked, a list of currently attached interfaces
 (Wlan, Ethernet, etc) appear and the user may pick.
 The port box allows for any free port to be entered.
 The server will start when 
\begin_inset Quotes eld
\end_inset

Start Server is clicked
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename serverSetup.png

\end_inset


\end_layout

\begin_layout Subsubsection
General Error Message
\end_layout

\begin_layout Standard
This box appears when you attempt to launch the game without either a.
 Selecting a tank to use or b.
 Don't enter a server address.
 The box will close when 
\begin_inset Quotes eld
\end_inset

Ok
\begin_inset Quotes erd
\end_inset

 is clicked.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename warningMessage.png

\end_inset


\end_layout

\begin_layout Subsubsection
Main Game Screen
\end_layout

\begin_layout Standard
This is the main screen of the game.
 It is controlled using the WASD keys for hull traverse and the arrow keys
 to traverse the turret.
 The username and tank name along with the tank HP are displayed above each
 respective sprite, and the reload timer is situated in the top left of
 the screen.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename tankgame.png

\end_inset


\end_layout

\begin_layout Section
Testing
\end_layout

\begin_layout Subsection
Test Data
\end_layout

\begin_layout Subsubsection
Login Server Test
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Username
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Password
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reason for Choice
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
testaccount
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
password
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Normal Data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
testaccount
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
pasword
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erroneous Data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
testaccount
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[No data]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erroneous Data (Incorrect login)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[No data]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
password
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erroneous Data (Incorrect login)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Tank Selection Screen
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tank Selection
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reason For Choice
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Panzer IV
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Normal Data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M4 Sherman
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Normal Data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[No selection]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erroneous Data
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Tank Purchase Screen
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tank To Buy
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
XP to spend
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reason For Choice
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maus
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Normal Data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maus
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erroneous Data (Not enough XP)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maus
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
300
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Boundary Data (Exact price)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Join Game Screen
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IP:Port input
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reason for Choice
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
localhost:9999
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Normal Data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
localhost:9998
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erroneous Data (no server on port)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[No data]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erroneous Data 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
localhost
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erroneous Data (no port)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Bullet Calculations
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bullet Angle
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Armour Penetration
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Armour Thickness
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reason For Choices
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
90
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
50
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Normal Penetration
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
90
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Boundary Condition
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
45
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Normal Ricochet
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
45
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
150
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Normal Penetration
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
200000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Normal Ricochet
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Test Plan
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="16" columns="6">
<features rotate="true" tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Purpose
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test Data
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Expected Result
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pass/Fail
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test login server
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Give normal data
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
testaccount/password
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

login succesful
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pass
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test login server
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Give Incorrect Data
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
testacount/password
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

login failed
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pass
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test Tank Selection
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Select a tank
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Panzer IV
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stats appear
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pass
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test Tank Selection
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No tank selected
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[No data]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

Please select a tank
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pass
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test Tank purchase
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Have enough XP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maus/5000XP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

Tank purchased
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pass
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test Tank Purchase
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Just enough XP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maus/300XP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

Tank purchased
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pass
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test Tank Purchase
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Not enough XP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maus/0XP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

You need more XP
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pass
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test Server Connection
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Give correct Host/Port
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
localhost:9999
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Connection
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pass
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test Server Connection
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Give incorrect port
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
localhost:9998
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error window appears
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fail
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test Server Connection
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Give no information
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[blank]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error window appears
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pass
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test Bullet Calculation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Give penetrating values
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100/90/50
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Penetration
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pass
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test Bullet Calculation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Give boundary condition
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100/90/100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Penetration
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fail
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test Bullet Calculation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Give angled ricochet
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100/45/100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bounce
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pass
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test Bullet Calculation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Give angled penetration
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
150/45/100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Penetration
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pass
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test Bullet Calculation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Give autobounce
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20000/10/1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bounce
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pass
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Evidence
\end_layout

\begin_layout Subsubsection
Test 1
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename loginSuccesful.png

\end_inset


\end_layout

\begin_layout Subsubsection
Test 2 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename loginFailed.png

\end_inset


\end_layout

\begin_layout Subsubsection
Test 3
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename statsAppear.png

\end_inset


\end_layout

\begin_layout Subsubsection
Test 4
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename noTankSelected.png

\end_inset


\end_layout

\begin_layout Subsubsection
Test 5
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename purchased.png

\end_inset


\end_layout

\begin_layout Subsubsection
Test 6
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename purchasedJustEnough.png

\end_inset


\end_layout

\begin_layout Subsubsection
Test 7
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename purchasedNotEnough.png

\end_inset


\end_layout

\begin_layout Subsubsection
Test 8
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename connectionYes.png

\end_inset


\end_layout

\begin_layout Subsubsection
Test 9
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename connectionWrongPort.png

\end_inset


\end_layout

\begin_layout Subsubsection
Test 10
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename connectionNoPort.png

\end_inset


\end_layout

\begin_layout Subsubsection
Tests 11-15
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename penTests.png

\end_inset


\end_layout

\begin_layout Subsection
Error Log
\end_layout

\begin_layout Subsubsection
Incorrect port given
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ConnectionErrror.png

\end_inset


\end_layout

\begin_layout Standard
This screenshot is the python output if you try and connect where there
 is no server.
\end_layout

\begin_layout Standard
This was an easy one to fix.
 I simply appended this to the game launch method:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

except NoConnectionException:
\end_layout

\begin_layout Plain Layout

	messages.Warn(self.parent, "There is no server on this port, please double
 check and try again.")            self.Show(True)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It works just fine.
\end_layout

\begin_layout Subsubsection
Penetration Boundary Condition
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename penFail.png

\end_inset


\end_layout

\begin_layout Standard
Simple change of boolean conditions here.
\end_layout

\begin_layout Standard
In Client/TankClient.py, line 744 was the culprit.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if bullet.penetration > effectiveArmour:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
was changed to become
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if bullet.penetration >= effectiveArmour:
\end_layout

\end_inset


\end_layout

\begin_layout Section
Evaluation
\end_layout

\begin_layout Subsection
Evaluation Of Original Objectives
\end_layout

\begin_layout Itemize
By deadline day, my game client must be able to communicate across the network
 with low latency.
\end_layout

\begin_layout Standard
I have achieved this by using small amounts of data in my network communications
, using pickle to make the information a binary object that allows for quick
 decoding at the other end.
 This method also compresses the data, speeding up transmission.
 There is no visible connection lag over any of the interfaces whilst using
 a local network.
\end_layout

\begin_layout Itemize
By deadline day, it must also be able to run on a low-power PC at more than
 30 Frames Per Second.
\end_layout

\begin_layout Standard
This has been achieved by using a simple graphics style, with well compressed
 textures; this ensures that the FPS on any computer is set to the target
 of 30 and reaches it without issue.
 I tried not to use for loops in my program too much as these can interfere
 with the game loop and hence the FPS.
\end_layout

\begin_layout Standard
On an intel integrated graphics card (very low power) the game maintains
 30fps constantly.
\end_layout

\begin_layout Itemize
By deadline day, it must also have user accounts with progression.
\end_layout

\begin_layout Standard
This has been implemented in the program.
 As shown above, there is a central login server that handles all use accounts
 and the XP gains that they make.
 Users are able to both buy new tanks and upgrade existing ones, giving
 that element of progression to the game.
\end_layout

\begin_layout Itemize
By deadline day, it must also support up to 8 players.
\end_layout

\begin_layout Standard
I have done this by making the tank sprites the correct size to fit 8 on
 the 1024x768 screen at once, and the main game server can store any number
 of starting locations for tanks although I have set it to 8 for testing
 purposes.
\end_layout

\begin_layout Itemize
By deadline day, it must also be supported on Windows and Linux with less
 than a 5 minute installation time.
\end_layout

\begin_layout Standard
This has not been entirely achieved - the game is indeed supported on GNU/Linux
 and does not require installation, and the game does run on windows but
 only if you have a 2.7 python environment installed.
 This is possible to install within 5 minutes, although it is awkward for
 the user.
 The game is not supported out-of-the-box as the many binary-packagers for
 windows do not seem to like working with my program.
 
\end_layout

\begin_layout Subsection
User Feedback
\end_layout

\begin_layout Section
Appendix A - Program Listing
\end_layout

\begin_layout Subsection
Server Code
\end_layout

\begin_layout Subsubsection
launchLoginServer.py
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#!/usr/bin/env python
\end_layout

\begin_layout Plain Layout

import loginServer
\end_layout

\begin_layout Plain Layout

loginServer.superMain()
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
launchGameServer.py
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#!/usr/bin/env python
\end_layout

\begin_layout Plain Layout

import ServerSetupForm as ssf
\end_layout

\begin_layout Plain Layout

ssf.main() 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
loginServer.py
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#!/usr/bin/env python
\end_layout

\begin_layout Plain Layout

import SocketServer
\end_layout

\begin_layout Plain Layout

import pickle
\end_layout

\begin_layout Plain Layout

import sqlite3
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class LogServer(SocketServer.BaseRequestHandler):
\end_layout

\begin_layout Plain Layout

    """The main login server - handles all user account requests"""
\end_layout

\begin_layout Plain Layout

    conn = sqlite3.Connection("LoginDatabase", check_same_thread=False)
\end_layout

\begin_layout Plain Layout

    cur = conn.cursor()
\end_layout

\begin_layout Plain Layout

    def handle(self):
\end_layout

\begin_layout Plain Layout

	try:
\end_layout

\begin_layout Plain Layout

        	recv = self.request.recv(1024)
\end_layout

\begin_layout Plain Layout

        	#print "Recieved: "+str(recv)
\end_layout

\begin_layout Plain Layout

        	self.data = pickle.loads(recv)
\end_layout

\begin_layout Plain Layout

        	#print "REQUEST: "+str(self.data[0])
\end_layout

\begin_layout Plain Layout

        	if self.data[0] == "LOGIN":
\end_layout

\begin_layout Plain Layout

            		self.login(self.data[1])
\end_layout

\begin_layout Plain Layout

        	elif self.data[0] == "CREATE":
\end_layout

\begin_layout Plain Layout

            		self.create(self.data[1])
\end_layout

\begin_layout Plain Layout

        	elif self.data[0] == "Update":
\end_layout

\begin_layout Plain Layout

            		self.update(self.data[1:])
\end_layout

\begin_layout Plain Layout

        	elif self.data[0] == "GET":
\end_layout

\begin_layout Plain Layout

            		self.get(self.data[1], self.data[2])
\end_layout

\begin_layout Plain Layout

        	elif self.data[0] == "XP":
\end_layout

\begin_layout Plain Layout

            		self.xp(self.data[1], self.data[2])
\end_layout

\begin_layout Plain Layout

        	elif self.data[0] == "OWNED":
\end_layout

\begin_layout Plain Layout

            		self.owned(self.data[1])
\end_layout

\begin_layout Plain Layout

        	elif self.data[0] == "COSTS":
\end_layout

\begin_layout Plain Layout

            		self.costs()
\end_layout

\begin_layout Plain Layout

        	elif self.data[0] == "ALLXP":
\end_layout

\begin_layout Plain Layout

            		self.allXP(self.data[1])
\end_layout

\begin_layout Plain Layout

        	elif self.data[0] == "BUY":
\end_layout

\begin_layout Plain Layout

            		self.buy(self.data[1], self.data[2], self.data[3])
\end_layout

\begin_layout Plain Layout

        	else:
\end_layout

\begin_layout Plain Layout

            		#print str(self.data)
\end_layout

\begin_layout Plain Layout

            		self.request.sendall(pickle.dumps("UnknownRequestError"))
\end_layout

\begin_layout Plain Layout

	except Exception:
\end_layout

\begin_layout Plain Layout

		pass
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def buy(self, name, user, previousTank):
\end_layout

\begin_layout Plain Layout

        """Add a tank to the users account"""
\end_layout

\begin_layout Plain Layout

	id = LogServer.cur.execute("SELECT UserId FROM UserInfo WHERE Username =
 ?", [user]).fetchone()
\end_layout

\begin_layout Plain Layout

        #print "ID: "+str(id)
\end_layout

\begin_layout Plain Layout

        LogServer.cur.execute("UPDATE UserOwned SET "+name+" = 1 WHERE UserId
 = ?", [id[0]])
\end_layout

\begin_layout Plain Layout

        cost = LogServer.cur.execute("SELECT Cost FROM TankPrices WHERE TankName
 = ?", [name]).fetchone()
\end_layout

\begin_layout Plain Layout

        #print "COST: "+str(cost)
\end_layout

\begin_layout Plain Layout

        currentXp = LogServer.cur.execute("SELECT "+previousTank+" FROM UserProgre
ss WHERE UserId = ?", [id[0]]).fetchone()
\end_layout

\begin_layout Plain Layout

        #print "XP: "+str(currentXp)
\end_layout

\begin_layout Plain Layout

        newXp = int(currentXp[0]) - int(cost[0])
\end_layout

\begin_layout Plain Layout

        LogServer.cur.execute("UPDATE UserProgress SET "+previousTank+ " =
 ? WHERE UserId = ?", [newXp, id[0]])
\end_layout

\begin_layout Plain Layout

        LogServer.conn.commit()
\end_layout

\begin_layout Plain Layout

        self.openCloseConn()
\end_layout

\begin_layout Plain Layout

        self.request.sendall(pickle.dumps("DONE"))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def allXP(self, username):
\end_layout

\begin_layout Plain Layout

	"""Returns the amount of XP the user has earned on each tank"""
\end_layout

\begin_layout Plain Layout

        xp = LogServer.cur.execute("SELECT * FROM UserProgress INNER JOIN
 UserInfo ON UserInfo.UserId = UserProgress.UserId WHERE"
\end_layout

\begin_layout Plain Layout

                                   " UserInfo.Username = ?", [username]).fetchone(
)[1:]
\end_layout

\begin_layout Plain Layout

        self.request.sendall(pickle.dumps(xp))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def costs(self):
\end_layout

\begin_layout Plain Layout

	"""Return the amount that each tank costs"""
\end_layout

\begin_layout Plain Layout

        cost = LogServer.cur.execute("SELECT Cost FROM TankPrices").fetchall()
\end_layout

\begin_layout Plain Layout

        #print "cost: "+str(cost)
\end_layout

\begin_layout Plain Layout

        cost = [x[0] for x in cost]
\end_layout

\begin_layout Plain Layout

        self.request.sendall(pickle.dumps(cost))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def login(self, dat):
\end_layout

\begin_layout Plain Layout

	"""Compare the users credentials to the database and login if they match"""
\end_layout

\begin_layout Plain Layout

        #Check if these credentials are in the database
\end_layout

\begin_layout Plain Layout

        if len(LogServer.cur.execute("""SELECT  UserInfo.UserName FROM UserInfo
\end_layout

\begin_layout Plain Layout

                                        INNER JOIN UserPass ON UserInfo.UserId=Us
erPass.UserId
\end_layout

\begin_layout Plain Layout

                                        WHERE UserInfo.Username=?
\end_layout

\begin_layout Plain Layout

                                        AND UserPass.HashPass=?""", dat).fetchall(
)) > 0:
\end_layout

\begin_layout Plain Layout

            userId = LogServer.cur.execute("SELECT UserId FROM UserInfo WHERE
 Username = ?;", [dat[0]]).fetchone()[0]
\end_layout

\begin_layout Plain Layout

            print "ID LOGGING IN: "+str(userId)
\end_layout

\begin_layout Plain Layout

            a=(LogServer.cur.execute("""SELECT UserInfo.Username, UserProgress.*,
 UserOwned.* From UserInfo
\end_layout

\begin_layout Plain Layout

                                        INNER JOIN UserProgress, UserOwned
 ON UserInfo.UserId = UserProgress.UserId
\end_layout

\begin_layout Plain Layout

                                        AND UserInfo.UserId = UserOwned.UserId
 WHERE UserInfo.Username = ?;""", [dat[0]]).fetchone())
\end_layout

\begin_layout Plain Layout

            self.request.sendall(pickle.dumps(a))
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            print "Login failed"
\end_layout

\begin_layout Plain Layout

            self.request.sendall(pickle.dumps("LoginFailure"))
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

    def create(self, dat):
\end_layout

\begin_layout Plain Layout

	"""Add a new user to the database"""
\end_layout

\begin_layout Plain Layout

        #print "DATA RECIEVED"
\end_layout

\begin_layout Plain Layout

        nextId = len(LogServer.cur.execute("SELECT Username FROM UserInfo").fetchal
l())+1
\end_layout

\begin_layout Plain Layout

        if len(LogServer.cur.execute("SELECT * FROM UserInfo WHERE Username
 = ?", [dat[0]]).fetchall()) > 0:
\end_layout

\begin_layout Plain Layout

            self.request.sendall(pickle.dumps("UsernameException"))
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            print "Next ID: "+str(nextId)
\end_layout

\begin_layout Plain Layout

            dat.append(nextId)
\end_layout

\begin_layout Plain Layout

            self.createNewAccount(dat)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def get(self, username, tankname):
\end_layout

\begin_layout Plain Layout

	"""Get the stats on the tank requested by the user"""
\end_layout

\begin_layout Plain Layout

        values = [username]
\end_layout

\begin_layout Plain Layout

        #print "VALS: "+str(values)
\end_layout

\begin_layout Plain Layout

        a = LogServer.cur.execute("""SELECT """+tankname+""" FROM UserUpgrades
 INNER JOIN UserInfo ON UserUpgrades.UserId = UserInfo.UserId
\end_layout

\begin_layout Plain Layout

                                  WHERE UserInfo.Username=?""", values).fetchall()
\end_layout

\begin_layout Plain Layout

        print str(a[0][0][:-1])
\end_layout

\begin_layout Plain Layout

        self.request.sendall(pickle.dumps(a[0][0][:-1]))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def convertToString(self, lst):
\end_layout

\begin_layout Plain Layout

	"""Self-explanatory, converts a list to a string"""
\end_layout

\begin_layout Plain Layout

        #print "LIST: "+str(lst)
\end_layout

\begin_layout Plain Layout

        a = ""
\end_layout

\begin_layout Plain Layout

        for b in lst:
\end_layout

\begin_layout Plain Layout

            a += str(b) + ":"
\end_layout

\begin_layout Plain Layout

        return a
\end_layout

\begin_layout Plain Layout

    def createNewAccount(self, data):
\end_layout

\begin_layout Plain Layout

	"""insert all data into the database"""
\end_layout

\begin_layout Plain Layout

        #Here be dragons
\end_layout

\begin_layout Plain Layout

        self.openCloseConn()
\end_layout

\begin_layout Plain Layout

        LogServer.cur.execute("INSERT INTO UserInfo VALUES (?, ?);", [data[2],
 data[0]])
\end_layout

\begin_layout Plain Layout

        LogServer.cur.execute("INSERT INTO UserPass VALUES (?, ?);", [data[2],
 data[1]])
\end_layout

\begin_layout Plain Layout

        LogServer.cur.execute("INSERT INTO UserOwned VALUES (?, 1, 0, 1, 0,
 1, 0, 1);", [data[2]])
\end_layout

\begin_layout Plain Layout

        LogServer.cur.execute("INSERT INTO UserProgress VALUES (?, 0, 0, 0,
 0, 0, 0, 0);", [data[2]])
\end_layout

\begin_layout Plain Layout

        LogServer.cur.execute("INSERT INTO UserUpgrades VALUES (?, 0, 0, 0,
 0, 0, 0, 0);", [data[2]])
\end_layout

\begin_layout Plain Layout

        tanknames = LogServer.cur.execute("SELECT Name FROM TankStats").fetchall()
\end_layout

\begin_layout Plain Layout

        self.makeListSane(tanknames)
\end_layout

\begin_layout Plain Layout

        #print "NAMES: "+str(tanknames)
\end_layout

\begin_layout Plain Layout

        for i in range(7):
\end_layout

\begin_layout Plain Layout

            Stats = LogServer.cur.execute("SELECT * FROM TankStats WHERE Name
 = ?;", [tanknames[i]]).fetchall()
\end_layout

\begin_layout Plain Layout

            values = [self.convertToString(Stats[0]), data[2]]
\end_layout

\begin_layout Plain Layout

            LogServer.cur.execute("UPDATE UserUpgrades SET "+tanknames[i]+"
 = ? WHERE UserId = ?;", values)
\end_layout

\begin_layout Plain Layout

        #print "VALUES COMMITING"
\end_layout

\begin_layout Plain Layout

        LogServer.conn.commit()
\end_layout

\begin_layout Plain Layout

        #print "ACCOUNT CREATED"
\end_layout

\begin_layout Plain Layout

        self.openCloseConn()
\end_layout

\begin_layout Plain Layout

        self.request.sendall(pickle.dumps("COMPLETE"))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def xp(self, user, tank):
\end_layout

\begin_layout Plain Layout

	"""Gets the users XP"""
\end_layout

\begin_layout Plain Layout

        a = LogServer.cur.execute("""SELECT """+tank+ """ FROM UserProgress
 INNER JOIN UserInfo ON UserProgress.UserId =
\end_layout

\begin_layout Plain Layout

                                    UserInfo.UserId WHERE UserInfo.Username=?""",
 [user]).fetchone()[0]
\end_layout

\begin_layout Plain Layout

        #print str(a)
\end_layout

\begin_layout Plain Layout

        self.request.sendall(pickle.dumps(a))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def makeListSane(self, lst):
\end_layout

\begin_layout Plain Layout

	"""Make the list how I need it - all strings"""
\end_layout

\begin_layout Plain Layout

        for i in range(len(lst)):
\end_layout

\begin_layout Plain Layout

            lst[i] = str(lst[i][0])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def openCloseConn(self):
\end_layout

\begin_layout Plain Layout

	"""Close and reopen the database connection"""
\end_layout

\begin_layout Plain Layout

        LogServer.conn.close()
\end_layout

\begin_layout Plain Layout

        LogServer.conn = sqlite3.Connection("LoginDatabase")
\end_layout

\begin_layout Plain Layout

        LogServer.cur = LogServer.conn.cursor()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def update(self, data):
\end_layout

\begin_layout Plain Layout

	"""Update all of the data in the database"""
\end_layout

\begin_layout Plain Layout

        user = data[0]
\end_layout

\begin_layout Plain Layout

        stats = data[1]
\end_layout

\begin_layout Plain Layout

        newXp = data[2]
\end_layout

\begin_layout Plain Layout

        letsgetthename = stats.split(":")[0]
\end_layout

\begin_layout Plain Layout

        #print str(letsgetthename)
\end_layout

\begin_layout Plain Layout

        #print "USER: "+str(user)
\end_layout

\begin_layout Plain Layout

        userId = int(LogServer.cur.execute("SELECT UserId FROM UserInfo WHERE
 Username = ?;", [user]).fetchone()[0])
\end_layout

\begin_layout Plain Layout

        #print "USERID: "+str(userId)
\end_layout

\begin_layout Plain Layout

        LogServer.cur.execute("UPDATE UserUpgrades SET "+letsgetthename+ "
 = ? WHERE UserId = ?", [stats, userId])
\end_layout

\begin_layout Plain Layout

        LogServer.cur.execute("UPDATE UserProgress SET "+letsgetthename+"
 = ? WHERE UserId = ?", [newXp, userId])
\end_layout

\begin_layout Plain Layout

        LogServer.conn.commit()
\end_layout

\begin_layout Plain Layout

        self.openCloseConn()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def owned(self, username):
\end_layout

\begin_layout Plain Layout

	"""Return the tanks owned by the user"""
\end_layout

\begin_layout Plain Layout

        owned = LogServer.cur.execute("SELECT * FROM UserOwned INNER JOIN
 UserInfo ON UserOwned.UserId = UserInfo.UserId WHERE "
\end_layout

\begin_layout Plain Layout

                                      "UserInfo.Username = ?", [username]).fetchon
e()
\end_layout

\begin_layout Plain Layout

        #print "OWNED: "+str(owned)
\end_layout

\begin_layout Plain Layout

        self.request.sendall(pickle.dumps(owned))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def getConfiguration(conf, keyword):
\end_layout

\begin_layout Plain Layout

    """Read the config and return the option asked for"""
\end_layout

\begin_layout Plain Layout

    for a in conf:
\end_layout

\begin_layout Plain Layout

        if keyword in a and "#" not in a:
\end_layout

\begin_layout Plain Layout

            toRet = a.split("=")
\end_layout

\begin_layout Plain Layout

            #print toRet
\end_layout

\begin_layout Plain Layout

            return toRet[1]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def start():
\end_layout

\begin_layout Plain Layout

    """Start the login server"""
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        r = open("login.conf", "r")
\end_layout

\begin_layout Plain Layout

        config = r.read().split("
\backslash
n")
\end_layout

\begin_layout Plain Layout

        ipAddr  = getConfiguration(config, "ip_address")
\end_layout

\begin_layout Plain Layout

        port = getConfiguration(config, "port")
\end_layout

\begin_layout Plain Layout

        r.close()
\end_layout

\begin_layout Plain Layout

        server = SocketServer.TCPServer((ipAddr, int(port)), LogServer)
\end_layout

\begin_layout Plain Layout

        print ("Login server running on "+str(ipAddr)+":"+str(port))
\end_layout

\begin_layout Plain Layout

        server.serve_forever()
\end_layout

\begin_layout Plain Layout

    except IOError as ex:
\end_layout

\begin_layout Plain Layout

	print "Could not find login.conf
\backslash
n" + str(ex)
\end_layout

\begin_layout Plain Layout

    except Exception as ex:
\end_layout

\begin_layout Plain Layout

        print ("Port is not free")
\end_layout

\begin_layout Plain Layout

        print ("Technical information: "+str(ex))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def main():
\end_layout

\begin_layout Plain Layout

    """Run this server from another file"""
\end_layout

\begin_layout Plain Layout

    if getConfiguration("login.conf", "loginOnLaunch") == True:
\end_layout

\begin_layout Plain Layout

    	import threading
\end_layout

\begin_layout Plain Layout

    	a = threading.Thread(target=start)
\end_layout

\begin_layout Plain Layout

    	a.start()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def superMain():
\end_layout

\begin_layout Plain Layout

    """Run this server without checking the login server"""
\end_layout

\begin_layout Plain Layout

    import threading
\end_layout

\begin_layout Plain Layout

    a = threading.Thread(target=start)
\end_layout

\begin_layout Plain Layout

    a.start()
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
serverSetupForm.py
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#!/usr/bin/env python
\end_layout

\begin_layout Plain Layout

# coding=utf-8
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import threading
\end_layout

\begin_layout Plain Layout

import SocketServer
\end_layout

\begin_layout Plain Layout

import os
\end_layout

\begin_layout Plain Layout

import sys
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import wx
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import ServerGui
\end_layout

\begin_layout Plain Layout

import Server
\end_layout

\begin_layout Plain Layout

import loginServer
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

sys.path.append(os.getcwd())
\end_layout

\begin_layout Plain Layout

try:
\end_layout

\begin_layout Plain Layout

    import wmi
\end_layout

\begin_layout Plain Layout

except ImportError:
\end_layout

\begin_layout Plain Layout

    #Unix system
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        import netifaces
\end_layout

\begin_layout Plain Layout

    except ImportError:
\end_layout

\begin_layout Plain Layout

        None
\end_layout

\begin_layout Plain Layout

from Errors import *
\end_layout

\begin_layout Plain Layout

import messages
\end_layout

\begin_layout Plain Layout

import sqlite3
\end_layout

\begin_layout Plain Layout

import pickle
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class inProgress(ServerGui.FillerFrame):
\end_layout

\begin_layout Plain Layout

    """A window to appear to tell the user that the game is in progress"""
\end_layout

\begin_layout Plain Layout

    def __init__(self, parent):
\end_layout

\begin_layout Plain Layout

        ServerGui.FillerFrame.__init__(self, parent)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def stopEvent( self, event ):
\end_layout

\begin_layout Plain Layout

	"""In case the user wants to cancel the startup at the last moment"""
\end_layout

\begin_layout Plain Layout

        raise AHHHHHHHHHHH("NOOOOOOO")
\end_layout

\begin_layout Plain Layout

        self.Show(False)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class ThreadedTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
\end_layout

\begin_layout Plain Layout

    """A wrapper to make the server thread"""
\end_layout

\begin_layout Plain Layout

    pass
\end_layout

\begin_layout Plain Layout

            
\end_layout

\begin_layout Plain Layout

class serverForm(ServerGui.Mainframe):
\end_layout

\begin_layout Plain Layout

    """Initialise the main GUI for server setup."""
\end_layout

\begin_layout Plain Layout

    def __init__(self, parent):
\end_layout

\begin_layout Plain Layout

        try:
\end_layout

\begin_layout Plain Layout

            ServerGui.Mainframe.__init__(self,parent)
\end_layout

\begin_layout Plain Layout

        except:
\end_layout

\begin_layout Plain Layout

            print("GUI failed __init__")
\end_layout

\begin_layout Plain Layout

        self.interfaceChoice.Clear()
\end_layout

\begin_layout Plain Layout

        self.parent = parent
\end_layout

\begin_layout Plain Layout

        self.opSys = self.getOperatingSystem()
\end_layout

\begin_layout Plain Layout

        self.loginThread()
\end_layout

\begin_layout Plain Layout

	self.toClose = False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def loginThread(self):
\end_layout

\begin_layout Plain Layout

	"""A thread to start the login server"""
\end_layout

\begin_layout Plain Layout

        loginServer.main()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def getOperatingSystem(self):
\end_layout

\begin_layout Plain Layout

	"""Gets the OS of the server machine to bind to IP address"""
\end_layout

\begin_layout Plain Layout

        try:
\end_layout

\begin_layout Plain Layout

            self.testval = sys.winver
\end_layout

\begin_layout Plain Layout

            #No exception thrown, we must be on windows
\end_layout

\begin_layout Plain Layout

            for nic in wmi.WMI ().Win32_NetworkAdapterConfiguration (IPEnabled=1):
\end_layout

\begin_layout Plain Layout

                self.interfaceChoice.Append(nic.caption[11:])
\end_layout

\begin_layout Plain Layout

            return "Win"
\end_layout

\begin_layout Plain Layout

        except AttributeError:
\end_layout

\begin_layout Plain Layout

            #We're running on unix system
\end_layout

\begin_layout Plain Layout

            for ifaceName in netifaces.interfaces():
\end_layout

\begin_layout Plain Layout

                self.interfaceChoice.Append(ifaceName)
\end_layout

\begin_layout Plain Layout

            return "Unix"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def changeInterface(self,event):
\end_layout

\begin_layout Plain Layout

	"""Gets the IP of interface (i.e.
 wlan, ethernet etc)"""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        if self.opSys ==  "Unix":
\end_layout

\begin_layout Plain Layout

            ints = netifaces.interfaces()
\end_layout

\begin_layout Plain Layout

            selected_int = ints[self.interfaceChoice.GetCurrentSelection()]
\end_layout

\begin_layout Plain Layout

            try:
\end_layout

\begin_layout Plain Layout

                self.ipBox.Value = netifaces.ifaddresses(selected_int)[2][0]['addr'
]
\end_layout

\begin_layout Plain Layout

            except Exception:
\end_layout

\begin_layout Plain Layout

                self.ipBox.Value = "Not connected"
\end_layout

\begin_layout Plain Layout

        elif self.opSys == "Win":
\end_layout

\begin_layout Plain Layout

            ints = [nic for nic in wmi.WMI ().Win32_NetworkAdapterConfiguration
 (IPEnabled=1)]
\end_layout

\begin_layout Plain Layout

            self.ipBox.Value = ints[self.interfaceChoice.GetCurrentSelection()].IPAdd
ress[0]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def startServer(self,event):
\end_layout

\begin_layout Plain Layout

	"""Button press event to start the server"""
\end_layout

\begin_layout Plain Layout

        self.statusLab.SetLabel("Game instance is running")
\end_layout

\begin_layout Plain Layout

        self.startServerThread()
\end_layout

\begin_layout Plain Layout

        try:
\end_layout

\begin_layout Plain Layout

            f = open("Stats.dat", "r")
\end_layout

\begin_layout Plain Layout

            ex = pickle.load(f)
\end_layout

\begin_layout Plain Layout

            messages.Info(self.parent, "Game has finished")
\end_layout

\begin_layout Plain Layout

            self.statusLab.SetLabel("No game instance running")
\end_layout

\begin_layout Plain Layout

            try:
\end_layout

\begin_layout Plain Layout

                self.processEndOfGame(ex)
\end_layout

\begin_layout Plain Layout

            except Exception as ex:
\end_layout

\begin_layout Plain Layout

                #No stats to process
\end_layout

\begin_layout Plain Layout

                print "Error processing: " + str(ex)
\end_layout

\begin_layout Plain Layout

        except IOError:
\end_layout

\begin_layout Plain Layout

            # No file
\end_layout

\begin_layout Plain Layout

            pass
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

    def stopServer(self,event):
\end_layout

\begin_layout Plain Layout

	"""Button press event to stop the server"""
\end_layout

\begin_layout Plain Layout

        self.statusLab.SetLabel("No game instance running")
\end_layout

\begin_layout Plain Layout

        try:
\end_layout

\begin_layout Plain Layout

            del self.server
\end_layout

\begin_layout Plain Layout

            print("Server shutdown")
\end_layout

\begin_layout Plain Layout

        except Exception:
\end_layout

\begin_layout Plain Layout

            print ("Server not running")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def beginTheSatanHailing(self):
\end_layout

\begin_layout Plain Layout

	"""Begin to handle requests"""
\end_layout

\begin_layout Plain Layout

	print "Beginning the server..."
\end_layout

\begin_layout Plain Layout

        while not self.toClose:
\end_layout

\begin_layout Plain Layout

		#print self.toClose
\end_layout

\begin_layout Plain Layout

                a = self.server.handle_request()
\end_layout

\begin_layout Plain Layout

                #All glory to overlord satan
\end_layout

\begin_layout Plain Layout

                #print str(a)
\end_layout

\begin_layout Plain Layout

	#print "Eh closing server eh"
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    def watchTheServerIntently(self):
\end_layout

\begin_layout Plain Layout

	"""A thread to say if the server should stop"""
\end_layout

\begin_layout Plain Layout

	s = Server.TankServer
\end_layout

\begin_layout Plain Layout

        while True:
\end_layout

\begin_layout Plain Layout

            if s.connected == 0:
\end_layout

\begin_layout Plain Layout

		#print "ALL HAVE DISCONNECTED.
 
\backslash
nPlan to close server."
\end_layout

\begin_layout Plain Layout

		self.toClose = True
\end_layout

\begin_layout Plain Layout

		break
\end_layout

\begin_layout Plain Layout

	#print "Exiting monitor thread"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def updateTheBulletsThread(self):
\end_layout

\begin_layout Plain Layout

	"""A thread that will update all bullets every 0.05 seconds"""
\end_layout

\begin_layout Plain Layout

        import time
\end_layout

\begin_layout Plain Layout

        timeLast = time.time()
\end_layout

\begin_layout Plain Layout

        while True:
\end_layout

\begin_layout Plain Layout

            for b in Server.TankServer.Bullets:
\end_layout

\begin_layout Plain Layout

                b.update(time.time() - timeLast)
\end_layout

\begin_layout Plain Layout

            timeLast = time.time()
\end_layout

\begin_layout Plain Layout

            time.sleep(0.05)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def startServerThread(self):
\end_layout

\begin_layout Plain Layout

	"""A thread to handle the server"""
\end_layout

\begin_layout Plain Layout

        HOST = self.ipBox.Value
\end_layout

\begin_layout Plain Layout

        PORT = int(self.portBox.Value)
\end_layout

\begin_layout Plain Layout

        ### Goddammit this is hard to get right ###
\end_layout

\begin_layout Plain Layout

        try:
\end_layout

\begin_layout Plain Layout

            self.Show(False)
\end_layout

\begin_layout Plain Layout

            messages.ServerRun(self.parent)
\end_layout

\begin_layout Plain Layout

            self.server = SocketServer.ThreadingTCPServer((HOST,PORT), Server.TankS
erver)
\end_layout

\begin_layout Plain Layout

            self.endEvent = threading.Event()
\end_layout

\begin_layout Plain Layout

            self.server.timeout = 3
\end_layout

\begin_layout Plain Layout

            Server.TankServer.Event = self.endEvent
\end_layout

\begin_layout Plain Layout

            print ("Server running on "+str(HOST)+":"+str(PORT))
\end_layout

\begin_layout Plain Layout

            self.watch = threading.Thread(target=self.watchTheServerIntently)
\end_layout

\begin_layout Plain Layout

            self.updater = threading.Thread(target=self.updateTheBulletsThread)
\end_layout

\begin_layout Plain Layout

            #print "Created thread"
\end_layout

\begin_layout Plain Layout

            self.watch.start()
\end_layout

\begin_layout Plain Layout

            self.updater.start()
\end_layout

\begin_layout Plain Layout

            #print "Started monitoring thread.
 Starting server."
\end_layout

\begin_layout Plain Layout

            self.beginTheSatanHailing()
\end_layout

\begin_layout Plain Layout

            try:
\end_layout

\begin_layout Plain Layout

                #messages.ServerRun(self.parent)
\end_layout

\begin_layout Plain Layout

                print "Closing server"
\end_layout

\begin_layout Plain Layout

                Server.TankServer.toClose = False
\end_layout

\begin_layout Plain Layout

                #print "Set to close"
\end_layout

\begin_layout Plain Layout

                self.toClose = False
\end_layout

\begin_layout Plain Layout

                self.Show(True)
\end_layout

\begin_layout Plain Layout

                #print "Shown"
\end_layout

\begin_layout Plain Layout

                #print "Server stopped"
\end_layout

\begin_layout Plain Layout

            except Exception as ex:
\end_layout

\begin_layout Plain Layout

                print "ER ER ER " + str(ex)
\end_layout

\begin_layout Plain Layout

                messages.Info(self.parent, "SERVER CLOSING WITH MESSAGE: "
 + str(ex.message))
\end_layout

\begin_layout Plain Layout

                self.stopServer(None)
\end_layout

\begin_layout Plain Layout

	except Exception as ex:
\end_layout

\begin_layout Plain Layout

            #This is literally the only error that appears here
\end_layout

\begin_layout Plain Layout

            print ("Port is not free")
\end_layout

\begin_layout Plain Layout

            print ("Technical information: "+str(ex))
\end_layout

\begin_layout Plain Layout

	    self.Show(True)
\end_layout

\begin_layout Plain Layout

	    messages.Info(self.parent, "Port is not free, try again in a minute")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def filler(self):
\end_layout

\begin_layout Plain Layout

	"""Confirm the start of the server"""
\end_layout

\begin_layout Plain Layout

        app = wx.App(False)
\end_layout

\begin_layout Plain Layout

        self.frame = inProgress(None)
\end_layout

\begin_layout Plain Layout

        self.frame.Show(True)
\end_layout

\begin_layout Plain Layout

        #print "Form init"
\end_layout

\begin_layout Plain Layout

        app.MainLoop()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def processEndOfGame(self, stats):
\end_layout

\begin_layout Plain Layout

	"""Take the end of game results and process them, send to main login server"""
\end_layout

\begin_layout Plain Layout

        conn = sqlite3.Connection("LoginDatabase")
\end_layout

\begin_layout Plain Layout

        cur = conn.cursor()
\end_layout

\begin_layout Plain Layout

        #print "Running update on data: " + str(stats)
\end_layout

\begin_layout Plain Layout

        for player in stats:
\end_layout

\begin_layout Plain Layout

            #print "Update info: " + str(player)
\end_layout

\begin_layout Plain Layout

            username = player[-1]
\end_layout

\begin_layout Plain Layout

            tankName = player[-2]
\end_layout

\begin_layout Plain Layout

            xpGained = player[2]
\end_layout

\begin_layout Plain Layout

            #print "Got stats needed"
\end_layout

\begin_layout Plain Layout

            playerId = cur.execute("SELECT UserId FROM UserInfo WHERE Username
 = ?", [username]).fetchone()
\end_layout

\begin_layout Plain Layout

            playerId = playerId[0]
\end_layout

\begin_layout Plain Layout

            #print "Got playerId " + str(playerId)
\end_layout

\begin_layout Plain Layout

            currentXp = int(cur.execute("SELECT "+tankName+" FROM UserProgress
 WHERE UserId  = ?", [playerId]).fetchone()[0])
\end_layout

\begin_layout Plain Layout

            #print "Init sql queries done"
\end_layout

\begin_layout Plain Layout

            currentXp += xpGained
\end_layout

\begin_layout Plain Layout

            cur.execute("UPDATE UserProgress SET "+tankName+" = ? WHERE UserId
 = ?", [currentXp, playerId])
\end_layout

\begin_layout Plain Layout

            #print "UPDATED ID "+str(playerId)+" TO XP "+str(currentXp)
\end_layout

\begin_layout Plain Layout

        conn.commit()
\end_layout

\begin_layout Plain Layout

        conn.close()
\end_layout

\begin_layout Plain Layout

        os.remove("Stats.dat")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def main():
\end_layout

\begin_layout Plain Layout

	"""Main method to run the server"""
\end_layout

\begin_layout Plain Layout

	app = wx.App(False)
\end_layout

\begin_layout Plain Layout

	frame = serverForm(None)
\end_layout

\begin_layout Plain Layout

	frame.Show(True)
\end_layout

\begin_layout Plain Layout

	app.MainLoop()
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
server.py
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import SocketServer
\end_layout

\begin_layout Plain Layout

import pickle
\end_layout

\begin_layout Plain Layout

import threading
\end_layout

\begin_layout Plain Layout

import time
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

from game_calcs import *
\end_layout

\begin_layout Plain Layout

import mapGen
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Create a class to make things easier
\end_layout

\begin_layout Plain Layout

class Player():
\end_layout

\begin_layout Plain Layout

    """A class to easily track player instances"""
\end_layout

\begin_layout Plain Layout

    def __init__(self,  x,  y,  id,  name,  hp, username):
\end_layout

\begin_layout Plain Layout

        self.x = x
\end_layout

\begin_layout Plain Layout

        self.y = y
\end_layout

\begin_layout Plain Layout

        self.id = id
\end_layout

\begin_layout Plain Layout

        self.username = username
\end_layout

\begin_layout Plain Layout

        self.name = name
\end_layout

\begin_layout Plain Layout

        self.hp = hp
\end_layout

\begin_layout Plain Layout

        self.isOnWinning = False
\end_layout

\begin_layout Plain Layout

        self.xpGained = 100
\end_layout

\begin_layout Plain Layout

        self.damage = 0
\end_layout

\begin_layout Plain Layout

        self.kills = 0
\end_layout

\begin_layout Plain Layout

        if self.id % 2 == 0:
\end_layout

\begin_layout Plain Layout

            self.angle = 90
\end_layout

\begin_layout Plain Layout

            self.team = 0
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            self.angle = 270
\end_layout

\begin_layout Plain Layout

            self.team = 1
\end_layout

\begin_layout Plain Layout

        self.turret_angle = self.angle
\end_layout

\begin_layout Plain Layout

    def returnValues(self):
\end_layout

\begin_layout Plain Layout

        """Return player values in a list"""
\end_layout

\begin_layout Plain Layout

        return [self.x,  self.y,  self.angle,  self.turret_angle,  self.name,
 self.hp, self.username, self.team]
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    def set(self,  data):
\end_layout

\begin_layout Plain Layout

	"""Set all the players data"""
\end_layout

\begin_layout Plain Layout

        self.x = data[0]
\end_layout

\begin_layout Plain Layout

        self.y = data[1]
\end_layout

\begin_layout Plain Layout

        self.angle = data[2]
\end_layout

\begin_layout Plain Layout

        self.turret_angle = data[3]
\end_layout

\begin_layout Plain Layout

        self.hp = data[4]
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

class Bullet():
\end_layout

\begin_layout Plain Layout

    """A class to deal with tracking the bullets"""
\end_layout

\begin_layout Plain Layout

    def __init__(self,  x,  y,  angle,  ownerId,  damage,  bulletID, penetration
):
\end_layout

\begin_layout Plain Layout

        self.x = x
\end_layout

\begin_layout Plain Layout

        self.y =y
\end_layout

\begin_layout Plain Layout

        self.angle = angle
\end_layout

\begin_layout Plain Layout

        self.ded = False
\end_layout

\begin_layout Plain Layout

        self.ownerId = ownerId
\end_layout

\begin_layout Plain Layout

        self.damage = damage
\end_layout

\begin_layout Plain Layout

        self.bulletID = bulletID
\end_layout

\begin_layout Plain Layout

        self.penetration = penetration
\end_layout

\begin_layout Plain Layout

    def update(self, deltaT):
\end_layout

\begin_layout Plain Layout

        """Update the bullet based on a time difference"""
\end_layout

\begin_layout Plain Layout

        self.x += 120*math.cos(math.radians(self.angle))*deltaT
\end_layout

\begin_layout Plain Layout

        self.y += 120*math.sin(math.radians(self.angle))*deltaT
\end_layout

\begin_layout Plain Layout

        if (self.x < -100 or
\end_layout

\begin_layout Plain Layout

            self.y < -100 or
\end_layout

\begin_layout Plain Layout

            self.x > 1124 or
\end_layout

\begin_layout Plain Layout

            self.y > 880):
\end_layout

\begin_layout Plain Layout

                self.ded = True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def returnValues(self):
\end_layout

\begin_layout Plain Layout

        return [self.x,  self.y,  self.angle,  self.ownerId,  self.damage,  self.ded,
  self.bulletID, self.penetration]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class TankServer(SocketServer.BaseRequestHandler):
\end_layout

\begin_layout Plain Layout

    """The main game server, executes requests given in string form and
 responds with data or confirmation"""
\end_layout

\begin_layout Plain Layout

    #Temporary starting positions
\end_layout

\begin_layout Plain Layout

    allow_reuse_address=True
\end_layout

\begin_layout Plain Layout

    Event = None
\end_layout

\begin_layout Plain Layout

    Start_x = [item for sublist in [[x,x] for x in range(200, 801, 200)]
 for item in sublist]
\end_layout

\begin_layout Plain Layout

    Start_y = [100, 700, 100, 700, 100, 700, 100, 700]
\end_layout

\begin_layout Plain Layout

    Players = []
\end_layout

\begin_layout Plain Layout

    Bullets = []
\end_layout

\begin_layout Plain Layout

    toDespawn = []
\end_layout

\begin_layout Plain Layout

    NextBulletId = 0
\end_layout

\begin_layout Plain Layout

    Countdown = -1
\end_layout

\begin_layout Plain Layout

    DeadPlayers = 0
\end_layout

\begin_layout Plain Layout

    GameInProgress = True
\end_layout

\begin_layout Plain Layout

    EndGameMessage = []
\end_layout

\begin_layout Plain Layout

    toClose = False
\end_layout

\begin_layout Plain Layout

    Map = mapGen.generateMap(1024, 768)
\end_layout

\begin_layout Plain Layout

    EndGameIds = []
\end_layout

\begin_layout Plain Layout

    saidGoodbye = 0
\end_layout

\begin_layout Plain Layout

    finished = 0
\end_layout

\begin_layout Plain Layout

    connected = -1
\end_layout

\begin_layout Plain Layout

    killNextLoop = False
\end_layout

\begin_layout Plain Layout

    def giveDatabaseConnection(self, cur):
\end_layout

\begin_layout Plain Layout

        self.cur = cur
\end_layout

\begin_layout Plain Layout

    def handle(self):
\end_layout

\begin_layout Plain Layout

        """Do something with the request"""
\end_layout

\begin_layout Plain Layout

        #print "New player has connected"
\end_layout

\begin_layout Plain Layout

        while TankServer.GameInProgress:
\end_layout

\begin_layout Plain Layout

            #print "HANDLING"
\end_layout

\begin_layout Plain Layout

            #Get the data from the socket
\end_layout

\begin_layout Plain Layout

            recv = self.request.recv(2048)
\end_layout

\begin_layout Plain Layout

            #print "RECV: " + str(recv)
\end_layout

\begin_layout Plain Layout

            if TankServer.killNextLoop:
\end_layout

\begin_layout Plain Layout

                self.endGame()
\end_layout

\begin_layout Plain Layout

            if recv == '':
\end_layout

\begin_layout Plain Layout

                break
\end_layout

\begin_layout Plain Layout

            self.data = pickle.loads(recv)
\end_layout

\begin_layout Plain Layout

            #Check what sort of request it is
\end_layout

\begin_layout Plain Layout

            if type(self.data[0]) == type("TopKek"):
\end_layout

\begin_layout Plain Layout

            #print "Recieved string request.
 Processing..."
\end_layout

\begin_layout Plain Layout

                self.toSend = self.stringRequest(self.data)
\end_layout

\begin_layout Plain Layout

            else:
\end_layout

\begin_layout Plain Layout

                self.toSend = self.listRequest(self.data)
\end_layout

\begin_layout Plain Layout

            self.request.sendall(pickle.dumps(self.toSend))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #print "HANDLING"
\end_layout

\begin_layout Plain Layout

        try:
\end_layout

\begin_layout Plain Layout

            recv = pickle.loads(self.request.recv(1024))
\end_layout

\begin_layout Plain Layout

            #print "RECV: "+str(recv)
\end_layout

\begin_layout Plain Layout

            if recv == "":
\end_layout

\begin_layout Plain Layout

                pass
\end_layout

\begin_layout Plain Layout

            a = ["EndGame"]
\end_layout

\begin_layout Plain Layout

            a.append(TankServer.EndGameMessage[recv[0]])
\end_layout

\begin_layout Plain Layout

            #print "END OF GAME: "+str(a)
\end_layout

\begin_layout Plain Layout

            self.request.sendall(pickle.dumps(a))
\end_layout

\begin_layout Plain Layout

            TankServer.EndGameIds.pop(TankServer.EndGameIds.index(recv[0]))
\end_layout

\begin_layout Plain Layout

            self.request.close()
\end_layout

\begin_layout Plain Layout

            if len(TankServer.EndGameIds) == 0:
\end_layout

\begin_layout Plain Layout

                #print "Writing file"
\end_layout

\begin_layout Plain Layout

                f = open("Stats.dat", "w")
\end_layout

\begin_layout Plain Layout

                pickle.dump(TankServer.EndGameMessage, f)
\end_layout

\begin_layout Plain Layout

                f.close()
\end_layout

\begin_layout Plain Layout

                #print "FILE WRITTEN"
\end_layout

\begin_layout Plain Layout

                TankServer.toClose = True
\end_layout

\begin_layout Plain Layout

        #print "Set to close"
\end_layout

\begin_layout Plain Layout

                #a=threading.currentThread()
\end_layout

\begin_layout Plain Layout

                #a._Thread__stop()
\end_layout

\begin_layout Plain Layout

        except Exception as ex:
\end_layout

\begin_layout Plain Layout

            print str(ex)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def serverUpdatingThread(self):
\end_layout

\begin_layout Plain Layout

	"""A thread to keep the server up-to-date"""
\end_layout

\begin_layout Plain Layout

        for b in TankServer.Bullets:
\end_layout

\begin_layout Plain Layout

            if self.isCollidedWithMap(b):
\end_layout

\begin_layout Plain Layout

                b.ded = True
\end_layout

\begin_layout Plain Layout

            else:
\end_layout

\begin_layout Plain Layout

                b.update()
\end_layout

\begin_layout Plain Layout

                if b.ded:
\end_layout

\begin_layout Plain Layout

                    TankServer.Bullets.remove(b)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def finish(self):
\end_layout

\begin_layout Plain Layout

	"""End the request process"""
\end_layout

\begin_layout Plain Layout

    #print "FINISH"
\end_layout

\begin_layout Plain Layout

	TankServer.connected -= 1
\end_layout

\begin_layout Plain Layout

    #print "Disconnected.
 Players left to disconnect: " + str(TankServer.connected)
\end_layout

\begin_layout Plain Layout

    #return "TOPLEL"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def getVictor(self):
\end_layout

\begin_layout Plain Layout

	"""Count the players and see who won the game"""
\end_layout

\begin_layout Plain Layout

        team0 = 0
\end_layout

\begin_layout Plain Layout

        team1 = 0
\end_layout

\begin_layout Plain Layout

        for p in TankServer.Players:
\end_layout

\begin_layout Plain Layout

            if p.team == 0 and p.hp == 0:
\end_layout

\begin_layout Plain Layout

                team0 += 1
\end_layout

\begin_layout Plain Layout

            elif p.team == 1 and p.hp == 0:
\end_layout

\begin_layout Plain Layout

                team1 += 1
\end_layout

\begin_layout Plain Layout

        if team0 > team1:
\end_layout

\begin_layout Plain Layout

            return 0
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            return 1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def stringRequest(self,  req):
\end_layout

\begin_layout Plain Layout

        """Takes a string and outputs accordingly"""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        if "handshake" in req[0] and (TankServer.Countdown > 0 or TankServer.Count
down == -1):
\end_layout

\begin_layout Plain Layout

		#print "Recieved a new handshake"
\end_layout

\begin_layout Plain Layout

            	if TankServer.connected == -1:
\end_layout

\begin_layout Plain Layout

			TankServer.connected = 1
\end_layout

\begin_layout Plain Layout

		else:
\end_layout

\begin_layout Plain Layout

			TankServer.connected += 1
\end_layout

\begin_layout Plain Layout

		#print "A new player has sent a handshake.
 
\backslash
nNumber of connected players: " + str(TankServer.connected)
\end_layout

\begin_layout Plain Layout

		return self.doHandshake(req[1], req[2], req[3])
\end_layout

\begin_layout Plain Layout

        elif TankServer.Countdown == 0:
\end_layout

\begin_layout Plain Layout

            return [-1, -1, 0, -1]
\end_layout

\begin_layout Plain Layout

        elif "Disconnect" in req[0]:
\end_layout

\begin_layout Plain Layout

            for p in TankServer.Players:
\end_layout

\begin_layout Plain Layout

                if p.id == req[1]:
\end_layout

\begin_layout Plain Layout

                    p.hp = 0
\end_layout

\begin_layout Plain Layout

		    TankServer.connected -= 1
\end_layout

\begin_layout Plain Layout

                    p.username = "Disconnected"
\end_layout

\begin_layout Plain Layout

            self.DeadPlayers += 1
\end_layout

\begin_layout Plain Layout

            TankServer.EndGameIds.pop(TankServer.EndGameIds.index(req[1]))
\end_layout

\begin_layout Plain Layout

            if self.isEndOfGame():
\end_layout

\begin_layout Plain Layout

                self.endGame()
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            return "InvalidCommand"
\end_layout

\begin_layout Plain Layout

            
\end_layout

\begin_layout Plain Layout

    def listRequest(self,  req):
\end_layout

\begin_layout Plain Layout

        """Redirect method for requests in the form of a list"""
\end_layout

\begin_layout Plain Layout

        return self.get(req)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def isEndOfGame(self):
\end_layout

\begin_layout Plain Layout

	"""Looks at all players and decides if the game is over"""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        team1Alive = 0
\end_layout

\begin_layout Plain Layout

        team2Alive = 0
\end_layout

\begin_layout Plain Layout

        for p in TankServer.Players:
\end_layout

\begin_layout Plain Layout

            if p.hp > 0:
\end_layout

\begin_layout Plain Layout

                if p.team == 0:
\end_layout

\begin_layout Plain Layout

                    team1Alive += 1
\end_layout

\begin_layout Plain Layout

                else:
\end_layout

\begin_layout Plain Layout

                    team2Alive += 1
\end_layout

\begin_layout Plain Layout

        if team1Alive == 0:
\end_layout

\begin_layout Plain Layout

            TankServer.victor = 1
\end_layout

\begin_layout Plain Layout

            return  True
\end_layout

\begin_layout Plain Layout

        if team2Alive == 0:
\end_layout

\begin_layout Plain Layout

            TankServer.victor = 0
\end_layout

\begin_layout Plain Layout

            return True
\end_layout

\begin_layout Plain Layout

        return False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def convertToList(self):
\end_layout

\begin_layout Plain Layout

        """This will take Player objects and shove the x,y,angle,turret
 angle data into a list"""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        self.v = [[x.returnValues() for x in TankServer.Players]]
\end_layout

\begin_layout Plain Layout

        self.v.append([y.returnValues() for y in TankServer.Bullets])
\end_layout

\begin_layout Plain Layout

        return self.v
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

    def doHandshake(self,  name, hp, username):
\end_layout

\begin_layout Plain Layout

        """Add the new player to arrays and get going"""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        self.newId = len(TankServer.Players)
\end_layout

\begin_layout Plain Layout

        TankServer.Players.append(Player(TankServer.Start_x[self.newId],  TankServer.
Start_y[self.newId],  self.newId,  name,  hp, username))
\end_layout

\begin_layout Plain Layout

        TankServer.EndGameIds.append(self.newId)
\end_layout

\begin_layout Plain Layout

        print "Connected: "+name
\end_layout

\begin_layout Plain Layout

        if len(TankServer.Players) == 1:
\end_layout

\begin_layout Plain Layout

            TankServer.Countdown = 30
\end_layout

\begin_layout Plain Layout

            self.countdownThread = threading.Thread(target=self.countdown)
\end_layout

\begin_layout Plain Layout

            self.countdownThread.start()
\end_layout

\begin_layout Plain Layout

        return [self.newId,  self.convertToListHandShake(), TankServer.Countdown,
 TankServer.Map]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def countdown(self):
\end_layout

\begin_layout Plain Layout

        """Create a 30 second timer at the start of the game"""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        while TankServer.Countdown > 0:
\end_layout

\begin_layout Plain Layout

            time.sleep(1)
\end_layout

\begin_layout Plain Layout

            TankServer.Countdown -= 1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def convertToListHandShake(self):
\end_layout

\begin_layout Plain Layout

        """Initial return value"""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        return [x.returnValues() for x in TankServer.Players]
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

    def get(self, req):
\end_layout

\begin_layout Plain Layout

        """Acts as a 'getter', returns every other player's information
 and sends it in a handy list"""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        TankServer.Players[req[0]].set(req[1])
\end_layout

\begin_layout Plain Layout

        #Check if the player is dead
\end_layout

\begin_layout Plain Layout

        if TankServer.Players[req[0]].hp == 0:
\end_layout

\begin_layout Plain Layout

            TankServer.DeadPlayers += 1
\end_layout

\begin_layout Plain Layout

        if self.isEndOfGame() and TankServer.Countdown <= 0:
\end_layout

\begin_layout Plain Layout

            TankServer.killNextLoop=True
\end_layout

\begin_layout Plain Layout

        #Update the bullets if ID 0 is connected
\end_layout

\begin_layout Plain Layout

        for i in req[3]:
\end_layout

\begin_layout Plain Layout

            for b in TankServer.Bullets:
\end_layout

\begin_layout Plain Layout

                if b.bulletID == i:
\end_layout

\begin_layout Plain Layout

                    TankServer.Bullets.remove(b)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #Create a new bullet from x, y, angle information
\end_layout

\begin_layout Plain Layout

        if len(req[2]) > 0:
\end_layout

\begin_layout Plain Layout

            TankServer.Bullets.append(Bullet(req[2][0],  req[2][1],  req[2][2],
  req[2][3],  req[2][4],  TankServer.NextBulletId, req[2][5]))
\end_layout

\begin_layout Plain Layout

            TankServer.NextBulletId += 1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #If bullets don't pen, they should rebound
\end_layout

\begin_layout Plain Layout

        if len(req[4]) > 0:
\end_layout

\begin_layout Plain Layout

            for bid in req[4]:
\end_layout

\begin_layout Plain Layout

                id = bid[0]
\end_layout

\begin_layout Plain Layout

                angleOfImpact = bid[1]
\end_layout

\begin_layout Plain Layout

                angleOfNormal = bid[2]
\end_layout

\begin_layout Plain Layout

                angleOfBullet = bid[11]
\end_layout

\begin_layout Plain Layout

                anglePointingAway = (angleOfBullet + 180) % 360
\end_layout

\begin_layout Plain Layout

                angleToNormal = math.fabs((angleOfNormal - anglePointingAway)
 % 360)
\end_layout

\begin_layout Plain Layout

                newAngle = (anglePointingAway + (2*angleToNormal)) % 360
\end_layout

\begin_layout Plain Layout

                for b in TankServer.Bullets:
\end_layout

\begin_layout Plain Layout

                    if b.bulletID == id:
\end_layout

\begin_layout Plain Layout

                        toEdit = b
\end_layout

\begin_layout Plain Layout

                        toEdit.angle = newAngle
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        if len(req[5]) > 0:
\end_layout

\begin_layout Plain Layout

            for item in req[5]:
\end_layout

\begin_layout Plain Layout

                newHp = req[1][4]
\end_layout

\begin_layout Plain Layout

                ownerId = int(item[1])
\end_layout

\begin_layout Plain Layout

                for player in TankServer.Players:
\end_layout

\begin_layout Plain Layout

                    if player.id == ownerId:
\end_layout

\begin_layout Plain Layout

                        player.damage += int(item[0])
\end_layout

\begin_layout Plain Layout

                        player.xpGained += 20
\end_layout

\begin_layout Plain Layout

                        if newHp <= 0:
\end_layout

\begin_layout Plain Layout

                            player.kills += 1
\end_layout

\begin_layout Plain Layout

                            player.xpGained += 200
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

                
\end_layout

\begin_layout Plain Layout

        return self.convertToList()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def getBuildingRanges(self):
\end_layout

\begin_layout Plain Layout

        buildingRanges = []
\end_layout

\begin_layout Plain Layout

        map = TankServer.Map
\end_layout

\begin_layout Plain Layout

        for block in map:
\end_layout

\begin_layout Plain Layout

            yield [((block[0] * 100) - 100, (block[0] * 100)), ((block[1]
 * 100) - 100, (block[1] * 100))]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def isCollidedWithMap(self, b):
\end_layout

\begin_layout Plain Layout

        """Self-explanatory, returns true if the bullet is collided with
 terrain"""
\end_layout

\begin_layout Plain Layout

        q = self.getBuildingRanges()
\end_layout

\begin_layout Plain Layout

        while True:
\end_layout

\begin_layout Plain Layout

            a = q.next()
\end_layout

\begin_layout Plain Layout

            if b.x > a[0][0] and b.x < a[0][1]:
\end_layout

\begin_layout Plain Layout

                if b.y > a[1][0] and b.y < a[1][1]:
\end_layout

\begin_layout Plain Layout

                    return True
\end_layout

\begin_layout Plain Layout

        return False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def endGame(self):
\end_layout

\begin_layout Plain Layout

        TankServer.Countdown = 3
\end_layout

\begin_layout Plain Layout

        self.countdownThread = threading.Thread(target=self.countdown)
\end_layout

\begin_layout Plain Layout

        self.countdownThread.start()
\end_layout

\begin_layout Plain Layout

        victor = TankServer.victor
\end_layout

\begin_layout Plain Layout

        #Get a 1.5x XP boost if you win
\end_layout

\begin_layout Plain Layout

        for p in TankServer.Players:
\end_layout

\begin_layout Plain Layout

            if p.id == victor:
\end_layout

\begin_layout Plain Layout

                p.xpGained *= 1.5
\end_layout

\begin_layout Plain Layout

                p.isOnWinning = True
\end_layout

\begin_layout Plain Layout

        TankServer.EndGameMessage = [[p.isOnWinning, p.xpGained, p.damage, p.kills,
 p.name, p.username] for p in TankServer.Players]
\end_layout

\begin_layout Plain Layout

        TankServer.GameInProgress = False
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
errors.py
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

__author__ = 'harry'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class GameInProgressException(Exception):
\end_layout

\begin_layout Plain Layout

    """Is called when a player tries to joina game in progress"""
\end_layout

\begin_layout Plain Layout

    def __init__(self):
\end_layout

\begin_layout Plain Layout

        self.message = "Game is in progress"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class HostDisconnectedException(Exception):
\end_layout

\begin_layout Plain Layout

    """Called if the host goes offline"""
\end_layout

\begin_layout Plain Layout

    def __init__(self):
\end_layout

\begin_layout Plain Layout

        self.message = "The host unexpectedly disconnected"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class NoConnectionException(Exception):
\end_layout

\begin_layout Plain Layout

    """Called if there is no connection to the server"""
\end_layout

\begin_layout Plain Layout

    def __init__(self):
\end_layout

\begin_layout Plain Layout

        self.message = "No connection could be made"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class EndOfGame(Exception):
\end_layout

\begin_layout Plain Layout

    """Called to end the game"""
\end_layout

\begin_layout Plain Layout

    def __init__(self, message):
\end_layout

\begin_layout Plain Layout

        self.message = message
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class AHHHHHHHHHHH(Exception):
\end_layout

\begin_layout Plain Layout

    """OH GOD SOMETHING BAD HAPPENED HALP"""
\end_layout

\begin_layout Plain Layout

    def __init__(self, message):
\end_layout

\begin_layout Plain Layout

        self.message = message
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
game_calcs.py
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

__author__ = 'harry'
\end_layout

\begin_layout Plain Layout

import math
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Point():
\end_layout

\begin_layout Plain Layout

    """Used to represent a single point on the screen"""
\end_layout

\begin_layout Plain Layout

    def __init__(self, x, y):
\end_layout

\begin_layout Plain Layout

        self.x = x
\end_layout

\begin_layout Plain Layout

        self.y = y
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Vector():
\end_layout

\begin_layout Plain Layout

    def __init__(self,x1,y1,x2,y2):
\end_layout

\begin_layout Plain Layout

        self.x1 = x1
\end_layout

\begin_layout Plain Layout

        self.x2 = x2
\end_layout

\begin_layout Plain Layout

        self.y1 = y1
\end_layout

\begin_layout Plain Layout

        self.y2 = y2
\end_layout

\begin_layout Plain Layout

        self.angle = math.degrees(math.atan2(y2-y1, x2-x1))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def update(self,x1,y1,x2,y2):
\end_layout

\begin_layout Plain Layout

	"""Reset the vector to a new point"""
\end_layout

\begin_layout Plain Layout

        self.x1 = x1
\end_layout

\begin_layout Plain Layout

        self.x2 = x2
\end_layout

\begin_layout Plain Layout

        self.y1 = y1
\end_layout

\begin_layout Plain Layout

        self.y2 = y2
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def useAngle(self, x1, y1, mag, angle):
\end_layout

\begin_layout Plain Layout

	"""Init a vector with a magnitude and angle"""
\end_layout

\begin_layout Plain Layout

        self.x1 = x1
\end_layout

\begin_layout Plain Layout

        self.y1 = y1
\end_layout

\begin_layout Plain Layout

        self.x2 = x1 + math.cos(math.radians(angle))
\end_layout

\begin_layout Plain Layout

        self.y2 = y1 + math.sin(math.radians(angle))
\end_layout

\begin_layout Plain Layout

        self.angle = angle
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def add(self, vector):
\end_layout

\begin_layout Plain Layout

	"""Returns the resultant vector of the addition of this and another vector"""
\end_layout

\begin_layout Plain Layout

        newx = self.getDx() + vector.getDx()
\end_layout

\begin_layout Plain Layout

        newy = self.getDy() + vector.getDy()
\end_layout

\begin_layout Plain Layout

        return Vector(self.x2, self.y2, self.x1 + newx, self.y1 + newy)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def getMagnitude(self):
\end_layout

\begin_layout Plain Layout

	"""Returns the length of this vector"""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        return math.sqrt((self.y2-self.y1)**2 + (self.x2-self.x1)**2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def getDx(self):
\end_layout

\begin_layout Plain Layout

	"""Returns the x-length of the vector"""
\end_layout

\begin_layout Plain Layout

        return math.fabs(self.x2 - self.x1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def getDy(self):
\end_layout

\begin_layout Plain Layout

	"""Returns the y-length of the vector"""
\end_layout

\begin_layout Plain Layout

        return math.fabs(self.y2 - self.y1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def dotProduct(self, vector):
\end_layout

\begin_layout Plain Layout

	"""Returns the scalar product of this vector and another"""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        return self.getDx()*vector.getDx() + self.getDy()*vector.getDy()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Rectangle():
\end_layout

\begin_layout Plain Layout

    """A simple rectangle of vectors."""
\end_layout

\begin_layout Plain Layout

    def __init__(self, TopLeft, BottomLeft, BottomRight, TopRight):
\end_layout

\begin_layout Plain Layout

        TopSide = Vector(TopLeft[0], TopLeft[1], TopRight[0], TopRight[1])
\end_layout

\begin_layout Plain Layout

        LeftSide = Vector(TopLeft[0], TopLeft[1], BottomLeft[0], BottomLeft[1])
\end_layout

\begin_layout Plain Layout

        BottomSide = Vector(BottomLeft[0], BottomLeft[1], BottomRight[0],
 BottomRight[1])
\end_layout

\begin_layout Plain Layout

        RightSide = Vector(TopRight[0], TopRight[1], BottomRight[0], BottomRight
[1])
\end_layout

\begin_layout Plain Layout

        self.myVectors = [TopSide, LeftSide, RightSide, BottomSide]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def collides(self, vector):
\end_layout

\begin_layout Plain Layout

        """Checks whether a vector intersects with the rectangle"""
\end_layout

\begin_layout Plain Layout

	for v in self.myVectors:
\end_layout

\begin_layout Plain Layout

            if intersect(v, vector):
\end_layout

\begin_layout Plain Layout

                return True
\end_layout

\begin_layout Plain Layout

        return False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def getAngleOfIntersection(vecA, vecB):
\end_layout

\begin_layout Plain Layout

    """a dot b / mag(a) mag(b)"""
\end_layout

\begin_layout Plain Layout

    num = vecA.dotProduct(vecB)
\end_layout

\begin_layout Plain Layout

    denom = vecA.getMagnitude() * vecB.getMagnitude()
\end_layout

\begin_layout Plain Layout

    ang =  math.degrees(math.acos(num/denom))
\end_layout

\begin_layout Plain Layout

    print ang
\end_layout

\begin_layout Plain Layout

    if ang > 90:
\end_layout

\begin_layout Plain Layout

        diff = ang - 90
\end_layout

\begin_layout Plain Layout

        ang = 90 - diff
\end_layout

\begin_layout Plain Layout

    return ang
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def getDeltaT(time1, time2):
\end_layout

\begin_layout Plain Layout

    """Returns the difference between 2 time.time instances"""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return time2 - time1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def getPoints(x1, y1, x2, y2):
\end_layout

\begin_layout Plain Layout

    """Returns a list of pixels on the line joining (x1,y1) to (x2, y2)"""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    angle = math.atan2(y2-y1, x2-x1)
\end_layout

\begin_layout Plain Layout

    values = []
\end_layout

\begin_layout Plain Layout

    for x in range(1,int(math.sqrt((y2-y1)**2 + (x2-x1)**2))+2):
\end_layout

\begin_layout Plain Layout

        values.append([math.floor(x1 + x*math.cos(angle)), math.floor(y1 + x*math.sin
(angle))])
\end_layout

\begin_layout Plain Layout

    return values
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def intersect(vectorA, vectorB):
\end_layout

\begin_layout Plain Layout

    """Checks whether two vectors intersect"""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    a = getPoints(vectorA.x1, vectorA.y1, vectorA.x2, vectorA.y2)
\end_layout

\begin_layout Plain Layout

    b = getPoints(vectorB.x1, vectorB.y1, vectorB.x2, vectorB.y2)
\end_layout

\begin_layout Plain Layout

    for c in a:
\end_layout

\begin_layout Plain Layout

        if c in b:
\end_layout

\begin_layout Plain Layout

            return True
\end_layout

\begin_layout Plain Layout

    return False
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
mapGen.py
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

__author__ = 'harry'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import random
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def generateMap(width, height):
\end_layout

\begin_layout Plain Layout

    """Generate an array that represent a map"""
\end_layout

\begin_layout Plain Layout

    #Split the screen into 50px blocks
\end_layout

\begin_layout Plain Layout

    toplefts_x = [x for x in range(0, width+1, 100)]
\end_layout

\begin_layout Plain Layout

    toplefts_y = [x for x in range(150, (height+1)-150, 100)]
\end_layout

\begin_layout Plain Layout

    numX = len(toplefts_x)
\end_layout

\begin_layout Plain Layout

    numY = len(toplefts_y)
\end_layout

\begin_layout Plain Layout

    #Initialise map array
\end_layout

\begin_layout Plain Layout

    Map = []
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    #We want to have some buildings here and there
\end_layout

\begin_layout Plain Layout

    #But we cannot put them over the tanks
\end_layout

\begin_layout Plain Layout

    #Tanks spawn in the top and bottom, y=100 and y=700
\end_layout

\begin_layout Plain Layout

    #So we cut out ranges 0>y>150 and height-150 > y > height
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    #We now want a small chance for a building to gen, and perhaps a tiny
 chance of a 2x2
\end_layout

\begin_layout Plain Layout

    possibleBlocks = len(toplefts_x)
\end_layout

\begin_layout Plain Layout

    for i in range(possibleBlocks):
\end_layout

\begin_layout Plain Layout

        #Random number generator picks the fill for the block
\end_layout

\begin_layout Plain Layout

        toSpawn = random.randint(0,60)
\end_layout

\begin_layout Plain Layout

        #Add a single building
\end_layout

\begin_layout Plain Layout

        if toSpawn > 50:
\end_layout

\begin_layout Plain Layout

            xPos = i % numX
\end_layout

\begin_layout Plain Layout

            yPos = i % numY
\end_layout

\begin_layout Plain Layout

            Map.append([xPos, yPos, 1])
\end_layout

\begin_layout Plain Layout

        #Add a 2x2
\end_layout

\begin_layout Plain Layout

        elif toSpawn == 30:
\end_layout

\begin_layout Plain Layout

            xPos = i % numX
\end_layout

\begin_layout Plain Layout

            yPos = i % numY
\end_layout

\begin_layout Plain Layout

            Map.append([xPos, yPos, 2])
\end_layout

\begin_layout Plain Layout

    return Map
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
messages.py
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

__author__ = 'harry'
\end_layout

\begin_layout Plain Layout

import wx
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def YesNo(parent, question, caption = 'Yes or no?'):
\end_layout

\begin_layout Plain Layout

    dlg = wx.MessageDialog(parent, question, caption, wx.YES_NO | wx.ICON_QUESTION)
\end_layout

\begin_layout Plain Layout

    result = dlg.ShowModal() == wx.ID_YES
\end_layout

\begin_layout Plain Layout

    dlg.Destroy()
\end_layout

\begin_layout Plain Layout

    return result
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def ServerRun(parent):
\end_layout

\begin_layout Plain Layout

    dlg = wx.MessageDialog(parent, "Server about to start.
 Press OK.
 (Window will crash)", "Server running", wx.OK | wx.ICON_ASTERISK)
\end_layout

\begin_layout Plain Layout

    dlg.ShowModal()
\end_layout

\begin_layout Plain Layout

    dlg.Destroy()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def Info(parent, message, caption = 'Insert program title'):
\end_layout

\begin_layout Plain Layout

    dlg = wx.MessageDialog(parent, message, caption, wx.OK | wx.ICON_INFORMATION)
\end_layout

\begin_layout Plain Layout

    dlg.ShowModal()
\end_layout

\begin_layout Plain Layout

    dlg.Destroy()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def Warn(parent, message, caption = 'Warning!'):
\end_layout

\begin_layout Plain Layout

    dlg = wx.MessageDialog(parent, message, caption, wx.OK | wx.ICON_WARNING)
\end_layout

\begin_layout Plain Layout

    dlg.ShowModal()
\end_layout

\begin_layout Plain Layout

    dlg.Destroy()
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Client Code
\end_layout

\begin_layout Subsubsection
aws.py
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

__author__ = 'harry'
\end_layout

\begin_layout Plain Layout

import login
\end_layout

\begin_layout Plain Layout

import argparse
\end_layout

\begin_layout Plain Layout

import getpass
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if __name__ == "__main__":
\end_layout

\begin_layout Plain Layout

    parser = argparse.ArgumentParser(description="start AWS.")
\end_layout

\begin_layout Plain Layout

    parser.add_argument('--username', '-u', help='Username for GUI-less login')
\end_layout

\begin_layout Plain Layout

    parser.add_argument('--password', '-p', help='Password for GUI-less login')
\end_layout

\begin_layout Plain Layout

    args = vars(parser.parse_args())
\end_layout

\begin_layout Plain Layout

    if args['username'] == None:
\end_layout

\begin_layout Plain Layout

        login.startLogin()
\end_layout

\begin_layout Plain Layout

    elif args['password'] == None:
\end_layout

\begin_layout Plain Layout

        args['password'] = getpass.getpass()
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
color.py
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

### Default colour names, as RGB triplets
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

red = (255, 0, 0)
\end_layout

\begin_layout Plain Layout

green = (0, 255, 0)
\end_layout

\begin_layout Plain Layout

blue = (0, 0, 255)
\end_layout

\begin_layout Plain Layout

black = (0, 0, 0)
\end_layout

\begin_layout Plain Layout

white = (255, 255, 255)
\end_layout

\begin_layout Plain Layout

dark_red = (127, 0, 0)
\end_layout

\begin_layout Plain Layout

dark_green = (0, 102, 0)
\end_layout

\begin_layout Plain Layout

dark_blue = (0, 0, 127)
\end_layout

\begin_layout Plain Layout

dark_gray = (76, 76, 76)
\end_layout

\begin_layout Plain Layout

gray = (127, 127, 127)
\end_layout

\begin_layout Plain Layout

light_gray = (178, 178, 178)
\end_layout

\begin_layout Plain Layout

yellow = (229, 204, 0)
\end_layout

\begin_layout Plain Layout

brown = (127, 89, 0)
\end_layout

\begin_layout Plain Layout

pink = (255, 0, 204)
\end_layout

\begin_layout Plain Layout

purple = (153, 0, 178)
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Errors.py
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

__author__ = 'harry'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class GameInProgressException(Exception):
\end_layout

\begin_layout Plain Layout

    def __init__(self):
\end_layout

\begin_layout Plain Layout

        self.message = "Game is in progress"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class HostDisconnectedException(Exception):
\end_layout

\begin_layout Plain Layout

    def __init__(self):
\end_layout

\begin_layout Plain Layout

        self.message = "The host unexpectedly disconnected"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class NoConnectionException(Exception):
\end_layout

\begin_layout Plain Layout

    def __init__(self):
\end_layout

\begin_layout Plain Layout

        self.message = "No connection could be made"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class EndOfGame(Exception):
\end_layout

\begin_layout Plain Layout

    def __init__(self, message):
\end_layout

\begin_layout Plain Layout

        self.message = str(message)
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
game_calcs.py
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

__author__ = 'harry'
\end_layout

\begin_layout Plain Layout

import math
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Point():
\end_layout

\begin_layout Plain Layout

    """A class to define a point in 2D space"""
\end_layout

\begin_layout Plain Layout

    def __init__(self, x, y):
\end_layout

\begin_layout Plain Layout

        self.x = x
\end_layout

\begin_layout Plain Layout

        self.y = y
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Vector():
\end_layout

\begin_layout Plain Layout

    """A class to define a vector using 2 points"""
\end_layout

\begin_layout Plain Layout

    def __init__(self, x1, y1, x2, y2):
\end_layout

\begin_layout Plain Layout

        self.x1 = x1
\end_layout

\begin_layout Plain Layout

        self.x2 = x2
\end_layout

\begin_layout Plain Layout

        self.y1 = y1
\end_layout

\begin_layout Plain Layout

        self.y2 = y2
\end_layout

\begin_layout Plain Layout

        self.angle = math.degrees(math.atan2(y2 - y1, x2 - x1))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def update(self, x1, y1, x2, y2):
\end_layout

\begin_layout Plain Layout

        self.x1 = x1
\end_layout

\begin_layout Plain Layout

        self.x2 = x2
\end_layout

\begin_layout Plain Layout

        self.y1 = y1
\end_layout

\begin_layout Plain Layout

        self.y2 = y2
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def useAngle(self, x1, y1, mag, angle):
\end_layout

\begin_layout Plain Layout

        self.x1 = x1
\end_layout

\begin_layout Plain Layout

        self.y1 = y1
\end_layout

\begin_layout Plain Layout

        self.x2 = x1 + math.cos(math.radians(angle))
\end_layout

\begin_layout Plain Layout

        self.y2 = y1 + math.sin(math.radians(angle))
\end_layout

\begin_layout Plain Layout

        self.angle = angle
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def add(self, vector):
\end_layout

\begin_layout Plain Layout

        newx = self.getDx() + vector.getDx()
\end_layout

\begin_layout Plain Layout

        newy = self.getDy() + vector.getDy()
\end_layout

\begin_layout Plain Layout

        return Vector(self.x2, self.y2, self.x1 + newx, self.y1 + newy)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def getMagnitude(self):
\end_layout

\begin_layout Plain Layout

        return math.sqrt((self.y2 - self.y1) ** 2 + (self.x2 - self.x1) ** 2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def getDx(self):
\end_layout

\begin_layout Plain Layout

        return (self.x2 - self.x1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def getDy(self):
\end_layout

\begin_layout Plain Layout

        return (self.y2 - self.y1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def dotProduct(self, vector):
\end_layout

\begin_layout Plain Layout

        return (self.getDx() * vector.getDx()) + (self.getDy() * vector.getDy())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Rectangle():
\end_layout

\begin_layout Plain Layout

    def __init__(self, TopLeft, BottomLeft, BottomRight, TopRight):
\end_layout

\begin_layout Plain Layout

        TopSide = Vector(TopLeft[0], TopLeft[1], TopRight[0], TopRight[1])
\end_layout

\begin_layout Plain Layout

        LeftSide = Vector(TopLeft[0], TopLeft[1], BottomLeft[0], BottomLeft[1])
\end_layout

\begin_layout Plain Layout

        BottomSide = Vector(BottomLeft[0], BottomLeft[1], BottomRight[0],
 BottomRight[1])
\end_layout

\begin_layout Plain Layout

        RightSide = Vector(TopRight[0], TopRight[1], BottomRight[0], BottomRight
[1])
\end_layout

\begin_layout Plain Layout

        self.myVectors = [TopSide, LeftSide, RightSide, BottomSide]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def collides(self, vector):
\end_layout

\begin_layout Plain Layout

        for v in self.myVectors:
\end_layout

\begin_layout Plain Layout

            if intersect(v, vector):
\end_layout

\begin_layout Plain Layout

                return True
\end_layout

\begin_layout Plain Layout

        return False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def getAngleOfIntersection(vecA, vecB):
\end_layout

\begin_layout Plain Layout

    """a dot b / mag(a) mag(b)"""
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        #Set numerator and denom
\end_layout

\begin_layout Plain Layout

        num = vecA.dotProduct(vecB)
\end_layout

\begin_layout Plain Layout

        denom = vecA.getMagnitude() * vecB.getMagnitude()
\end_layout

\begin_layout Plain Layout

        #Angle is cos-1(A,B / |A||B|)
\end_layout

\begin_layout Plain Layout

        ang = math.degrees(math.acos(num / denom))
\end_layout

\begin_layout Plain Layout

        return ang
\end_layout

\begin_layout Plain Layout

    except Exception as ex:
\end_layout

\begin_layout Plain Layout

        print "Exception in getangleofintersection: " + str(ex)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def getPoints(x1, y1, x2, y2):
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        angle = math.atan2(y2 - y1, x2 - x1)
\end_layout

\begin_layout Plain Layout

        values = []
\end_layout

\begin_layout Plain Layout

        for x in range(1, int(math.sqrt((y2 - y1) ** 2 + (x2 - x1) ** 2))
 + 5):
\end_layout

\begin_layout Plain Layout

            values.append([int(x1 + x * math.cos(angle)), int(y1 + x * math.sin(ang
le))])
\end_layout

\begin_layout Plain Layout

        return values
\end_layout

\begin_layout Plain Layout

    except Exception as ex:
\end_layout

\begin_layout Plain Layout

        print "Exception in getpoints: " + str(ex)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def intersect(vectorA, vectorB):
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        a = getPoints(vectorA.x1, vectorA.y1, vectorA.x2, vectorA.y2)
\end_layout

\begin_layout Plain Layout

        b = getPoints(vectorB.x1, vectorB.y1, vectorB.x2, vectorB.y2)
\end_layout

\begin_layout Plain Layout

        for c in a:
\end_layout

\begin_layout Plain Layout

            if c in b:
\end_layout

\begin_layout Plain Layout

                return True
\end_layout

\begin_layout Plain Layout

        return False
\end_layout

\begin_layout Plain Layout

    except Exception as ex:
\end_layout

\begin_layout Plain Layout

        print "Exception in intersect: " + str(ex)
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
login.py
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import hashlib
\end_layout

\begin_layout Plain Layout

import os
\end_layout

\begin_layout Plain Layout

import sys
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import wx
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import games
\end_layout

\begin_layout Plain Layout

import loginGui
\end_layout

\begin_layout Plain Layout

import netComms
\end_layout

\begin_layout Plain Layout

import messages
\end_layout

\begin_layout Plain Layout

import SelectATank
\end_layout

\begin_layout Plain Layout

from Errors import *
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def getConfiguration(conf, keyword):
\end_layout

\begin_layout Plain Layout

    for a in conf:
\end_layout

\begin_layout Plain Layout

        if keyword in a and "#" not in a:
\end_layout

\begin_layout Plain Layout

            toRet = a.split("=")
\end_layout

\begin_layout Plain Layout

            print toRet
\end_layout

\begin_layout Plain Layout

            return toRet[1]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class NewAccountForm(loginGui.newAccount):
\end_layout

\begin_layout Plain Layout

    """A class to handle the account creation screen"""
\end_layout

\begin_layout Plain Layout

    def __init__(self, parent):
\end_layout

\begin_layout Plain Layout

        loginGui.newAccount.__init__(self, parent)
\end_layout

\begin_layout Plain Layout

        self.parent = parent
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def createAccount(self, event):
\end_layout

\begin_layout Plain Layout

        """Asks the login server to add the account"""
\end_layout

\begin_layout Plain Layout

        #Open the config
\end_layout

\begin_layout Plain Layout

        try:
\end_layout

\begin_layout Plain Layout

            r = open("login.conf", "r")
\end_layout

\begin_layout Plain Layout

        except IOError:
\end_layout

\begin_layout Plain Layout

            messages.Warn("Could not open login.conf from directory %s", str(os.get
cwd()))
\end_layout

\begin_layout Plain Layout

            sys.exit()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        config = r.read().split("
\backslash
n")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #This is stored in the config file
\end_layout

\begin_layout Plain Layout

        self.ipAddr = getConfiguration(config, "ip_address")
\end_layout

\begin_layout Plain Layout

        self.port = getConfiguration(config, "port")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        r.close()
\end_layout

\begin_layout Plain Layout

        if len(self.passB.Value) < 5:
\end_layout

\begin_layout Plain Layout

            messages.Warn(self.parent, "Passwords must be at least 5 characters
 long")
\end_layout

\begin_layout Plain Layout

        elif self.userBox.Value != "" and self.passB.Value != "":
\end_layout

\begin_layout Plain Layout

            conn = netComms.networkComms(self.ipAddr, self.port)
\end_layout

\begin_layout Plain Layout

            conn.send(["CREATE", [self.userBox.Value.lower(), hashlib.sha1(self.passB.V
alue).hexdigest()]])
\end_layout

\begin_layout Plain Layout

            self.process(conn.recieved)
\end_layout

\begin_layout Plain Layout

            conn.close()
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            #show a warning
\end_layout

\begin_layout Plain Layout

            messages.Warn(self.parent, "Please enter both a username and password
 to create an account")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def process(self, message):
\end_layout

\begin_layout Plain Layout

	"""Processes the server response"""
\end_layout

\begin_layout Plain Layout

        if message == "UsernameException":
\end_layout

\begin_layout Plain Layout

            messages.Info(self.parent, "That username is in use.
 Please choose another.")
\end_layout

\begin_layout Plain Layout

        if message == "LoginFailure":
\end_layout

\begin_layout Plain Layout

            messages.Warn(self.parent, "Login failed.
 Wrong username/password.")
\end_layout

\begin_layout Plain Layout

        if message == "COMPLETE":
\end_layout

\begin_layout Plain Layout

            messages.Info(self.parent, "Account created.
 Please log in.")
\end_layout

\begin_layout Plain Layout

            self.Show(False)
\end_layout

\begin_layout Plain Layout

        if type((0, 0)) == type(message):
\end_layout

\begin_layout Plain Layout

            self.loginComplete(message)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class LoginForm(loginGui.MainFrame):
\end_layout

\begin_layout Plain Layout

    """A class to handle the main login GUI"""
\end_layout

\begin_layout Plain Layout

    def __init__(self, parent):
\end_layout

\begin_layout Plain Layout

        loginGui.MainFrame.__init__(self, parent)
\end_layout

\begin_layout Plain Layout

        self.parent = parent
\end_layout

\begin_layout Plain Layout

        self.readConfig()
\end_layout

\begin_layout Plain Layout

        self.a = games.load_sound("res/Sounds/WoT-Main-Theme.ogg")
\end_layout

\begin_layout Plain Layout

        self.a.play()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def readConfig(self):
\end_layout

\begin_layout Plain Layout

	"""Reads the configuration file for ip address and port"""
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

	#the client will provide a configuration file
\end_layout

\begin_layout Plain Layout

        try:
\end_layout

\begin_layout Plain Layout

            r = open("login.conf", "r")
\end_layout

\begin_layout Plain Layout

        except IOError:
\end_layout

\begin_layout Plain Layout

            thing = str("Could not locate login.conf in directory {0}".format(str(
os.getcwd())))
\end_layout

\begin_layout Plain Layout

            messages.Warn(self.parent, thing)
\end_layout

\begin_layout Plain Layout

            sys.exit([7])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        config = r.read().split("
\backslash
n")
\end_layout

\begin_layout Plain Layout

        self.ipAddr = getConfiguration(config, "ip_address")
\end_layout

\begin_layout Plain Layout

        self.port = getConfiguration(config, "port")
\end_layout

\begin_layout Plain Layout

        r.close()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def suchSending(self, event):
\end_layout

\begin_layout Plain Layout

	"""Send the login credentials to the server"""
\end_layout

\begin_layout Plain Layout

        try:
\end_layout

\begin_layout Plain Layout

            self.conn = netComms.networkComms(self.ipAddr, self.port)
\end_layout

\begin_layout Plain Layout

            self.conn.send(["LOGIN", [self.userBox.Value.lower(), hashlib.sha1(self.pas
sBox.Value).hexdigest()]])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        except NoConnectionException:
\end_layout

\begin_layout Plain Layout

            thing = "Could not connect to login server at {0}".format(str(self.ipA
ddr) + ":" + str(self.port))
\end_layout

\begin_layout Plain Layout

            messages.Warn(self.parent, thing)
\end_layout

\begin_layout Plain Layout

            sys.exit([7])
\end_layout

\begin_layout Plain Layout

        recv = self.conn.recieved
\end_layout

\begin_layout Plain Layout

        self.conn.close()
\end_layout

\begin_layout Plain Layout

        self.process(recv)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def soClear(self, event):
\end_layout

\begin_layout Plain Layout

	"""Clear the username/password boxes"""
\end_layout

\begin_layout Plain Layout

        self.userBox.Value = ""
\end_layout

\begin_layout Plain Layout

        self.passBox.Value = ""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def doCreate(self, event):
\end_layout

\begin_layout Plain Layout

        """Start the creation window"""
\end_layout

\begin_layout Plain Layout

        appyapp = wx.App(False)
\end_layout

\begin_layout Plain Layout

        framey = NewAccountForm(None)
\end_layout

\begin_layout Plain Layout

        framey.Show(True)
\end_layout

\begin_layout Plain Layout

        appyapp.MainLoop()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def process(self, message):
\end_layout

\begin_layout Plain Layout

        """Process the server's response"""
\end_layout

\begin_layout Plain Layout

        if message == "UsernameException":
\end_layout

\begin_layout Plain Layout

            messages.Info(self.parent, "That username is in use.
 Please choose another.")
\end_layout

\begin_layout Plain Layout

        if message == "LoginFailure":
\end_layout

\begin_layout Plain Layout

            messages.Warn(self.parent, "Login failed.
 Wrong username/password.")
\end_layout

\begin_layout Plain Layout

        if message == "COMPLETE":
\end_layout

\begin_layout Plain Layout

            messages.Info(self.parent, "Account created.
 Please log in.")
\end_layout

\begin_layout Plain Layout

        if type((0, 0)) == type(message):
\end_layout

\begin_layout Plain Layout

            self.loginComplete(message)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def loginComplete(self, message):
\end_layout

\begin_layout Plain Layout

	"""Server has logged us in, proceed to next screen"""
\end_layout

\begin_layout Plain Layout

        username = str(message[0])
\end_layout

\begin_layout Plain Layout

        progressXPs = message[2:9]
\end_layout

\begin_layout Plain Layout

        owned = message[10:]
\end_layout

\begin_layout Plain Layout

        self.Show(False)
\end_layout

\begin_layout Plain Layout

        self.a.stop()
\end_layout

\begin_layout Plain Layout

        while True:
\end_layout

\begin_layout Plain Layout

            try:
\end_layout

\begin_layout Plain Layout

                SelectATank.main(username, progressXPs, owned)
\end_layout

\begin_layout Plain Layout

            except Exception as ex:
\end_layout

\begin_layout Plain Layout

                import sys
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

                print "exiting because " + str(ex)
\end_layout

\begin_layout Plain Layout

                sys.exit()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def startLogin():
\end_layout

\begin_layout Plain Layout

    """The main method for starting the GUI"""
\end_layout

\begin_layout Plain Layout

    app = wx.App(False)
\end_layout

\begin_layout Plain Layout

    frame = LoginForm(None)
\end_layout

\begin_layout Plain Layout

    frame.Show(True)
\end_layout

\begin_layout Plain Layout

    app.MainLoop()
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
messages.py
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

__author__ = 'harry'
\end_layout

\begin_layout Plain Layout

import wx
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def YesNo(parent, question, caption='Yes or no?'):
\end_layout

\begin_layout Plain Layout

    """Brings up a simple yes or no dialog"""
\end_layout

\begin_layout Plain Layout

    dlg = wx.MessageDialog(parent, question, caption, wx.YES_NO | wx.ICON_QUESTION)
\end_layout

\begin_layout Plain Layout

    result = dlg.ShowModal() == wx.ID_YES
\end_layout

\begin_layout Plain Layout

    dlg.Destroy()
\end_layout

\begin_layout Plain Layout

    return result
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def Info(parent, message, caption='Info'):
\end_layout

\begin_layout Plain Layout

    """Brings up an information box"""
\end_layout

\begin_layout Plain Layout

    dlg = wx.MessageDialog(parent, message, caption, wx.OK | wx.ICON_INFORMATION)
\end_layout

\begin_layout Plain Layout

    dlg.ShowModal()
\end_layout

\begin_layout Plain Layout

    dlg.Destroy()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def Warn(parent, message, caption='Warning!'):
\end_layout

\begin_layout Plain Layout

    """Brings up a warning box"""
\end_layout

\begin_layout Plain Layout

    dlg = wx.MessageDialog(parent, message, caption, wx.OK | wx.ICON_WARNING)
\end_layout

\begin_layout Plain Layout

    dlg.ShowModal()
\end_layout

\begin_layout Plain Layout

    dlg.Destroy()
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
netcomms.py
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import socket
\end_layout

\begin_layout Plain Layout

import pickle
\end_layout

\begin_layout Plain Layout

from Errors import *
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class networkComms():
\end_layout

\begin_layout Plain Layout

    def __init__(self, ip, port):
\end_layout

\begin_layout Plain Layout

	"""Open a connection with the server"""
\end_layout

\begin_layout Plain Layout

        self.ip = ip
\end_layout

\begin_layout Plain Layout

        self.port = port
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        try:
\end_layout

\begin_layout Plain Layout

            self.sock = socket.create_connection((self.ip, self.port))
\end_layout

\begin_layout Plain Layout

        except Exception as ex:
\end_layout

\begin_layout Plain Layout

            print "Error whilst init netcomms: " + str(ex)
\end_layout

\begin_layout Plain Layout

            raise NoConnectionException()
\end_layout

\begin_layout Plain Layout

        self.last = 0
\end_layout

\begin_layout Plain Layout

        self.retries = 0
\end_layout

\begin_layout Plain Layout

        self.lastRetries = 0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def send(self, message):
\end_layout

\begin_layout Plain Layout

	"""Send a specified message to the server (pickled)"""
\end_layout

\begin_layout Plain Layout

        #"""Dial the 9th circle of hell and ask for lucifer to process our
 request"""
\end_layout

\begin_layout Plain Layout

        #print "SEND: " + message
\end_layout

\begin_layout Plain Layout

        self.toSend = pickle.dumps(message)
\end_layout

\begin_layout Plain Layout

        try:
\end_layout

\begin_layout Plain Layout

            self.sock.sendall(self.toSend)
\end_layout

\begin_layout Plain Layout

            self.recieved = pickle.loads(self.sock.recv(2048))
\end_layout

\begin_layout Plain Layout

            if self.last != self.recieved:
\end_layout

\begin_layout Plain Layout

                self.last = self.recieved
\end_layout

\begin_layout Plain Layout

            else:
\end_layout

\begin_layout Plain Layout

                self.lastRetries += 1
\end_layout

\begin_layout Plain Layout

                if self.lastRetries == 1000:
\end_layout

\begin_layout Plain Layout

                    raise HostDisconnectedException()
\end_layout

\begin_layout Plain Layout

            self.retries = 0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        except Exception as e:
\end_layout

\begin_layout Plain Layout

            del self.sock
\end_layout

\begin_layout Plain Layout

            self.sock = socket.create_connection((self.ip, self.port))
\end_layout

\begin_layout Plain Layout

            self.retries += 1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            if self.retries == 5:
\end_layout

\begin_layout Plain Layout

                raise HostDisconnectedException()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def close(self):
\end_layout

\begin_layout Plain Layout

	"""Close the active connection"""
\end_layout

\begin_layout Plain Layout

        #print "CLOSING CONNECTION"
\end_layout

\begin_layout Plain Layout

        self.sock.close()
\end_layout

\begin_layout Plain Layout

        del self.sock
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
selectATank.py
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

#!/usr/bin/env python
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import sqlite3
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import wx
\end_layout

\begin_layout Plain Layout

from pygame import *
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import selectGui
\end_layout

\begin_layout Plain Layout

import messages
\end_layout

\begin_layout Plain Layout

import Errors
\end_layout

\begin_layout Plain Layout

import netComms
\end_layout

\begin_layout Plain Layout

import games
\end_layout

\begin_layout Plain Layout

from Errors import *
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def getConfiguration(conf, keyword):
\end_layout

\begin_layout Plain Layout

    """Read the config file and get the specified option"""
\end_layout

\begin_layout Plain Layout

    for a in conf:
\end_layout

\begin_layout Plain Layout

        if keyword in a and "#" not in a:
\end_layout

\begin_layout Plain Layout

            toRet = a.split("=")
\end_layout

\begin_layout Plain Layout

            return toRet[1]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Buy(selectGui.TankBuy):
\end_layout

\begin_layout Plain Layout

    """A class to handle the tank purchase GUI"""
\end_layout

\begin_layout Plain Layout

    def __init__(self, parent, username, xp, alltanks, owner):
\end_layout

\begin_layout Plain Layout

        selectGui.TankBuy.__init__(self, parent)
\end_layout

\begin_layout Plain Layout

        self.username = username
\end_layout

\begin_layout Plain Layout

        self.alltanks = alltanks
\end_layout

\begin_layout Plain Layout

        self.xp = xp
\end_layout

\begin_layout Plain Layout

        self.populate()
\end_layout

\begin_layout Plain Layout

        self.parent = parent
\end_layout

\begin_layout Plain Layout

        self.owner = owner
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def populate(self):
\end_layout

\begin_layout Plain Layout

	"""Put the tank names into the list"""
\end_layout

\begin_layout Plain Layout

        self.xpBox.SetValue("Select a tank to see XP")
\end_layout

\begin_layout Plain Layout

        self.TankBox.SetValue("Select a tank")
\end_layout

\begin_layout Plain Layout

        r = open("login.conf", "r")
\end_layout

\begin_layout Plain Layout

        config = r.read().split("
\backslash
n")
\end_layout

\begin_layout Plain Layout

        self.ipAddr = getConfiguration(config, "ip_address")
\end_layout

\begin_layout Plain Layout

        self.port = getConfiguration(config, "port")
\end_layout

\begin_layout Plain Layout

        r.close()
\end_layout

\begin_layout Plain Layout

        conn = netComms.networkComms(self.ipAddr, int(self.port))
\end_layout

\begin_layout Plain Layout

        conn.send(["OWNED", self.username])
\end_layout

\begin_layout Plain Layout

        owned = conn.recieved
\end_layout

\begin_layout Plain Layout

        conn.close()
\end_layout

\begin_layout Plain Layout

        relaventOwned = owned[1:-2]
\end_layout

\begin_layout Plain Layout

        dataconn = sqlite3.Connection("TankStats.db")
\end_layout

\begin_layout Plain Layout

        cursor = dataconn.cursor()
\end_layout

\begin_layout Plain Layout

        tankname = cursor.execute("SELECT name FROM Tanks;").fetchall()
\end_layout

\begin_layout Plain Layout

        tankname = [x[0] for x in tankname]
\end_layout

\begin_layout Plain Layout

        dataconn.close()
\end_layout

\begin_layout Plain Layout

        conn = netComms.networkComms(self.ipAddr, int(self.port))
\end_layout

\begin_layout Plain Layout

        conn.send(["COSTS"])
\end_layout

\begin_layout Plain Layout

        self.costs = conn.recieved
\end_layout

\begin_layout Plain Layout

        conn.close()
\end_layout

\begin_layout Plain Layout

        self.TankBox.Clear()
\end_layout

\begin_layout Plain Layout

        for i in range(len(tankname)):
\end_layout

\begin_layout Plain Layout

            if relaventOwned[i] == 0:
\end_layout

\begin_layout Plain Layout

                self.TankBox.Append(str(tankname[i]))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def changeTankPrice(self, event):
\end_layout

\begin_layout Plain Layout

	"""Show the correct price of the selected tank"""
\end_layout

\begin_layout Plain Layout

        self.name = self.TankBox.GetValue()
\end_layout

\begin_layout Plain Layout

        tankvalue = self.alltanks.index(self.name)
\end_layout

\begin_layout Plain Layout

        self.xpBox.SetValue(str(self.xp[tankvalue - 1]))
\end_layout

\begin_layout Plain Layout

        self.priceBox.SetValue(str(self.costs[tankvalue]))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def buyTank(self, event):
\end_layout

\begin_layout Plain Layout

	"""Button press event to send the command to buy the tank"""
\end_layout

\begin_layout Plain Layout

        if int(self.xpBox.Value) >= int(self.priceBox.Value):
\end_layout

\begin_layout Plain Layout

            try:
\end_layout

\begin_layout Plain Layout

            # buy the tank
\end_layout

\begin_layout Plain Layout

                assert (self.TankBox.GetSelection() >= 0)
\end_layout

\begin_layout Plain Layout

                conn = netComms.networkComms(self.ipAddr, int(self.port))
\end_layout

\begin_layout Plain Layout

                pastTank = self.alltanks[self.alltanks.index(self.name) - 1]
\end_layout

\begin_layout Plain Layout

                conn.send(["BUY", self.name, self.username, pastTank])
\end_layout

\begin_layout Plain Layout

                a = conn.recieved
\end_layout

\begin_layout Plain Layout

                conn.close()
\end_layout

\begin_layout Plain Layout

                if a == "DONE":
\end_layout

\begin_layout Plain Layout

                    messages.Info(self.parent, "Tank purchased!")
\end_layout

\begin_layout Plain Layout

                    self.owner.refresh(self.owner.username)
\end_layout

\begin_layout Plain Layout

            except AssertionError:
\end_layout

\begin_layout Plain Layout

                messages.Warn(self.parent, "Please select a tank first")
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            messages.Warn(self.parent, "You do not have the XP to purchase
 this tank")
\end_layout

\begin_layout Plain Layout

            self.owner.refresh(self.owner.username)
\end_layout

\begin_layout Plain Layout

            self.Show(False)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def cancel(self, event):
\end_layout

\begin_layout Plain Layout

	"""Close the GUI"""
\end_layout

\begin_layout Plain Layout

        self.owner.refresh(self.owner.username)
\end_layout

\begin_layout Plain Layout

        self.Show(False)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Upgrade(selectGui.UpgradeForm):
\end_layout

\begin_layout Plain Layout

    """A class to handle the tank upgrade GUI"""
\end_layout

\begin_layout Plain Layout

    def __init__(self, parent, tank, xp, username, form):
\end_layout

\begin_layout Plain Layout

        selectGui.UpgradeForm.__init__(self, parent)
\end_layout

\begin_layout Plain Layout

        #For reference
\end_layout

\begin_layout Plain Layout

        self.form = form
\end_layout

\begin_layout Plain Layout

        self.username = username
\end_layout

\begin_layout Plain Layout

        self.parent = parent
\end_layout

\begin_layout Plain Layout

        self.name = tank[0]
\end_layout

\begin_layout Plain Layout

        self.hp = int(tank[1])
\end_layout

\begin_layout Plain Layout

        self.damage = int(tank[2])
\end_layout

\begin_layout Plain Layout

        self.penetration = int(tank[3])
\end_layout

\begin_layout Plain Layout

        self.reload = int(tank[4])
\end_layout

\begin_layout Plain Layout

        self.armour = int(tank[5])
\end_layout

\begin_layout Plain Layout

        self.hullTraverse = float(tank[6])
\end_layout

\begin_layout Plain Layout

        self.turretTraverse = float(tank[7])
\end_layout

\begin_layout Plain Layout

        self.speed = float(tank[8])
\end_layout

\begin_layout Plain Layout

        #Progress is in form XP for each tank
\end_layout

\begin_layout Plain Layout

        self.xp = int(xp)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        self.populateBoxes()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def populateBoxes(self):
\end_layout

\begin_layout Plain Layout

	"""Put the selected tank stats into the boxes"""
\end_layout

\begin_layout Plain Layout

        self.tankL.SetLabel(self.name)
\end_layout

\begin_layout Plain Layout

        self.xpL.SetLabel("XP to spend: " + str(self.xp))
\end_layout

\begin_layout Plain Layout

        self.curHP.SetValue(str(self.hp))
\end_layout

\begin_layout Plain Layout

        self.curDam.SetValue(str(self.damage))
\end_layout

\begin_layout Plain Layout

        self.curArm.SetValue(str(self.armour))
\end_layout

\begin_layout Plain Layout

        self.curPen.SetValue(str(self.penetration))
\end_layout

\begin_layout Plain Layout

        self.curHTra.SetValue(str(self.hullTraverse))
\end_layout

\begin_layout Plain Layout

        self.curTTra.SetValue(str(self.turretTraverse))
\end_layout

\begin_layout Plain Layout

        self.curSpe.SetValue(str(self.speed))
\end_layout

\begin_layout Plain Layout

        self.curRel.SetValue(str(self.reload))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def upHP(self, event):
\end_layout

\begin_layout Plain Layout

	"""Button press event to upgrade HP"""
\end_layout

\begin_layout Plain Layout

        if self.xp >= 10:
\end_layout

\begin_layout Plain Layout

            self.xp -= 10
\end_layout

\begin_layout Plain Layout

            self.hp += int(1000 / self.hp)
\end_layout

\begin_layout Plain Layout

            self.populateBoxes()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def upDam(self, event):
\end_layout

\begin_layout Plain Layout

	"""Button press event to upgrade damage"""
\end_layout

\begin_layout Plain Layout

        if self.xp >= 10:
\end_layout

\begin_layout Plain Layout

            self.xp -= 10
\end_layout

\begin_layout Plain Layout

            self.damage += int(300 / self.damage)
\end_layout

\begin_layout Plain Layout

            self.populateBoxes()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def upArm(self, event):
\end_layout

\begin_layout Plain Layout

	"""Button press event to upgrade armour"""
\end_layout

\begin_layout Plain Layout

        if self.xp >= 10:
\end_layout

\begin_layout Plain Layout

            self.xp -= 10
\end_layout

\begin_layout Plain Layout

            self.armour += int(300 / self.armour)
\end_layout

\begin_layout Plain Layout

            self.populateBoxes()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def upPen(self, event):
\end_layout

\begin_layout Plain Layout

	"""Button press event to upgrade penetration"""
\end_layout

\begin_layout Plain Layout

        if self.xp >= 10:
\end_layout

\begin_layout Plain Layout

            self.xp -= 10
\end_layout

\begin_layout Plain Layout

            self.penetration += int(450 / self.penetration)
\end_layout

\begin_layout Plain Layout

            self.populateBoxes()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def upHTr(self, event):
\end_layout

\begin_layout Plain Layout

	"""Button press event to upgrade hull traverse"""
\end_layout

\begin_layout Plain Layout

        if self.xp >= 10:
\end_layout

\begin_layout Plain Layout

            self.hullTraverse += (5 / self.hullTraverse)
\end_layout

\begin_layout Plain Layout

            self.xp -= 10
\end_layout

\begin_layout Plain Layout

            self.populateBoxes()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def upTTra(self, event):
\end_layout

\begin_layout Plain Layout

	"""Button press event to upgrade turret traverse"""
\end_layout

\begin_layout Plain Layout

        if self.xp >= 10:
\end_layout

\begin_layout Plain Layout

            self.xp -= 10
\end_layout

\begin_layout Plain Layout

            self.turretTraverse += (5 / self.turretTraverse)
\end_layout

\begin_layout Plain Layout

            self.populateBoxes()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def upRel(self, event):
\end_layout

\begin_layout Plain Layout

	"""Button press event to upgrade reload"""
\end_layout

\begin_layout Plain Layout

        if self.xp >= 10:
\end_layout

\begin_layout Plain Layout

            self.xp -= 10
\end_layout

\begin_layout Plain Layout

            self.reload -= int(self.reload / 20)
\end_layout

\begin_layout Plain Layout

            self.populateBoxes()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def upSp(self, event):
\end_layout

\begin_layout Plain Layout

	"""Button press event to upgrade speed"""
\end_layout

\begin_layout Plain Layout

        if self.xp >= 10:
\end_layout

\begin_layout Plain Layout

            self.xp -= 10
\end_layout

\begin_layout Plain Layout

            self.speed += int(3 / self.speed)
\end_layout

\begin_layout Plain Layout

            self.populateBoxes()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def convertToString(self, lst):
\end_layout

\begin_layout Plain Layout

	"""Convert a list of stats into a string"""
\end_layout

\begin_layout Plain Layout

        a = ""
\end_layout

\begin_layout Plain Layout

        for b in lst:
\end_layout

\begin_layout Plain Layout

            a += str(b) + ":"
\end_layout

\begin_layout Plain Layout

        return a
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def getNewStats(self):
\end_layout

\begin_layout Plain Layout

	"""Put the upgraded stats into a server-readable format"""
\end_layout

\begin_layout Plain Layout

        statList = [self.name, self.hp, self.damage, self.penetration, self.reload,
\end_layout

\begin_layout Plain Layout

                    self.armour, self.hullTraverse, self.turretTraverse, self.speed]
\end_layout

\begin_layout Plain Layout

        a = self.convertToString(statList)
\end_layout

\begin_layout Plain Layout

        return a
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def confirmEdit(self, event):
\end_layout

\begin_layout Plain Layout

	"""Ask the user if they are really sure they want to upgrade"""
\end_layout

\begin_layout Plain Layout

        r = open("login.conf", "r")
\end_layout

\begin_layout Plain Layout

        config = r.read().split("
\backslash
n")
\end_layout

\begin_layout Plain Layout

        self.ipAddr = getConfiguration(config, "ip_address")
\end_layout

\begin_layout Plain Layout

        self.port = getConfiguration(config, "port")
\end_layout

\begin_layout Plain Layout

        r.close()
\end_layout

\begin_layout Plain Layout

        conn = netComms.networkComms(self.ipAddr, int(self.port))
\end_layout

\begin_layout Plain Layout

        toSend = ["Update", self.username]
\end_layout

\begin_layout Plain Layout

        toSend.append(self.getNewStats())
\end_layout

\begin_layout Plain Layout

        toSend.append(self.xp)
\end_layout

\begin_layout Plain Layout

        if messages.YesNo(self.parent, "Confirm changes?"):
\end_layout

\begin_layout Plain Layout

            conn.send(toSend)
\end_layout

\begin_layout Plain Layout

            #print "Sent: " + str(toSend)
\end_layout

\begin_layout Plain Layout

            messages.Info(self.parent, "Changes sent.")
\end_layout

\begin_layout Plain Layout

            conn.close()
\end_layout

\begin_layout Plain Layout

            #print "Closed connection to loginserver"
\end_layout

\begin_layout Plain Layout

            self.Show(False)
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            pass
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def cancelEdit(self, event):
\end_layout

\begin_layout Plain Layout

	"""Close the GUI without changing anything"""
\end_layout

\begin_layout Plain Layout

        self.Show(False)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Main(selectGui.MainFrame):
\end_layout

\begin_layout Plain Layout

    """A class to handle the tank selection GUI"""
\end_layout

\begin_layout Plain Layout

    def __init__(self, parent, username, xp, owned):
\end_layout

\begin_layout Plain Layout

        selectGui.MainFrame.__init__(self, parent)
\end_layout

\begin_layout Plain Layout

        self.a = games.load_sound("res/Sounds/WoT-Garage.ogg")
\end_layout

\begin_layout Plain Layout

        self.a.play()
\end_layout

\begin_layout Plain Layout

        self.conn = sqlite3.Connection("TankStats.db")
\end_layout

\begin_layout Plain Layout

        self.cur = self.conn.cursor()
\end_layout

\begin_layout Plain Layout

        #Variables passed from the login form
\end_layout

\begin_layout Plain Layout

        self.username = username
\end_layout

\begin_layout Plain Layout

        self.progress = xp
\end_layout

\begin_layout Plain Layout

        self.parent = parent
\end_layout

\begin_layout Plain Layout

        self.owned = owned
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #Set up config
\end_layout

\begin_layout Plain Layout

        r = open("login.conf", "r")
\end_layout

\begin_layout Plain Layout

        config = r.read().split("
\backslash
n")
\end_layout

\begin_layout Plain Layout

        self.ipAddr = getConfiguration(config, "ip_address")
\end_layout

\begin_layout Plain Layout

        self.port = getConfiguration(config, "port")
\end_layout

\begin_layout Plain Layout

        r.close()
\end_layout

\begin_layout Plain Layout

        #Pull up all known tanks
\end_layout

\begin_layout Plain Layout

        self.tanks = self.cur.execute("SELECT * FROM Tanks;").fetchall()
\end_layout

\begin_layout Plain Layout

        self.allTanks = self.tanks
\end_layout

\begin_layout Plain Layout

        #We only want the tanks that we own
\end_layout

\begin_layout Plain Layout

        for i in range(len(owned) - 1, 0, -1):
\end_layout

\begin_layout Plain Layout

            if owned[i] == 0:
\end_layout

\begin_layout Plain Layout

                self.tanks.pop(i)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        self.conn.close()
\end_layout

\begin_layout Plain Layout

        self.tankChoice.Clear()
\end_layout

\begin_layout Plain Layout

        for i in range(len(self.tanks)):
\end_layout

\begin_layout Plain Layout

            self.tankChoice.Append(self.tanks[i][0])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            self.refresh(self.username)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def toInt(self, lst):
\end_layout

\begin_layout Plain Layout

	"""Convert a list of floats to ints"""
\end_layout

\begin_layout Plain Layout

        for i in range(len(lst)):
\end_layout

\begin_layout Plain Layout

            try:
\end_layout

\begin_layout Plain Layout

                lst[i] = float(lst[i])
\end_layout

\begin_layout Plain Layout

            except Exception:
\end_layout

\begin_layout Plain Layout

                pass
\end_layout

\begin_layout Plain Layout

        return lst
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def battleThread(self, instance):
\end_layout

\begin_layout Plain Layout

	"""Start the main battle thread"""
\end_layout

\begin_layout Plain Layout

        import TankClient
\end_layout

\begin_layout Plain Layout

        #TankClient.setupEnv()
\end_layout

\begin_layout Plain Layout

        a = TankClient.mainGame(instance)
\end_layout

\begin_layout Plain Layout

        return a
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def goToBattle(self, event):
\end_layout

\begin_layout Plain Layout

	"""Set up the client to launch the game engine and then run the game"""
\end_layout

\begin_layout Plain Layout

        try:
\end_layout

\begin_layout Plain Layout

            self.a.stop()
\end_layout

\begin_layout Plain Layout

        except Exception:
\end_layout

\begin_layout Plain Layout

            pass
\end_layout

\begin_layout Plain Layout

        try:
\end_layout

\begin_layout Plain Layout

            assert (self.AddressBox.GetValue() != u"")
\end_layout

\begin_layout Plain Layout

            assert (self.tankChoice.GetSelection() >= 0)
\end_layout

\begin_layout Plain Layout

            instance = [self.username, self.toInt(self.stats), self.host, self.port]
\end_layout

\begin_layout Plain Layout

            #self.Show(False)
\end_layout

\begin_layout Plain Layout

            try:
\end_layout

\begin_layout Plain Layout

                a = self.battleThread(instance)
\end_layout

\begin_layout Plain Layout

            except error as e:
\end_layout

\begin_layout Plain Layout

                #TankClient.setupEnv()
\end_layout

\begin_layout Plain Layout

                print str(e)
\end_layout

\begin_layout Plain Layout

            except games.GamesError as ex:
\end_layout

\begin_layout Plain Layout

                games.screen.quit()
\end_layout

\begin_layout Plain Layout

                print "Error with pygame: " + str(ex)
\end_layout

\begin_layout Plain Layout

        except AssertionError:
\end_layout

\begin_layout Plain Layout

            messages.Warn(self.parent, "Please select a tank and enter a host:port
 combo")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        except NoConnectionException:
\end_layout

\begin_layout Plain Layout

            messages.Warn(self.parent, "There is no server on this port, please
 double check and try again.")
\end_layout

\begin_layout Plain Layout

            self.Show(True)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        except EndOfGame as ex:
\end_layout

\begin_layout Plain Layout

            #print "EX:" + str(ex.message)
\end_layout

\begin_layout Plain Layout

            ex = eval(ex.message)
\end_layout

\begin_layout Plain Layout

            self.Show(True)
\end_layout

\begin_layout Plain Layout

            win = ex[0]
\end_layout

\begin_layout Plain Layout

            xp = ex[1]
\end_layout

\begin_layout Plain Layout

            damage = ex[2]
\end_layout

\begin_layout Plain Layout

            kills = ex[3]
\end_layout

\begin_layout Plain Layout

            if win:
\end_layout

\begin_layout Plain Layout

                messages.Info(self.parent, "You have won!
\backslash
nYou recieved: " + str(xp) + " xp
\backslash
nDamage dealt: " + str(
\end_layout

\begin_layout Plain Layout

                    damage) + " Kills: " + str(kills),
\end_layout

\begin_layout Plain Layout

                              "VICTORY")
\end_layout

\begin_layout Plain Layout

            else:
\end_layout

\begin_layout Plain Layout

                messages.Info(self.parent,
\end_layout

\begin_layout Plain Layout

                              "You have been defeated...
\backslash
nYou recieved: " + str(xp) + " xp
\backslash
nDamage dealt: " + str(damage) + " Kills: " + str(kills), "DEFEAT")
\end_layout

\begin_layout Plain Layout

            #self.Show(False)
\end_layout

\begin_layout Plain Layout

            #del(a)
\end_layout

\begin_layout Plain Layout

            #quit()
\end_layout

\begin_layout Plain Layout

            #except Exception as e:
\end_layout

\begin_layout Plain Layout

            #    messages.Warn(self.parent, "Something went wrong.
 Exiting.
\backslash
nError: "+str(e))
\end_layout

\begin_layout Plain Layout

            #    sys.exit()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def setHost(self, event):
\end_layout

\begin_layout Plain Layout

	"""Take the user input of the host and store it""" 
\end_layout

\begin_layout Plain Layout

        try:
\end_layout

\begin_layout Plain Layout

            hostPort = self.AddressBox.Value.split(":")
\end_layout

\begin_layout Plain Layout

            self.host = hostPort[0]
\end_layout

\begin_layout Plain Layout

            self.port = hostPort[1]
\end_layout

\begin_layout Plain Layout

        except Exception:
\end_layout

\begin_layout Plain Layout

            pass
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def getStats(self, username, tankName):
\end_layout

\begin_layout Plain Layout

	"""Get the users stats for that specific tank"""
\end_layout

\begin_layout Plain Layout

        conn = netComms.networkComms(self.ipAddr, int(self.port))
\end_layout

\begin_layout Plain Layout

        conn.send(["GET", username, tankName])
\end_layout

\begin_layout Plain Layout

        a = (conn.recieved)
\end_layout

\begin_layout Plain Layout

        conn.close()
\end_layout

\begin_layout Plain Layout

        #print self.tankChoice.GetSelection()
\end_layout

\begin_layout Plain Layout

        return a.split(":")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def doStats(self, event):
\end_layout

\begin_layout Plain Layout

	"""Update the text box with the tanks stats"""
\end_layout

\begin_layout Plain Layout

        self.sel = self.tankChoice.GetString(self.tankChoice.GetSelection())
\end_layout

\begin_layout Plain Layout

        #print "SEL " + self.sel
\end_layout

\begin_layout Plain Layout

        self.stats = self.getStats(self.username, self.sel)
\end_layout

\begin_layout Plain Layout

        self.statsBox.Value = ("HP: " + str(self.stats[1]) +
\end_layout

\begin_layout Plain Layout

                               "
\backslash
nDamage (HP average): " + str(self.stats[2]) +
\end_layout

\begin_layout Plain Layout

                               "
\backslash
nPenetration (mm): " + str(self.stats[3]) +
\end_layout

\begin_layout Plain Layout

                               "
\backslash
nReload (ticks): " + str(self.stats[4]) +
\end_layout

\begin_layout Plain Layout

                               "
\backslash
nArmour (mm):" + str(self.stats[5]) +
\end_layout

\begin_layout Plain Layout

                               "
\backslash
nHull Traverse Speed: " + str(self.stats[6]) +
\end_layout

\begin_layout Plain Layout

                               "
\backslash
nTurret Traverse Speed: " + str(self.stats[7]) +
\end_layout

\begin_layout Plain Layout

                               "
\backslash
nSpeed: " + str(self.stats[8]))
\end_layout

\begin_layout Plain Layout

        self.name = self.sel
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def getAllTanks(self):
\end_layout

\begin_layout Plain Layout

	"""Return all possible tanks"""
\end_layout

\begin_layout Plain Layout

        self.conn = sqlite3.Connection("TankStats.db")
\end_layout

\begin_layout Plain Layout

        self.cur = self.conn.cursor()
\end_layout

\begin_layout Plain Layout

        a = self.cur.execute("SELECT name FROM Tanks").fetchall()
\end_layout

\begin_layout Plain Layout

        a = [x[0] for x in a]
\end_layout

\begin_layout Plain Layout

        return a
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def doBuy(self, event):
\end_layout

\begin_layout Plain Layout

	"""Open the tank purchase GUI"""
\end_layout

\begin_layout Plain Layout

        buyApp = wx.App(False)
\end_layout

\begin_layout Plain Layout

        buyFrame = Buy(None, self.username, self.getAllXP(), self.getAllTanks(),
 self)
\end_layout

\begin_layout Plain Layout

        buyFrame.Show(True)
\end_layout

\begin_layout Plain Layout

        buyApp.MainLoop()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def getAllXP(self):
\end_layout

\begin_layout Plain Layout

	"""Get the users progress on all tanks from the server"""
\end_layout

\begin_layout Plain Layout

        conn = netComms.networkComms(self.ipAddr, int(self.port))
\end_layout

\begin_layout Plain Layout

        conn.send(["ALLXP", self.username])
\end_layout

\begin_layout Plain Layout

        return conn.recieved
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def getXP(self, name):
\end_layout

\begin_layout Plain Layout

	"""Get the users progress on one specific tank from the server"""
\end_layout

\begin_layout Plain Layout

        conn = netComms.networkComms(self.ipAddr, int(self.port))
\end_layout

\begin_layout Plain Layout

        conn.send(["XP", str(self.username), str(name)])
\end_layout

\begin_layout Plain Layout

        return conn.recieved
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def doUpgrade(self, event):
\end_layout

\begin_layout Plain Layout

	"""Open the upgrade GUI"""
\end_layout

\begin_layout Plain Layout

        try:
\end_layout

\begin_layout Plain Layout

            upApp = wx.App(False)
\end_layout

\begin_layout Plain Layout

            upFrame = Upgrade(None, self.getStats(self.username, self.sel),
 self.getXP(self.sel), self.username, self)
\end_layout

\begin_layout Plain Layout

            upFrame.Show(True)
\end_layout

\begin_layout Plain Layout

            upApp.MainLoop()
\end_layout

\begin_layout Plain Layout

        except Exception as ex:
\end_layout

\begin_layout Plain Layout

            messages.Warn(self.parent, "Please select a tank first")
\end_layout

\begin_layout Plain Layout

            messages.Warn(self.parent, str(ex))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def refresh(self, username):
\end_layout

\begin_layout Plain Layout

        """Reloads all components"""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #Pull up all known tanks
\end_layout

\begin_layout Plain Layout

        self.conn = sqlite3.Connection("TankStats.db")
\end_layout

\begin_layout Plain Layout

        self.cur = self.conn.cursor()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        self.tanks = self.cur.execute("SELECT * FROM Tanks;").fetchall()
\end_layout

\begin_layout Plain Layout

        #modify the client
\end_layout

\begin_layout Plain Layout

        conn = netComms.networkComms(self.ipAddr, int(self.port))
\end_layout

\begin_layout Plain Layout

        #print "Connection to loginServer made on " + str(self.ipAddr) +
 ":" + str(self.port)
\end_layout

\begin_layout Plain Layout

        conn.send(["OWNED", self.username])
\end_layout

\begin_layout Plain Layout

        self.owned = conn.recieved
\end_layout

\begin_layout Plain Layout

        #print "From server: " + str(self.owned)
\end_layout

\begin_layout Plain Layout

        conn.close()
\end_layout

\begin_layout Plain Layout

        dataconn = sqlite3.Connection("TankStats.db")
\end_layout

\begin_layout Plain Layout

        cur = dataconn.cursor()
\end_layout

\begin_layout Plain Layout

        self.names = cur.execute("SELECT name FROM Tanks").fetchall()
\end_layout

\begin_layout Plain Layout

        dataconn.close()
\end_layout

\begin_layout Plain Layout

        self.names = [x[0] for x in self.names]
\end_layout

\begin_layout Plain Layout

        #print "All names: " + str(self.names)
\end_layout

\begin_layout Plain Layout

        self.tankChoice.Clear()
\end_layout

\begin_layout Plain Layout

        for x in range(len(self.owned) - 2, 1, -1):
\end_layout

\begin_layout Plain Layout

            if self.owned[x] == 0:
\end_layout

\begin_layout Plain Layout

                #print "Pop val is " + str(self.owned[x]) + " " + str(x-1)
 + ":" + str(self.names[x-1])
\end_layout

\begin_layout Plain Layout

                self.names.pop(x - 1)
\end_layout

\begin_layout Plain Layout

        for i in self.names:
\end_layout

\begin_layout Plain Layout

            self.tankChoice.Append(i)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def main(username, xp, owned):
\end_layout

\begin_layout Plain Layout

    """Main method to open the GUI"""
\end_layout

\begin_layout Plain Layout

    app = wx.App(False)
\end_layout

\begin_layout Plain Layout

    frame = Main(None, username, xp, owned)
\end_layout

\begin_layout Plain Layout

    frame.Show(True)
\end_layout

\begin_layout Plain Layout

    app.MainLoop()
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
TankClient.py
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

from threading import Thread
\end_layout

\begin_layout Plain Layout

import time
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

from pygame import *
\end_layout

\begin_layout Plain Layout

from pygame.locals import *
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import color as colour
\end_layout

\begin_layout Plain Layout

import games
\end_layout

\begin_layout Plain Layout

import netComms
\end_layout

\begin_layout Plain Layout

from game_calcs import *
\end_layout

\begin_layout Plain Layout

from Errors import *
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

try:
\end_layout

\begin_layout Plain Layout

    reload(games)
\end_layout

\begin_layout Plain Layout

    games.init(screen_width=1024, screen_height=768, fps=30)
\end_layout

\begin_layout Plain Layout

    pass
\end_layout

\begin_layout Plain Layout

except Exception as ex:
\end_layout

\begin_layout Plain Layout

    print "Error in game init: " + str(ex)
\end_layout

\begin_layout Plain Layout

    games.screen.quit()
\end_layout

\begin_layout Plain Layout

    quit()
\end_layout

\begin_layout Plain Layout

    games.init(screen_width=1024, screen_height=768, fps=30)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class superSquare(games.Sprite):
\end_layout

\begin_layout Plain Layout

    """A generic square class"""
\end_layout

\begin_layout Plain Layout

    def __init__(self, enemy, x, y):
\end_layout

\begin_layout Plain Layout

        if enemy:
\end_layout

\begin_layout Plain Layout

            image = games.load_image("res/Enemy.png")
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            image = games.load_image("res/Friendly.png")
\end_layout

\begin_layout Plain Layout

        super(superSquare, self).__init__(image=image, x=x, y=y)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def updatePos(self, x, y):
\end_layout

\begin_layout Plain Layout

        self.x = x
\end_layout

\begin_layout Plain Layout

        self.y = y
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Player(games.Sprite):
\end_layout

\begin_layout Plain Layout

    """ The main player class.
 """
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def __init__(self, x, y, angle, name, hp, username, turret, team, clientteam
):
\end_layout

\begin_layout Plain Layout

        """ Initialize player sprite.
 """
\end_layout

\begin_layout Plain Layout

        image = games.load_image("res/" + name + "_body.png")
\end_layout

\begin_layout Plain Layout

        super(Player, self).__init__(image=image, x=x, y=y, angle=angle)
\end_layout

\begin_layout Plain Layout

        self.name = name
\end_layout

\begin_layout Plain Layout

        self.username = username
\end_layout

\begin_layout Plain Layout

        self.team = team
\end_layout

\begin_layout Plain Layout

        self.clientTeam = clientteam
\end_layout

\begin_layout Plain Layout

        if self.team == self.clientTeam:
\end_layout

\begin_layout Plain Layout

            self.square = superSquare(False, self.x, self.y - 80)
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            self.square = superSquare(True, self.x, self.y - 80)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        self.hp = int(hp)
\end_layout

\begin_layout Plain Layout

        self.userTag = games.Text(value=self.username, x=x, y=y - 90, color=colour.b
lack, size=20)
\end_layout

\begin_layout Plain Layout

        self.nametag = games.Text(value=name + " " + str(self.hp), x=x, y=y
 - 70, color=colour.black, size=20)
\end_layout

\begin_layout Plain Layout

        games.screen.add(self.nametag)
\end_layout

\begin_layout Plain Layout

        games.screen.add(self.square)
\end_layout

\begin_layout Plain Layout

        games.screen.add(self.userTag)
\end_layout

\begin_layout Plain Layout

        self.maxHp = hp
\end_layout

\begin_layout Plain Layout

        self.state = 0
\end_layout

\begin_layout Plain Layout

        self.turret = turret
\end_layout

\begin_layout Plain Layout

        #print "NAME: "+self.name
\end_layout

\begin_layout Plain Layout

        #print "HP: "+str(self.hp)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def update(self):
\end_layout

\begin_layout Plain Layout

	"""A method to update the tank"""
\end_layout

\begin_layout Plain Layout

        self.nametag.value = self.name + " " + str(int(self.hp))
\end_layout

\begin_layout Plain Layout

        if int(self.hp) < int(self.maxHp) / 2 and self.state == 0:
\end_layout

\begin_layout Plain Layout

            self.image = games.load_image("res/" + self.name + "_body_damaged.png")
\end_layout

\begin_layout Plain Layout

            self.turret.image = games.load_image("res/" + self.name + "_turret_damag
ed.png")
\end_layout

\begin_layout Plain Layout

            self.state = 1
\end_layout

\begin_layout Plain Layout

        self.square.x = self.x
\end_layout

\begin_layout Plain Layout

        self.square.y = self.y - 80
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Turret(games.Sprite):
\end_layout

\begin_layout Plain Layout

    """A class to create a turret"""
\end_layout

\begin_layout Plain Layout

    def __init__(self, x, y, angle, name):
\end_layout

\begin_layout Plain Layout

        image = games.load_image("res/" + name + "_turret.png")
\end_layout

\begin_layout Plain Layout

        super(Turret, self).__init__(image=image, x=x, y=y, angle=angle)
\end_layout

\begin_layout Plain Layout

        self.name = name
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Bullet(games.Sprite):
\end_layout

\begin_layout Plain Layout

    """A class to create a bullet"""
\end_layout

\begin_layout Plain Layout

    image = games.load_image("res/Bullet_Sprite.png")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def __init__(self, x, y, angle, ownerId, damage, bulletID, penetration):
\end_layout

\begin_layout Plain Layout

        super(Bullet, self).__init__(image=Bullet.image, x=x, y=y, angle=angle)
\end_layout

\begin_layout Plain Layout

        self.ownerId = ownerId
\end_layout

\begin_layout Plain Layout

        self.damage = damage
\end_layout

\begin_layout Plain Layout

        self.bulletID = bulletID
\end_layout

\begin_layout Plain Layout

        self.ded = False
\end_layout

\begin_layout Plain Layout

        self.penetration = penetration
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def getBulletVector(self):
\end_layout

\begin_layout Plain Layout

        """Returns the ballistic vector for this bullet"""
\end_layout

\begin_layout Plain Layout

        return Vector(self.x, self.y, self.x + math.cos(math.radians(self.angle))
 * 3,
\end_layout

\begin_layout Plain Layout

                      self.y + math.sin(math.radians(self.angle)) * 3)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def getx1x2(self):
\end_layout

\begin_layout Plain Layout

	"""Returns the endpoints of the vector"""
\end_layout

\begin_layout Plain Layout

        return self.x, self.y, self.x + 5 * math.cos(math.radians(self.angle)),
 self.y + 5 * math.sin(
\end_layout

\begin_layout Plain Layout

            math.radians(self.angle))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def returnValues(self):
\end_layout

\begin_layout Plain Layout

	"""Returns the attributes of the bullet"""
\end_layout

\begin_layout Plain Layout

        return [self.x, self.y, self.angle, self.ownerId, self.damage, self.bulletID,
 self.penetration]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def getVector(self):
\end_layout

\begin_layout Plain Layout

	"""Another method to get the ballistic vector"""
\end_layout

\begin_layout Plain Layout

        x1, y1, x2, y2 = self.getx1x2()
\end_layout

\begin_layout Plain Layout

        return Vector(x1, y1, x2, y2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class LocalPlayer(games.Sprite):
\end_layout

\begin_layout Plain Layout

    """A class to handle the users tank - takes key input"""
\end_layout

\begin_layout Plain Layout

    def __init__(self, x, y, angle, turret, speed, hull_traverse, hp, reload,
 armour, name, id, damage, penetration,
\end_layout

\begin_layout Plain Layout

                 username, team):
\end_layout

\begin_layout Plain Layout

        image = games.load_image("res/" + str(name) + "_body.png")
\end_layout

\begin_layout Plain Layout

        super(LocalPlayer, self).__init__(image=image, x=x, y=y, angle=angle)
\end_layout

\begin_layout Plain Layout

        self.name = name
\end_layout

\begin_layout Plain Layout

        self.team = team
\end_layout

\begin_layout Plain Layout

        self.turret = turret
\end_layout

\begin_layout Plain Layout

        self.penetration = penetration
\end_layout

\begin_layout Plain Layout

        self.bullets = []
\end_layout

\begin_layout Plain Layout

        self.newBullets = None
\end_layout

\begin_layout Plain Layout

        self.username = username
\end_layout

\begin_layout Plain Layout

        self.reload = reload
\end_layout

\begin_layout Plain Layout

        self.damage = damage
\end_layout

\begin_layout Plain Layout

        self.id = id
\end_layout

\begin_layout Plain Layout

        self.va = []
\end_layout

\begin_layout Plain Layout

        self.fire = games.load_sound("res/Sounds/ms-1-45mm.ogg")
\end_layout

\begin_layout Plain Layout

        self.idle = games.load_sound("res/Sounds/idle.ogg")
\end_layout

\begin_layout Plain Layout

        self.moving = games.load_sound("res/Sounds/moving.ogg")
\end_layout

\begin_layout Plain Layout

        self.canMove = False
\end_layout

\begin_layout Plain Layout

        self.turret.canMove = False
\end_layout

\begin_layout Plain Layout

        self.speed = speed
\end_layout

\begin_layout Plain Layout

        self.hull_traverse = hull_traverse
\end_layout

\begin_layout Plain Layout

        self.hp = int(hp)
\end_layout

\begin_layout Plain Layout

        self.maxHp = self.hp
\end_layout

\begin_layout Plain Layout

        self.reload_counter = self.reload
\end_layout

\begin_layout Plain Layout

        self.armour = armour
\end_layout

\begin_layout Plain Layout

        self.userTag = games.Text(value=self.username, x=x, y=y - 90, color=colour.b
lack, size=20)
\end_layout

\begin_layout Plain Layout

        self.nametag = games.Text(value=str(self.name) + " " + str(self.hp),
\end_layout

\begin_layout Plain Layout

                                  x=x,
\end_layout

\begin_layout Plain Layout

                                  y=y - 70,
\end_layout

\begin_layout Plain Layout

                                  color=colour.black,
\end_layout

\begin_layout Plain Layout

                                  size=20)
\end_layout

\begin_layout Plain Layout

        self.reloadText = games.Text(value="Reload in: " + str(self.reload_counter)
, left=10, top=10, color=colour.red,
\end_layout

\begin_layout Plain Layout

                                     size=30)
\end_layout

\begin_layout Plain Layout

        self.orig_height = self.height - 30
\end_layout

\begin_layout Plain Layout

        self.orig_width = self.width
\end_layout

\begin_layout Plain Layout

        games.screen.add(self.userTag)
\end_layout

\begin_layout Plain Layout

        games.screen.add(self.reloadText)
\end_layout

\begin_layout Plain Layout

        games.screen.add(self.nametag)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def update(self):
\end_layout

\begin_layout Plain Layout

	"""Checks for user input and updates the client"""
\end_layout

\begin_layout Plain Layout

        #Check for keyboard input
\end_layout

\begin_layout Plain Layout

        if self.canMove:
\end_layout

\begin_layout Plain Layout

            self.last_x = self.x
\end_layout

\begin_layout Plain Layout

            self.last_y = self.y
\end_layout

\begin_layout Plain Layout

            self.turret.last_x = self.turret.x
\end_layout

\begin_layout Plain Layout

            self.turret.last_y = self.turret.y
\end_layout

\begin_layout Plain Layout

            self.last_a = self.angle
\end_layout

\begin_layout Plain Layout

            if games.keyboard.is_pressed(games.K_w):
\end_layout

\begin_layout Plain Layout

                self.x += self.speed * math.cos(math.radians(self.angle))
\end_layout

\begin_layout Plain Layout

                self.y += self.speed * math.sin(math.radians(self.angle))
\end_layout

\begin_layout Plain Layout

                self.turret.x += self.speed * math.cos(math.radians(self.angle))
\end_layout

\begin_layout Plain Layout

                self.turret.y += self.speed * math.sin(math.radians(self.angle))
\end_layout

\begin_layout Plain Layout

                try:
\end_layout

\begin_layout Plain Layout

                    self.idle.stop()
\end_layout

\begin_layout Plain Layout

                except Exception:
\end_layout

\begin_layout Plain Layout

                    pass
\end_layout

\begin_layout Plain Layout

                    #self.moving.play(loops=-1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            elif games.keyboard.is_pressed(games.K_s):
\end_layout

\begin_layout Plain Layout

                self.x -= self.speed * math.cos(math.radians(self.angle))
\end_layout

\begin_layout Plain Layout

                self.y -= self.speed * math.sin(math.radians(self.angle))
\end_layout

\begin_layout Plain Layout

                self.turret.x -= self.speed * math.cos(math.radians(self.angle))
\end_layout

\begin_layout Plain Layout

                self.turret.y -= self.speed * math.sin(math.radians(self.angle))
\end_layout

\begin_layout Plain Layout

                self.idle.stop()
\end_layout

\begin_layout Plain Layout

                #self.moving.play(loops=-1)
\end_layout

\begin_layout Plain Layout

            else:
\end_layout

\begin_layout Plain Layout

                try:
\end_layout

\begin_layout Plain Layout

                    self.moving.stop()
\end_layout

\begin_layout Plain Layout

                except Exception:
\end_layout

\begin_layout Plain Layout

                    pass
\end_layout

\begin_layout Plain Layout

                    #self.idle.play(loops=-1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            if games.keyboard.is_pressed(games.K_a):
\end_layout

\begin_layout Plain Layout

                self.angle -= self.hull_traverse
\end_layout

\begin_layout Plain Layout

                self.turret.angle -= self.hull_traverse
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            if games.keyboard.is_pressed(games.K_d):
\end_layout

\begin_layout Plain Layout

                self.angle += self.hull_traverse
\end_layout

\begin_layout Plain Layout

                self.turret.angle += self.hull_traverse
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            if games.keyboard.is_pressed(games.K_SPACE):
\end_layout

\begin_layout Plain Layout

                if self.reload_counter == 0:
\end_layout

\begin_layout Plain Layout

                    self.newBullets = Bullet(self.x + self.getBulletOffsetX(),
 self.y + self.getBulletOffsetY(),
\end_layout

\begin_layout Plain Layout

                                             self.turret.angle, self.id, self.damage
, -1, self.penetration)
\end_layout

\begin_layout Plain Layout

                    self.reload_counter = self.reload
\end_layout

\begin_layout Plain Layout

                    self.fire.play()
\end_layout

\begin_layout Plain Layout

            self.reload_counter = int(self.reload_counter)
\end_layout

\begin_layout Plain Layout

            if self.reload_counter > 0:
\end_layout

\begin_layout Plain Layout

                #print "RELOAD: "+str(self.reload_counter)
\end_layout

\begin_layout Plain Layout

                self.reload_counter -= 1
\end_layout

\begin_layout Plain Layout

                self.reloadText.set_value("Reload in: " + str(self.reload_counter))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            if self.reload_counter == 0:
\end_layout

\begin_layout Plain Layout

                self.reloadText.set_value("Ready to fire!")
\end_layout

\begin_layout Plain Layout

                self.reloadText.set_color(colour.black)
\end_layout

\begin_layout Plain Layout

            else:
\end_layout

\begin_layout Plain Layout

                self.reloadText.set_color(colour.red)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        self.nametag.x = self.x
\end_layout

\begin_layout Plain Layout

        self.nametag.y = self.y - 70
\end_layout

\begin_layout Plain Layout

        self.nametag.value = self.name + " " + str(int(self.hp))
\end_layout

\begin_layout Plain Layout

        self.userTag.x = self.x
\end_layout

\begin_layout Plain Layout

        self.userTag.y = self.y - 90
\end_layout

\begin_layout Plain Layout

        if self.hp < self.maxHp / 2:
\end_layout

\begin_layout Plain Layout

            self.image = games.load_image("res/" + self.name + "_body_damaged.png")
\end_layout

\begin_layout Plain Layout

            self.turret.image = games.load_image("res/" + self.name + "_turret_damag
ed.png")
\end_layout

\begin_layout Plain Layout

        if self.hp <= 0:
\end_layout

\begin_layout Plain Layout

            self.hp = 0
\end_layout

\begin_layout Plain Layout

            self.canMove = False
\end_layout

\begin_layout Plain Layout

            self.turret.canMove = False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def getBulletVector(self):
\end_layout

\begin_layout Plain Layout

        return Vector(self.x, self.y, self.x + math.cos(math.toRadians(self.angle))
 * 5,
\end_layout

\begin_layout Plain Layout

                      self.y + math.sin(math.toRadians(self.angle)) * 5)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def getBulletValues(self):
\end_layout

\begin_layout Plain Layout

	"""Returns the values of the bullet to spawn"""
\end_layout

\begin_layout Plain Layout

        try:
\end_layout

\begin_layout Plain Layout

            #print "bullets: "+str(self.newBullets)
\end_layout

\begin_layout Plain Layout

            self.va = [self.newBullets.x, self.newBullets.y, self.newBullets.angle,
 self.newBullets.ownerId,
\end_layout

\begin_layout Plain Layout

                       self.newBullets.damage, self.penetration]
\end_layout

\begin_layout Plain Layout

            self.newBullets = None
\end_layout

\begin_layout Plain Layout

            return self.va
\end_layout

\begin_layout Plain Layout

        except Exception as e:
\end_layout

\begin_layout Plain Layout

            #print e
\end_layout

\begin_layout Plain Layout

            return []
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def getBulletOffsetX(self):
\end_layout

\begin_layout Plain Layout

	"""Get the offset for the bullet, making it spawn at the gun muzzle"""
\end_layout

\begin_layout Plain Layout

        return ((0.5 * self.turret.get_width()) * math.cos(math.radians(self.turret.ang
le)))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def getBulletOffsetY(self):
\end_layout

\begin_layout Plain Layout

	"""Get the offset for the bullet, making it spawn at the gun muzzle"""
\end_layout

\begin_layout Plain Layout

        return ((0.5 * self.turret.get_height()) * math.sin(math.radians(self.turret.an
gle)))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class LocalTurret(games.Sprite):
\end_layout

\begin_layout Plain Layout

    """A class to handle the local turrets rotation"""
\end_layout

\begin_layout Plain Layout

    def __init__(self, x, y, angle, turret_traverse, name):
\end_layout

\begin_layout Plain Layout

        image = games.load_image("res/" + name + "_turret.png")
\end_layout

\begin_layout Plain Layout

        super(LocalTurret, self).__init__(image=image, x=x, y=y, angle=angle)
\end_layout

\begin_layout Plain Layout

        self.name = name
\end_layout

\begin_layout Plain Layout

        self.canMove = False
\end_layout

\begin_layout Plain Layout

        self.turret_traverse = turret_traverse
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def update(self):
\end_layout

\begin_layout Plain Layout

	"""Checks user input and rotates"""
\end_layout

\begin_layout Plain Layout

        if self.canMove:
\end_layout

\begin_layout Plain Layout

            if games.keyboard.is_pressed(games.K_LEFT):
\end_layout

\begin_layout Plain Layout

                self.angle -= self.turret_traverse
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            elif games.keyboard.is_pressed(games.K_RIGHT):
\end_layout

\begin_layout Plain Layout

                self.angle += self.turret_traverse
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Building(games.Sprite):
\end_layout

\begin_layout Plain Layout

    """A class to handle the on-screen buildings and collisions with them"""
\end_layout

\begin_layout Plain Layout

    def __init__(self, x, y, size):
\end_layout

\begin_layout Plain Layout

        if size == 1:
\end_layout

\begin_layout Plain Layout

            image = games.load_image("res/singleBuilding.png")
\end_layout

\begin_layout Plain Layout

        elif size == 2:
\end_layout

\begin_layout Plain Layout

            image = games.load_image("res/doubleBuilding.png")
\end_layout

\begin_layout Plain Layout

        super(Building, self).__init__(image=image, x=x, y=y)
\end_layout

\begin_layout Plain Layout

        self.setBounds(x, y, self.get_width(), self.get_height())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def setBounds(self, x, y, width, height):
\end_layout

\begin_layout Plain Layout

	"""Sets the bounding vectors of the building"""
\end_layout

\begin_layout Plain Layout

        TopLeft = [self.x, self.y]
\end_layout

\begin_layout Plain Layout

        TopRight = [self.x + width, self.y]
\end_layout

\begin_layout Plain Layout

        BottomLeft = [self.x, self.y + height]
\end_layout

\begin_layout Plain Layout

        BottomRight = [self.x + width, self.y + height]
\end_layout

\begin_layout Plain Layout

        TopSide = Vector(TopLeft[0], TopLeft[1], TopRight[0], TopRight[1])
\end_layout

\begin_layout Plain Layout

        LeftSide = Vector(TopLeft[0], TopLeft[1], BottomLeft[0], BottomLeft[1])
\end_layout

\begin_layout Plain Layout

        BottomSide = Vector(BottomLeft[0], BottomLeft[1], BottomRight[0],
 BottomRight[1])
\end_layout

\begin_layout Plain Layout

        RightSide = Vector(TopRight[0], TopRight[1], BottomRight[0], BottomRight
[1])
\end_layout

\begin_layout Plain Layout

        self.myVectors = [TopSide, LeftSide, RightSide, BottomSide]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def isCollided(self, b):
\end_layout

\begin_layout Plain Layout

	"""Checks if a vector collides with this building"""
\end_layout

\begin_layout Plain Layout

        vec = b.getVector()
\end_layout

\begin_layout Plain Layout

        for v in self.myVectors:
\end_layout

\begin_layout Plain Layout

            if intersect(v, vec):
\end_layout

\begin_layout Plain Layout

                return True
\end_layout

\begin_layout Plain Layout

        return False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class GameController(games.Sprite):
\end_layout

\begin_layout Plain Layout

    """This is the main class-  it will control all network comms and update
 the players as required"""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    image = games.load_image("res/conn.jpg")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def __init__(self, stats, host, port, username, amTesting):
\end_layout

\begin_layout Plain Layout

        super(GameController, self).__init__(image=GameController.image, x=0,
 y=0, angle=0)
\end_layout

\begin_layout Plain Layout

        if not amTesting:
\end_layout

\begin_layout Plain Layout

            self.setupGame(stats, host, port, username)
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            #Probably running tests
\end_layout

\begin_layout Plain Layout

            pass
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def setupGame(self,stats, host, port, username):
\end_layout

\begin_layout Plain Layout

	"""A method to load in all resources and set the game in motion"""
\end_layout

\begin_layout Plain Layout

        #Create a connection
\end_layout

\begin_layout Plain Layout

        self.connection = netComms.networkComms(host, int(port))
\end_layout

\begin_layout Plain Layout

        self.stats = stats
\end_layout

\begin_layout Plain Layout

        self.username = username
\end_layout

\begin_layout Plain Layout

        #Open resources
\end_layout

\begin_layout Plain Layout

        self.fire = games.load_sound("res/Sounds/ms-1-45mm.ogg")
\end_layout

\begin_layout Plain Layout

        self.idle = games.load_sound("res/Sounds/marder-idle.ogg")
\end_layout

\begin_layout Plain Layout

        self.moskau = games.load_sound("res/Sounds/Moskau.ogg")
\end_layout

\begin_layout Plain Layout

        self.moving = games.load_sound("res/Sounds/marder-moving.ogg")
\end_layout

\begin_layout Plain Layout

        self.loadingSongs = [games.load_sound("res/Sounds/WoT-Opening-1.ogg"),
\end_layout

\begin_layout Plain Layout

                             games.load_sound("res/Sounds/WoT-Opening-2.ogg"),
\end_layout

\begin_layout Plain Layout

                             games.load_sound("res/Sounds/WoT-Opening-3.ogg")]
\end_layout

\begin_layout Plain Layout

        self.battleSongs = [games.load_sound("res/Sounds/WoT-Battle-1.ogg"),
\end_layout

\begin_layout Plain Layout

                            games.load_sound("res/Sounds/WoT-Battle-2.ogg"),
\end_layout

\begin_layout Plain Layout

                            games.load_sound("res/Sounds/WoT-Battle-3.ogg"),
\end_layout

\begin_layout Plain Layout

                            games.load_sound("res/Sounds/WoT-Battle-4.ogg"),
\end_layout

\begin_layout Plain Layout

                            games.load_sound("res/Sounds/WoT-Battle-5.ogg")]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        self.despawnToServer = []
\end_layout

\begin_layout Plain Layout

        self.damageDone = []
\end_layout

\begin_layout Plain Layout

        name = self.stats[0]
\end_layout

\begin_layout Plain Layout

        hp = self.stats[1]
\end_layout

\begin_layout Plain Layout

        damage = self.stats[2]
\end_layout

\begin_layout Plain Layout

        penetration = self.stats[3]
\end_layout

\begin_layout Plain Layout

        reload = self.stats[4]
\end_layout

\begin_layout Plain Layout

        armour = self.stats[5]
\end_layout

\begin_layout Plain Layout

        hull_traverse = self.stats[6]
\end_layout

\begin_layout Plain Layout

        turret_trav = self.stats[7]
\end_layout

\begin_layout Plain Layout

        speed = self.stats[8]
\end_layout

\begin_layout Plain Layout

        self.bg = games.load_image("background.png")
\end_layout

\begin_layout Plain Layout

        self.update_ticks = 100
\end_layout

\begin_layout Plain Layout

        self.bulletType = Bullet(0, 0, 0, 0, 0, 0, 0)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #Create local instances of player and turret
\end_layout

\begin_layout Plain Layout

        #First we have to handshake
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        self.connection.send(["handshake", name, hp, self.username])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #This will return us the currently connected players and our ID
\end_layout

\begin_layout Plain Layout

        #print "RECV: "+str(self.connection.recieved)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        self.id = self.connection.recieved[0]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        if int(self.id) % 2 == 0:
\end_layout

\begin_layout Plain Layout

            self.team = 0
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            self.team = 1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        self.serverPlayers = self.connection.recieved[1]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #Start countdown to the game
\end_layout

\begin_layout Plain Layout

        self.countdown = self.connection.recieved[2]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #Add a timer
\end_layout

\begin_layout Plain Layout

        self.timerTop = games.Text(value="Game will start in:", x=400, y=300,
 size=50, color=colour.white)
\end_layout

\begin_layout Plain Layout

        self.timerMain = games.Text(value=str(self.countdown), x=400, y=400,
 size=50, color=colour.white)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        if self.countdown == 0:
\end_layout

\begin_layout Plain Layout

            self.close()
\end_layout

\begin_layout Plain Layout

            #Set the map
\end_layout

\begin_layout Plain Layout

        self.map = self.connection.recieved[3]
\end_layout

\begin_layout Plain Layout

        self.drawMap(self.map)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #Create these players, excluding us, as our movement is handled
 locally
\end_layout

\begin_layout Plain Layout

        #Add us
\end_layout

\begin_layout Plain Layout

        #We will get the data in the form [x,y,angle,turret angle]
\end_layout

\begin_layout Plain Layout

        self.clientTurret = LocalTurret(self.serverPlayers[self.id][0], self.serverP
layers[self.id][1],
\end_layout

\begin_layout Plain Layout

                                        self.serverPlayers[self.id][3], turret_tra
v, name)
\end_layout

\begin_layout Plain Layout

        self.client = LocalPlayer(self.serverPlayers[self.id][0], self.serverPlayers
[self.id][1],
\end_layout

\begin_layout Plain Layout

                                  self.serverPlayers[self.id][2], self.clientTurret
, speed,
\end_layout

\begin_layout Plain Layout

                                  hull_traverse, hp, reload, armour, name,
 self.id, damage, penetration, self.username,
\end_layout

\begin_layout Plain Layout

                                  self.team)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #Start the countdown
\end_layout

\begin_layout Plain Layout

        self.countdownThread = Thread(target=self.countingDown)
\end_layout

\begin_layout Plain Layout

        self.countdownThread.start()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #Add us to the screen
\end_layout

\begin_layout Plain Layout

        games.screen.add(self.client)
\end_layout

\begin_layout Plain Layout

        games.screen.add(self.clientTurret)
\end_layout

\begin_layout Plain Layout

        games.screen.add(self.timerTop)
\end_layout

\begin_layout Plain Layout

        games.screen.add(self.timerMain)
\end_layout

\begin_layout Plain Layout

        #We have handled us, remove us from the list
\end_layout

\begin_layout Plain Layout

        self.serverPlayers.pop(self.id)
\end_layout

\begin_layout Plain Layout

        #Create some variables to hold the players
\end_layout

\begin_layout Plain Layout

        self.serverInstances = []
\end_layout

\begin_layout Plain Layout

        self.serverInstancesTurret = []
\end_layout

\begin_layout Plain Layout

        self.bullets = []
\end_layout

\begin_layout Plain Layout

        self.toDespawn = []
\end_layout

\begin_layout Plain Layout

        self.toRebound = []
\end_layout

\begin_layout Plain Layout

        #Add everyone
\end_layout

\begin_layout Plain Layout

        for p in self.serverPlayers:
\end_layout

\begin_layout Plain Layout

            #Add a new turret instance
\end_layout

\begin_layout Plain Layout

            self.serverInstancesTurret.append(Turret(p[0], p[1], p[3], p[4]))
\end_layout

\begin_layout Plain Layout

            #Add a new player instance
\end_layout

\begin_layout Plain Layout

            self.serverInstances.append(
\end_layout

\begin_layout Plain Layout

                Player(p[0], p[1], p[2], p[4], p[5], p[6], self.serverInstancesTu
rret[-1], p[7], self.client.team))
\end_layout

\begin_layout Plain Layout

            #add them
\end_layout

\begin_layout Plain Layout

            games.screen.add(self.serverInstances[-1])
\end_layout

\begin_layout Plain Layout

            games.screen.add(self.serverInstancesTurret[-1])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            #Ok we cool
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def drawMap(self, map):
\end_layout

\begin_layout Plain Layout

	"""Read in the map and render buildings"""
\end_layout

\begin_layout Plain Layout

        #print "MAP: "+str(map)
\end_layout

\begin_layout Plain Layout

        width = games.screen.get_width()
\end_layout

\begin_layout Plain Layout

        height = games.screen.get_height()
\end_layout

\begin_layout Plain Layout

        #print "Width:"+str(width)
\end_layout

\begin_layout Plain Layout

        #print "Height:"+str(height)
\end_layout

\begin_layout Plain Layout

        #Split the screen into 50px blocks
\end_layout

\begin_layout Plain Layout

        toplefts_x = [x for x in range(0, width + 1, 100)]
\end_layout

\begin_layout Plain Layout

        toplefts_y = [x for x in range(150, (height + 1) - 150, 100)]
\end_layout

\begin_layout Plain Layout

        self.buildings = []
\end_layout

\begin_layout Plain Layout

        for block in map:
\end_layout

\begin_layout Plain Layout

            newBuilding = Building(toplefts_x[block[0]], toplefts_y[block[1]],
 block[2])
\end_layout

\begin_layout Plain Layout

            self.buildings.append(newBuilding)
\end_layout

\begin_layout Plain Layout

            games.screen.add(self.buildings[-1])
\end_layout

\begin_layout Plain Layout

        self.setBuildingVectors(self.buildings)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def countingDown(self):
\end_layout

\begin_layout Plain Layout

	"""Start the pre-match countdown on-screen"""
\end_layout

\begin_layout Plain Layout

        import random, time
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        if self.client.name == "KV1" or self.client.name == "T34":
\end_layout

\begin_layout Plain Layout

            toPlay = self.moskau
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            toPlay = random.choice(self.loadingSongs)
\end_layout

\begin_layout Plain Layout

        try:
\end_layout

\begin_layout Plain Layout

            toPlay.play()
\end_layout

\begin_layout Plain Layout

        except Exception as ex:
\end_layout

\begin_layout Plain Layout

            print str(ex)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        while self.countdown > 0:
\end_layout

\begin_layout Plain Layout

            time.sleep(1)
\end_layout

\begin_layout Plain Layout

            self.countdown -= 1
\end_layout

\begin_layout Plain Layout

            self.timerMain.set_value(str(self.countdown))
\end_layout

\begin_layout Plain Layout

        games.screen.remove(self.timerMain)
\end_layout

\begin_layout Plain Layout

        games.screen.remove(self.timerTop)
\end_layout

\begin_layout Plain Layout

        self.client.canMove = True
\end_layout

\begin_layout Plain Layout

        self.client.turret.canMove = True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def close(self, exception):
\end_layout

\begin_layout Plain Layout

	"""Close the game"""
\end_layout

\begin_layout Plain Layout

        games.screen.clear()
\end_layout

\begin_layout Plain Layout

        games.screen.quit()
\end_layout

\begin_layout Plain Layout

        raise exception
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def update(self):
\end_layout

\begin_layout Plain Layout

	"""Updates all local entities"""
\end_layout

\begin_layout Plain Layout

        if games.keyboard.is_pressed(games.K_ESCAPE):
\end_layout

\begin_layout Plain Layout

            self.connection.send("Disconnect")
\end_layout

\begin_layout Plain Layout

            games.screen.quit()
\end_layout

\begin_layout Plain Layout

            sys.exit([0])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        for b in self.serverInstances:
\end_layout

\begin_layout Plain Layout

            if self.client in b.get_overlapping_sprites():
\end_layout

\begin_layout Plain Layout

                self.client.x = self.client.last_x
\end_layout

\begin_layout Plain Layout

                self.client.y = self.client.last_y
\end_layout

\begin_layout Plain Layout

                self.clientTurret.x = self.clientTurret.last_x
\end_layout

\begin_layout Plain Layout

                self.clientTurret.y = self.clientTurret.last_y
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    #Let's thread it ##Or not, that creates race conditions
\end_layout

\begin_layout Plain Layout

    #Thread(target=self.doUpdating).start()
\end_layout

\begin_layout Plain Layout

        self.doUpdating()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def doUpdating(self):
\end_layout

\begin_layout Plain Layout

        """This occurs on every gameloop, updates the local client and sends
 data to server"""
\end_layout

\begin_layout Plain Layout

        #Give the server my position
\end_layout

\begin_layout Plain Layout

        try:
\end_layout

\begin_layout Plain Layout

            self.connection.send([self.id,
\end_layout

\begin_layout Plain Layout

                                  [self.client.x,
\end_layout

\begin_layout Plain Layout

                                   self.client.y,
\end_layout

\begin_layout Plain Layout

                                   self.client.angle,
\end_layout

\begin_layout Plain Layout

                                   self.client.turret.angle,
\end_layout

\begin_layout Plain Layout

                                   self.client.hp],
\end_layout

\begin_layout Plain Layout

                                  self.client.getBulletValues(),
\end_layout

\begin_layout Plain Layout

                                  self.despawnToServer,
\end_layout

\begin_layout Plain Layout

                                  self.toRebound,
\end_layout

\begin_layout Plain Layout

                                  self.damageDone])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        except HostDisconnectedException as e:
\end_layout

\begin_layout Plain Layout

            self.close(e)
\end_layout

\begin_layout Plain Layout

        if self.connection.recieved[0] == "EndGame":
\end_layout

\begin_layout Plain Layout

            self.endGame(self.connection.recieved[1])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #it'll give me the positions of all connected players, including
 me, we don't want that
\end_layout

\begin_layout Plain Layout

        self.recvPlayers = self.connection.recieved[0]
\end_layout

\begin_layout Plain Layout

        self.recvBullets = self.connection.recieved[1]
\end_layout

\begin_layout Plain Layout

        self.damageDone = []
\end_layout

\begin_layout Plain Layout

        #Ok.
 Pop us.
\end_layout

\begin_layout Plain Layout

        self.recvPlayers.pop(self.id)
\end_layout

\begin_layout Plain Layout

        self.recvCopy = self.recvPlayers
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #Now add the new players.
 if the list of connected is [p1, p2, p3, p4] and the new list is [p1,p2,p3,p4,p
5], the new players are old players [len(old):]
\end_layout

\begin_layout Plain Layout

        #For each in new players, create a new server instance and add it
\end_layout

\begin_layout Plain Layout

        while len(self.recvPlayers) > len(self.serverInstances):
\end_layout

\begin_layout Plain Layout

            try:
\end_layout

\begin_layout Plain Layout

                self.newAdd = self.recvPlayers[-1]
\end_layout

\begin_layout Plain Layout

                self.serverInstancesTurret.append(Turret(self.newAdd[0], self.newAdd
[1], self.newAdd[3], self.newAdd[4]))
\end_layout

\begin_layout Plain Layout

                self.serverInstances.append(
\end_layout

\begin_layout Plain Layout

                    Player(self.newAdd[0], self.newAdd[1], self.newAdd[2],
 self.newAdd[4], self.newAdd[5], self.newAdd[6],
\end_layout

\begin_layout Plain Layout

                           self.serverInstancesTurret[-1], self.newAdd[7],
 self.client.team))
\end_layout

\begin_layout Plain Layout

                games.screen.add(self.serverInstances[-1])
\end_layout

\begin_layout Plain Layout

                games.screen.add(self.serverInstancesTurret[-1])
\end_layout

\begin_layout Plain Layout

                self.recvPlayers.pop(-1)
\end_layout

\begin_layout Plain Layout

            except IndexError as ex:
\end_layout

\begin_layout Plain Layout

                self.resyncClient()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #Now update everyone
\end_layout

\begin_layout Plain Layout

        self.recvPlayers = self.recvCopy
\end_layout

\begin_layout Plain Layout

        for i in range(len(self.serverInstances)):
\end_layout

\begin_layout Plain Layout

            try:
\end_layout

\begin_layout Plain Layout

                self.serverInstances[i].x = self.recvPlayers[i][0]
\end_layout

\begin_layout Plain Layout

                self.serverInstances[i].y = self.recvPlayers[i][1]
\end_layout

\begin_layout Plain Layout

                self.serverInstances[i].angle = self.recvPlayers[i][2]
\end_layout

\begin_layout Plain Layout

                self.serverInstances[i].hp = self.recvPlayers[i][5]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

                self.serverInstancesTurret[i].x = self.recvPlayers[i][0]
\end_layout

\begin_layout Plain Layout

                self.serverInstancesTurret[i].y = self.recvPlayers[i][1]
\end_layout

\begin_layout Plain Layout

                self.serverInstancesTurret[i].angle = self.recvPlayers[i][3]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

                self.serverInstances[i].nametag.x = self.serverInstances[i].x
\end_layout

\begin_layout Plain Layout

                self.serverInstances[i].nametag.y = self.serverInstances[i].y
 - 70
\end_layout

\begin_layout Plain Layout

                self.serverInstances[i].userTag.x = self.serverInstances[i].x
\end_layout

\begin_layout Plain Layout

                self.serverInstances[i].userTag.y = self.serverInstances[i].y
 - 90
\end_layout

\begin_layout Plain Layout

            except Exception as ex:
\end_layout

\begin_layout Plain Layout

                print "Exception in update: " + str(ex)
\end_layout

\begin_layout Plain Layout

                #self.resyncClient()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        for b in self.buildings:
\end_layout

\begin_layout Plain Layout

            if b in self.client.get_overlapping_sprites():
\end_layout

\begin_layout Plain Layout

                self.client.x = self.client.last_x
\end_layout

\begin_layout Plain Layout

                self.client.y = self.client.last_y
\end_layout

\begin_layout Plain Layout

                self.client.angle = self.client.last_a
\end_layout

\begin_layout Plain Layout

                self.clientTurret.x = self.clientTurret.last_x
\end_layout

\begin_layout Plain Layout

                self.clientTurret.y = self.clientTurret.last_y
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #Check for collision into buildings and enemy tanks
\end_layout

\begin_layout Plain Layout

        #try:
\end_layout

\begin_layout Plain Layout

        #    p = self.client
\end_layout

\begin_layout Plain Layout

        #    t = self.client.turret
\end_layout

\begin_layout Plain Layout

        #    for i in range(len(self.buildings) - 1):
\end_layout

\begin_layout Plain Layout

        #        for v in self.vectors:
\end_layout

\begin_layout Plain Layout

        #            for a in self.buildingVectors[i]:
\end_layout

\begin_layout Plain Layout

        #                if self.vectorsIntersect(a, v):
\end_layout

\begin_layout Plain Layout

        #                    p.x = p.last_x
\end_layout

\begin_layout Plain Layout

        #                    p.y = p.last_y
\end_layout

\begin_layout Plain Layout

        #                    p.angle = p.last_a
\end_layout

\begin_layout Plain Layout

        #                    t.x = t.last_x
\end_layout

\begin_layout Plain Layout

        #                    t.y = t.last_y
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #except Exception as ex:
\end_layout

\begin_layout Plain Layout

        #    print "Error in game update: " + str(ex)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        self.doBulletSpawnDespawn(self.recvBullets)
\end_layout

\begin_layout Plain Layout

        self.checkBulletCollisions()
\end_layout

\begin_layout Plain Layout

        #self.drawVectors()
\end_layout

\begin_layout Plain Layout

        #Ok we cool
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def drawVectors(self):
\end_layout

\begin_layout Plain Layout

        """For debugging, draws all vectors on screen"""
\end_layout

\begin_layout Plain Layout

        for v in self.vectors:
\end_layout

\begin_layout Plain Layout

            draw.line(games.screen._display, colour.red, [v.x1, v.y1], [v.x2, v.y2])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        for b in self.buildingVectors:
\end_layout

\begin_layout Plain Layout

            for a in b:
\end_layout

\begin_layout Plain Layout

                draw.line(games.screen._display, colour.white, [a.x1, a.y1], [a.x2,
 a.y2])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            for c in self.bullets:
\end_layout

\begin_layout Plain Layout

                q = c.getBulletVector()
\end_layout

\begin_layout Plain Layout

                draw.line(games.screen._display, colour.yellow, [q.x1, q.y1],
 [q.x2, q.y2])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def setBuildingVectors(self, buildings):
\end_layout

\begin_layout Plain Layout

	"""resets all building bounding vectors"""
\end_layout

\begin_layout Plain Layout

        self.buildingVectors = []
\end_layout

\begin_layout Plain Layout

        for b in buildings:
\end_layout

\begin_layout Plain Layout

            #Offset vectors by half height and half width
\end_layout

\begin_layout Plain Layout

            hW = b.width / 2
\end_layout

\begin_layout Plain Layout

            hH = b.height / 2
\end_layout

\begin_layout Plain Layout

            left = Vector(b.x - hW, b.y - hH, b.x - hW, b.y + b.height - hH)
\end_layout

\begin_layout Plain Layout

            right = Vector(b.x + b.width - hW, b.y - hH, b.x + b.width - hW,
 b.y + b.height - hH)
\end_layout

\begin_layout Plain Layout

            top = Vector(b.x - hW, b.y - hH, b.x + b.width - hW, b.y - hH)
\end_layout

\begin_layout Plain Layout

            bottom = Vector(b.x - hW, b.y + b.height - hH, b.x + b.width - hW,
 b.y + b.height - hH)
\end_layout

\begin_layout Plain Layout

            self.buildingVectors.append([left, right, top, bottom])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def doBulletSpawnDespawn(self, server):
\end_layout

\begin_layout Plain Layout

        """Main method to make the local bullets equal the server bullets"""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #Init the arrays we'll use to store data
\end_layout

\begin_layout Plain Layout

        self.despawnToServer = []
\end_layout

\begin_layout Plain Layout

        self.toRebound = []
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #Check for building collisions
\end_layout

\begin_layout Plain Layout

        #self.checkBuildings(self.bullets)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #These are the bullets currently spawned by the server and their
 IDS
\end_layout

\begin_layout Plain Layout

        currentIDs = [b.bulletID for b in self.bullets]
\end_layout

\begin_layout Plain Layout

        serverIDs = [b[6] for b in server]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #Add new bullets
\end_layout

\begin_layout Plain Layout

        for bullet in server:
\end_layout

\begin_layout Plain Layout

            if bullet[6] not in currentIDs:
\end_layout

\begin_layout Plain Layout

                try:
\end_layout

\begin_layout Plain Layout

                    self.fire.play()
\end_layout

\begin_layout Plain Layout

                except Exception as ex:
\end_layout

\begin_layout Plain Layout

                    print str(ex)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

                self.bullets.append(Bullet(bullet[0], bullet[1], bullet[2],
 bullet[3],
\end_layout

\begin_layout Plain Layout

                                           bullet[4], bullet[6], bullet[7]))
\end_layout

\begin_layout Plain Layout

                games.screen.add(self.bullets[-1])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        for b in self.bullets:
\end_layout

\begin_layout Plain Layout

            if b.bulletID not in serverIDs:
\end_layout

\begin_layout Plain Layout

                games.screen.remove(b)
\end_layout

\begin_layout Plain Layout

                self.bullets.remove(b)
\end_layout

\begin_layout Plain Layout

            for c in self.buildings:
\end_layout

\begin_layout Plain Layout

                if c.isCollided(b):
\end_layout

\begin_layout Plain Layout

                    self.despawnToServer.append(b.bulletID)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        for i in range(0, len(server)):
\end_layout

\begin_layout Plain Layout

            self.bullets[i].x = server[i][0]
\end_layout

\begin_layout Plain Layout

            self.bullets[i].y = server[i][1]
\end_layout

\begin_layout Plain Layout

            self.bullets[i].angle = server[i][2]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def dotProduct(self, vA, vB):
\end_layout

\begin_layout Plain Layout

	"""Works out the scalar product of 2 vectors"""
\end_layout

\begin_layout Plain Layout

        xComp = vA[0] * vB[0]
\end_layout

\begin_layout Plain Layout

        yComp = vA[1] * vB[1]
\end_layout

\begin_layout Plain Layout

        return xComp + yComp
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def checkBulletCollisions(self):
\end_layout

\begin_layout Plain Layout

        """A general bullet collision method to check vector intersection"""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #Update the client's vectors
\end_layout

\begin_layout Plain Layout

        self.setVectors()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #Iterate through all the bullets, checks them
\end_layout

\begin_layout Plain Layout

        for bullet in self.bullets:
\end_layout

\begin_layout Plain Layout

            angle = math.radians(bullet.angle)
\end_layout

\begin_layout Plain Layout

            if bullet.ownerId != self.client.id:
\end_layout

\begin_layout Plain Layout

                if self.is_collided(bullet):
\end_layout

\begin_layout Plain Layout

                    #self.damageDone.append([bullet.damage, bullet.ownerId])
\end_layout

\begin_layout Plain Layout

                    pass
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def is_collided(self, bullet):
\end_layout

\begin_layout Plain Layout

        """Checks for collision, will test for overlap between the vectors
 of the tank and the bullet"""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #Repeat for all 4 side of the tank
\end_layout

\begin_layout Plain Layout

        for v in self.vectors:
\end_layout

\begin_layout Plain Layout

            if self.vectorsIntersect(v, bullet.getVector()):
\end_layout

\begin_layout Plain Layout

                noVectorIntersects = False
\end_layout

\begin_layout Plain Layout

                angle = getAngleOfIntersection(bullet.getVector(), v)
\end_layout

\begin_layout Plain Layout

                if self.doesPenetrate(angle, bullet, self.client.armour):
\end_layout

\begin_layout Plain Layout

                    #Damage tank accordingly and despawn the bullet
\end_layout

\begin_layout Plain Layout

                    self.client.hp -= bullet.damage
\end_layout

\begin_layout Plain Layout

                    self.despawnToServer.append(bullet.bulletID)
\end_layout

\begin_layout Plain Layout

                else:
\end_layout

\begin_layout Plain Layout

                    if angle < 180:
\end_layout

\begin_layout Plain Layout

                        b = bullet.getVector()
\end_layout

\begin_layout Plain Layout

                        self.toRebound.append(
\end_layout

\begin_layout Plain Layout

                            [bullet.bulletID, angle, v.angle - 90, b.x1, b.y1,
 b.x2, b.y2, v.x1, v.y1, v.x2, v.y2, bullet.angle])
\end_layout

\begin_layout Plain Layout

            noVectorIntersects = True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #BUG: Occasionally the bullet will just fly through the vector,
 this WILL penetrate as it needs to be at a very low angle
\end_layout

\begin_layout Plain Layout

        overlaps = self.client.get_overlapping_sprites()
\end_layout

\begin_layout Plain Layout

        #if bullet in overlaps and noVectorIntersects:
\end_layout

\begin_layout Plain Layout

            #This means that the bullet is within the tank without colliding
\end_layout

\begin_layout Plain Layout

            #We'll give it penetration
\end_layout

\begin_layout Plain Layout

            #self.client.hp -= bullet.damage
\end_layout

\begin_layout Plain Layout

            #self.despawnToServer.append(bullet.bulletID)
\end_layout

\begin_layout Plain Layout

            #self.damageDone.append([bullet.damage, bullet.ownerId])
\end_layout

\begin_layout Plain Layout

            #pass
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def vectorsIntersect(self, vecA, vecB):
\end_layout

\begin_layout Plain Layout

        """Checks if 2 vectors intersect, calls game_calcs"""
\end_layout

\begin_layout Plain Layout

        if intersect(vecA, vecB):
\end_layout

\begin_layout Plain Layout

            if (vecA.add(vecB).getMagnitude() < vecA.getMagnitude()) or 1 ==
 1:
\end_layout

\begin_layout Plain Layout

                return True
\end_layout

\begin_layout Plain Layout

        return False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def setVectors(self):
\end_layout

\begin_layout Plain Layout

        """This sets vectors around the edge of the image"""
\end_layout

\begin_layout Plain Layout

        ###DO NOT EDIT, MAGIC BE HERE###
\end_layout

\begin_layout Plain Layout

        angle = math.radians(self.client.angle + 45)
\end_layout

\begin_layout Plain Layout

        rect = self.client._rect
\end_layout

\begin_layout Plain Layout

        center = rect.center
\end_layout

\begin_layout Plain Layout

        tri_hyp = math.sqrt((self.client.orig_width / 2) ** 2 + (self.client.orig_hei
ght / 2) ** 2)
\end_layout

\begin_layout Plain Layout

        corner1X, corner1Y = center[0] + (math.cos(angle) * tri_hyp), center[1]
 + (math.sin(angle) * tri_hyp)
\end_layout

\begin_layout Plain Layout

        corner2X, corner2Y = center[0] - (math.cos(angle) * tri_hyp), center[1]
 - (math.sin(angle) * tri_hyp)
\end_layout

\begin_layout Plain Layout

        corner3X, corner3Y = center[0] + (math.sin(angle) * tri_hyp), center[1]
 - (math.cos(angle) * tri_hyp)
\end_layout

\begin_layout Plain Layout

        corner4X, corner4Y = center[0] - (math.sin(angle) * tri_hyp), center[1]
 + (math.cos(angle) * tri_hyp)
\end_layout

\begin_layout Plain Layout

        self.vectors = [Vector(corner1X, corner1Y, corner3X, corner3Y),
\end_layout

\begin_layout Plain Layout

                        Vector(corner1X, corner1Y, corner4X, corner4Y),
\end_layout

\begin_layout Plain Layout

                        Vector(corner2X, corner2Y, corner3X, corner3Y),
\end_layout

\begin_layout Plain Layout

                        Vector(corner2X, corner2Y, corner4X, corner4Y)]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def doesPenetrate(self, angle, bullet, armourValue):
\end_layout

\begin_layout Plain Layout

        """Returns true if the bullet has enough penetration, false otherwise"""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #This is the critical angle at which any bullet will auto-bounce
\end_layout

\begin_layout Plain Layout

        if angle < 30 or angle > 180:
\end_layout

\begin_layout Plain Layout

            return False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #Calculate effective armour via trigonometry.
\end_layout

\begin_layout Plain Layout

        effectiveArmour = armourValue / math.sin(math.radians(angle))
\end_layout

\begin_layout Plain Layout

        #print "Effective armour at " + str(angle) + " is " + str(effectiveArmou
r)
\end_layout

\begin_layout Plain Layout

        #Check if the bullet has enough penetration and return
\end_layout

\begin_layout Plain Layout

        if bullet.penetration >= effectiveArmour:
\end_layout

\begin_layout Plain Layout

            try:
\end_layout

\begin_layout Plain Layout

                self.damageDone.append([bullet.damage, bullet.ownerId])
\end_layout

\begin_layout Plain Layout

            except Exception:
\end_layout

\begin_layout Plain Layout

                #More test cases
\end_layout

\begin_layout Plain Layout

                pass
\end_layout

\begin_layout Plain Layout

            #print "Penetration"
\end_layout

\begin_layout Plain Layout

            return True
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            #print "Bounce"
\end_layout

\begin_layout Plain Layout

            return False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def resyncClient(self):
\end_layout

\begin_layout Plain Layout

	"""Reload all serverside variables"""
\end_layout

\begin_layout Plain Layout

        games.screen.clear()
\end_layout

\begin_layout Plain Layout

        games.screen.add(self.client)
\end_layout

\begin_layout Plain Layout

        games.screen.add(self.clientTurret)
\end_layout

\begin_layout Plain Layout

        self.doBulletSpawnDespawn(self.recvBullets)
\end_layout

\begin_layout Plain Layout

        for p in self.serverPlayers:
\end_layout

\begin_layout Plain Layout

            #Add a new turret instance
\end_layout

\begin_layout Plain Layout

            self.serverInstancesTurret.append(Turret(p[0], p[1], p[3], p[4]))
\end_layout

\begin_layout Plain Layout

            #Add a new player instance
\end_layout

\begin_layout Plain Layout

            self.serverInstances.append(
\end_layout

\begin_layout Plain Layout

                Player(p[0], p[1], p[2], p[4], p[5], p[6], self.serverInstancesTu
rret[-1], p[7], self.client.team))
\end_layout

\begin_layout Plain Layout

            #add them
\end_layout

\begin_layout Plain Layout

            games.screen.add(self.serverInstances[-1])
\end_layout

\begin_layout Plain Layout

            games.screen.add(self.serverInstancesTurret[-1])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def checkBuildings(self, bul):
\end_layout

\begin_layout Plain Layout

	"""Check if the tank is collided with any buildings"""
\end_layout

\begin_layout Plain Layout

        for b in bul:
\end_layout

\begin_layout Plain Layout

            a = b.getBulletVector()
\end_layout

\begin_layout Plain Layout

            for c in self.buildingVectors:
\end_layout

\begin_layout Plain Layout

                for d in c:
\end_layout

\begin_layout Plain Layout

                    if self.vectorsIntersect(a, d):
\end_layout

\begin_layout Plain Layout

                        self.despawnToServer.append(b.bulletID)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def endGame(self, stats):
\end_layout

\begin_layout Plain Layout

	"""Close the server connection and return to the tank selection screen"""
\end_layout

\begin_layout Plain Layout

        self.connection.close()
\end_layout

\begin_layout Plain Layout

        #print "Connection to server closed"
\end_layout

\begin_layout Plain Layout

        games.screen.clear()
\end_layout

\begin_layout Plain Layout

        try:
\end_layout

\begin_layout Plain Layout

            games.Screen.quit()
\end_layout

\begin_layout Plain Layout

        except Exception:
\end_layout

\begin_layout Plain Layout

            games.screen.quit()
\end_layout

\begin_layout Plain Layout

        games.screen.background = games.load_image("res/notinprogress.png")
\end_layout

\begin_layout Plain Layout

        raise EndOfGame(str(stats))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def mainGame(instance):
\end_layout

\begin_layout Plain Layout

    """Called to run the client, requires data for the tank and the host/port"""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    #Open the screen
\end_layout

\begin_layout Plain Layout

    #reload(games)
\end_layout

\begin_layout Plain Layout

    #games.screen.quit()
\end_layout

\begin_layout Plain Layout

    #quit()
\end_layout

\begin_layout Plain Layout

    #games.init(1024, 768, 30)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        #reload(games)
\end_layout

\begin_layout Plain Layout

        #This sets the initial conditions for the client
\end_layout

\begin_layout Plain Layout

        username = instance[0]
\end_layout

\begin_layout Plain Layout

        stats = instance[1]
\end_layout

\begin_layout Plain Layout

        host = instance[2]
\end_layout

\begin_layout Plain Layout

        port = instance[3]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #Establish background
\end_layout

\begin_layout Plain Layout

        back = games.load_image("res/background.png")
\end_layout

\begin_layout Plain Layout

        games.screen.background = back
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #Set up the game controller and feed it the conditions
\end_layout

\begin_layout Plain Layout

        fat_controller = GameController(stats, host, port, username, False)
\end_layout

\begin_layout Plain Layout

        games.screen.add(fat_controller)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #Start the game
\end_layout

\begin_layout Plain Layout

        games.screen.mainloop()
\end_layout

\begin_layout Plain Layout

    #Exceptions - can communicate with the login client
\end_layout

\begin_layout Plain Layout

    except GameInProgressException as message:
\end_layout

\begin_layout Plain Layout

        return message
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    except HostDisconnectedException as message:
\end_layout

\begin_layout Plain Layout

        return message
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        #except Exception as ex:
\end_layout

\begin_layout Plain Layout

        #    print "ERROR: " + str(ex)
\end_layout

\begin_layout Plain Layout

        #    fat_controller.connection.send(["Disconnect", fat_controller.id])
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

NPD Group study into PC Usage: URL: https://www.npd.com/wps/portal/npd/us/news/pre
ss-releases/the-npd-group-report-shows-increased-number-of-online-gamers-and-hou
rs-spent-gaming/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-2"

\end_inset

Slick Muffin Studios URL: http://slickmuffin.weebly.com/
\end_layout

\end_body
\end_document
